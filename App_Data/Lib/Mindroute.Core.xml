<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mindroute.Core</name>
    </assembly>
    <members>
        <member name="T:Mindroute.Core.Blobs.ILocalBlobProvider">
            <summary>
            Interface for local blob storage providers.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Blobs.IBlobProvider">
            <summary>
            Interface for blob storage providers.
            </summary>
        </member>
        <member name="T:Mindroute.Core.IProvider">
            <summary>
             Interface for providers.
            </summary>
        </member>
        <member name="M:Mindroute.Core.IProvider.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Called on application startup to initialize the provider with the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings</param>        
        </member>
        <member name="M:Mindroute.Core.Blobs.IBlobProvider.Exists(System.Guid)">
            <summary>
            Checks if the specified blob data exists.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Mindroute.Core.Blobs.IBlobProvider.Get(System.Guid,System.IO.Stream)">
            <summary>
            Writes the binary data of the blob to the specified output stream.
            </summary>
            <param name="id">ID of the blob.</param>
            <param name="output">The output stream where the data should be written.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.IBlobProvider.Insert(Mindroute.Core.Model.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob. 
            After insert <c>blob.Size</c> contains the size of the uploaded blob.
            </summary>
            <param name="blob">A <see cref="T:Mindroute.Core.Model.Blob"/> object with metadata.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.IBlobProvider.Remove(System.Guid)">
            <summary>
            Permanently removes blob data from storage.
            </summary>
            <param name="id">ID of the blob.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.ILocalBlobProvider.Get(System.Guid)">
            <summary>
            Returns the location of the specified blob data as a <see cref="T:System.IO.FileInfo"/> object.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object if the blob exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Mindroute.Core.Blobs.FileBlobProvider">
            <summary>
              Implementation of the <see cref="T:Mindroute.Core.Blobs.IBlobProvider"/> interface that stores files on local disk.
            </summary>    
        </member>
        <member name="M:Mindroute.Core.Blobs.FileBlobProvider.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider with the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.FileBlobProvider.Exists(System.Guid)">
            <summary>
            Checks if the specified blob exists.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Mindroute.Core.Blobs.FileBlobProvider.Get(System.Guid)">
            <summary>
            Returns the location of the specified blob as a <see cref="T:System.IO.FileInfo"/> object.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object if the blob exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Blobs.FileBlobProvider.Get(System.Guid,System.IO.Stream)">
            <summary>
            Writes the binary data of the blob to the specified output stream.
            </summary>
            <param name="id">ID of the blob.</param>
            <param name="output">The output stream where the data should be written.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.FileBlobProvider.Insert(Mindroute.Core.Model.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob.
            After insert <c>blob.Size</c> contains the size of the uploaded blob.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.FileBlobProvider.Remove(System.Guid)">
            <summary>
            Permanently removes a blob from the repository.
            </summary>
            <param name="id">ID of the blob.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.FileBlobProvider.GetWriteLocation(Mindroute.Core.Model.Blob)">
            <summary>
            Returns a the path on disk where the data for the specified blob should be written.
            </summary>
            <param name="blob">A <see cref="T:Mindroute.Core.Model.Blob"/> object.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object.</returns>
        </member>
        <member name="T:Mindroute.Core.Caching.CacheRegion">
            <summary>
              Enumerate the available Cache regions.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.None">
            <summary>
            No cache region.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Content">
            <summary>
            Sets cache region to Content.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Comment">
            <summary>
            Sets cache region to Comment.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Extension">
            <summary>
            Sets cache region to Extension.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Permission">
            <summary>
            Sets cache region to Permission.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Taxonomy">
            <summary>
            Sets cache region to Taxonomy.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Setting">
            <summary>
            Sets cache region to Setting.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Site">
            <summary>
            Sets cache region to Site.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.User">
            <summary>
            Sets cache region to User.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Role">
            <summary>
            Sets cache region to Role.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Caching.CacheRegion.Dashboard">
            <summary>
            Sets cache region to Dashboard.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Collections.IPagedList">
            <summary>
            Interface for a paged collection. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.PageIndex">
            <summary>
              Gets or sets the page index.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.PageSize">
            <summary>
              Gets or sets the page size.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.PageCount">
            <summary>
              Gets or sets the page count.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.PageNumber">
            <summary>
              Gets the page number.
            </summary>
            <remarks>Returns PageIndex + 1</remarks>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.ItemCount">
            <summary>
              Gets the item count of the current page.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.TotalItemCount">
            <summary>
              Gets or sets the total item count.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.HasPreviousPage">
            <summary>
              Gets or sets a value indicating whether the list has a previous page.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.HasNextPage">
            <summary>
              Gets or sets a value indicating whether the list has a next page.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.IsFirstPage">
            <summary>
              Gets or sets a value indicating whether the current page is the first.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.IPagedList.IsLastPage">
            <summary>
              Gets or sets a value indicating whether the current page is the last.
            </summary>
        </member>
        <member name="T:Mindroute.Core.BootStrapper">
            <summary>
            A class that performs start up tasks such as configuring logging and dependency injection, 
            starting background tasks etc. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.GetExtensionType(System.String)">
            <summary>
            Gets the extension <see cref="T:System.Type"/> with the specified name, performing a case-sensitive search. 
            </summary>
            <param name="fullname">The full name of the type to get, including namespace.</param>
            <returns>The <see cref="T:System.Type"/> with the specified name, if found; otherwise, null</returns>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.GetExtensionTypeName(Mindroute.Core.Model.Extension)">
            <summary>
            Gets the type name of an extension, i.e. "ContentType", "Daemon", "Plugin", "Function" or "Extension".
            </summary>
            <param name="ext">Extension to get type name of.</param>
            <returns>Returns the name of the extension type.</returns>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.GetExtensionTypes">
            <summary>
            Return all extension types from the loaded assemblies.
            </summary>
            <returns>A list of <see cref="T:System.Type"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.GetSection(Mindroute.Core.Model.Extension)">
            <summary>
            Gets the content section of the extension, i.e. "Pages", "Folders" or "Files".
            </summary>
            <param name="ext">Extension to get section for.</param>
            <returns>Returns the section</returns>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.GetInstallationChecks">
            <summary>
            Gets the list of installation checks for display on setup screen.
            </summary>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.InitializeProviders">
            <summary>
            Initialize providers.
            </summary>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.Install">
            <summary>
            Install providers.
            </summary>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.IsExtension(System.Type)">
            <summary>
            Checks if the specified type is an extension.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to check.</param>
            <returns><c>true</c> if the type is an extension, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.RegisterExtensions">
            <summary>
            Register extensions (bootstrapper tasks, content types, daemon and plugins) with the dependency injection container and the repository.
            </summary>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.SkipAssembly(System.Reflection.AssemblyName)">
            <summary>
            Filters system assemblies and other assemblies we are not interested in.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> to check.</param>
            <returns><c>true</c> to skip the assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.Start">
            <summary>
            Initializes resources. Typically called on application start.
            </summary>
        </member>
        <member name="M:Mindroute.Core.BootStrapper.Stop">
            <summary>
            Performs tasks associated with freeing and releasing resources. Typically called on application shutdown.
            </summary>
        </member>
        <member name="P:Mindroute.Core.BootStrapper.InstallationState">
            <summary>
            Gets the installation state of the system.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Caching.AspNetCache">
            <summary>
              An in-process implementation of the <see cref="T:Mindroute.Core.Caching.ICacheProvider"/> interface that internally uses the System.Web.Caching.Cache.
            </summary>    
        </member>
        <member name="T:Mindroute.Core.Caching.ICacheProvider">
            <summary>
              Interface for cache providers.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Caching.ICacheProvider.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Caching.ICacheProvider.Clear(Mindroute.Core.Caching.CacheRegion)">
            <summary>
            Removes all items from the cache region.
            </summary>
            <param name="region">The cache region to clear.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.ICacheProvider.Exists(Mindroute.Core.Caching.CacheRegion,System.String)">
            <summary>
            Checks if the specified item exists in the cache.
            </summary>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns><c>true</c> if the item exists in the cache, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Caching.ICacheProvider.Get``1(Mindroute.Core.Caching.CacheRegion,System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">The type of data to get from the cache.</typeparam>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:Mindroute.Core.Caching.ICacheProvider.Put``1(Mindroute.Core.Caching.CacheRegion,System.String,``0)">
            <summary>
            Inserts an item into the Cache object with a cache key to reference its location.
            </summary>
            <typeparam name="T">The type of data to put in the cache.</typeparam>
            <param name="region">The cache region in which to put the cache item.</param> 
            <param name="key">The cache key used to reference the item.</param>
            <param name="item">The object to be inserted into the cache.</param>
            <remarks>This method will overwrite an existing cache item whose key matches the key parameter.</remarks>
        </member>
        <member name="M:Mindroute.Core.Caching.ICacheProvider.Remove(Mindroute.Core.Caching.CacheRegion,System.String[])">
            <summary>
            Removes the specified items from the cache.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.ICacheProvider.RemoveStartingWith(Mindroute.Core.Caching.CacheRegion,System.String[])">
            <summary>
            Removes all items starting with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="P:Mindroute.Core.Caching.ICacheProvider.Hits">
            <summary>
            Gets the total number of cache hits.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Caching.ICacheProvider.Misses">
            <summary>
            Gets the total number of cache misses.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Caching.ICacheProvider.Items">
            <summary>
            Gets the total number of items in the cache.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider with the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.Clear">
            <summary>
            Removes all items from the Cache.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.Clear(Mindroute.Core.Caching.CacheRegion)">
            <summary>
            Removes all items from the <see cref="T:Mindroute.Core.Caching.CacheRegion"/>.
            </summary>
            <param name="region">The <see cref="T:Mindroute.Core.Caching.CacheRegion"/> to clear.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.Exists(Mindroute.Core.Caching.CacheRegion,System.String)">
            <summary>
            Checks if the specified item exists in the cache.
            </summary>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns><c>true</c> if the item exists in the cache, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.Get``1(Mindroute.Core.Caching.CacheRegion,System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">The type of data to get from the cache.</typeparam>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.Put``1(Mindroute.Core.Caching.CacheRegion,System.String,``0)">
            <summary>
            Inserts an item into the Cache object with a cache key to reference its location.
            </summary>
            <typeparam name="T">The type of data to put in the cache.</typeparam>
            <param name="region">The cache region in which to put the cache item.</param> 
            <param name="key">The cache key used to reference the item.</param>
            <param name="item">The object to be inserted into the cache.</param>
            <remarks>This method will overwrite an existing cache item whose key matches the key parameter.</remarks>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.Remove(Mindroute.Core.Caching.CacheRegion,System.String[])">
            <summary>
            Removes the specified items from the cache.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.RemoveStartingWith(Mindroute.Core.Caching.CacheRegion,System.String[])">
            <summary>
            Removes all items starting with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.GetRegionKey(Mindroute.Core.Caching.CacheRegion)">
            <summary>
            Gets the cache key for the specified CacheRegion.
            </summary>
            <param name="region">A CacheRegion for which to get cache key.</param>
            <returns>A string used to identify the CacheRegion.</returns>
        </member>
        <member name="M:Mindroute.Core.Caching.AspNetCache.GetCacheKey(Mindroute.Core.Caching.CacheRegion,System.String)">
            <summary>
            Gets the composite cache key for the specified CacheRegion and item key.
            </summary>
            <param name="region">A CacheRegion for which to get cache key.</param>
            <param name="key">Cache key for a specific item in the cache region.</param>
            <returns>A string used to identify the item in the CacheRegion.</returns>
        </member>
        <member name="P:Mindroute.Core.Caching.AspNetCache.Hits">
            <summary>
            Gets the total number of cache hits.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Caching.AspNetCache.Misses">
            <summary>
            Gets the total number of cache misses.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Caching.AspNetCache.Items">
            <summary>
            Gets the total number of items in the cache.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Caching.NullCache">
            <summary>
              An implementation of the <see cref="T:Mindroute.Core.Caching.ICacheProvider"/> interface that disables caching.
            </summary>        
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider with the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.Clear(Mindroute.Core.Caching.CacheRegion)">
            <summary>
            Removes all items from the cache region.
            </summary>
            <param name="region">The cache region to clear.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.Exists(Mindroute.Core.Caching.CacheRegion,System.String)">
            <summary>
            Checks if the specified item exists in the cache.
            </summary>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns><c>true</c> if the item exists in the cache, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.Get``1(Mindroute.Core.Caching.CacheRegion,System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">The type of data to get from the cache.</typeparam>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.Put``1(Mindroute.Core.Caching.CacheRegion,System.String,``0)">
            <summary>
            Inserts an item into the Cache object with a cache key to reference its location.
            </summary>
            <typeparam name="T">The type of data to put in the cache.</typeparam>
            <param name="region">The cache region in which to put the cache item.</param> 
            <param name="key">The cache key used to reference the item.</param>
            <param name="item">The object to be inserted into the cache.</param>
            <remarks>This method will overwrite an existing cache item whose key matches the key parameter.</remarks>
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.Remove(Mindroute.Core.Caching.CacheRegion,System.String[])">
            <summary>
            Removes the specified items from the cache.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Caching.NullCache.RemoveStartingWith(Mindroute.Core.Caching.CacheRegion,System.String[])">
            <summary>
            Removes all items starting with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="P:Mindroute.Core.Caching.NullCache.Hits">
            <summary>
            Gets the total number of cache hits.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Caching.NullCache.Misses">
            <summary>
            Gets the total number of cache misses.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Caching.NullCache.Items">
            <summary>
            Gets the total number of items in the cache.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Collections.PersistableDictionary">
            <summary>
            A persistable dictionary. The values of the dictionary must be Persistable as decided by PersistanceHelper.IsPersistable().
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.IDeepCloneable">
            <summary>
            Indicates that the implementing class can create deep copies.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.IDeepCloneable.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="M:Mindroute.Core.Collections.PersistableDictionary.#ctor">
            <summary>
            Initializes a new instance of the PersistableDictionary class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Collections.PersistableDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PersistableDictionary class with serialized data.
            </summary>
            <param name="info">A System.Runtime.Serialization.SerializationInfo object containing the information required to serialize the PersistableDictionary.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext structure containing the source and destination of the serialized stream associated with the PersistableDictionary.</param>
        </member>
        <member name="M:Mindroute.Core.Collections.PersistableDictionary.Get``1(System.String)">
            <summary>
            Gets the value associated with the specified key. 
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>Returns the value associated with the specified key or the default value for <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Collections.PersistableDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:Mindroute.Core.Collections.PersistableDictionary.ToString">
            <summary>
            Returns an xml string that represents the PersistableDictionary.
            </summary>
            <returns>An xml string that represents the PersistableDictionary, null if the dictionary is empty.</returns>
        </member>
        <member name="M:Mindroute.Core.Collections.PersistableDictionary.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Collections.PersistableDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key or null if the specified key was not found. A set operation creates a new element with the specified key.</returns>
        </member>
        <member name="T:Mindroute.Core.Collections.PagedList`1">
            <summary>
              Represents a collection of objects that can be paged.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Mindroute.Core.Collections.PagedList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the PagedList class.
            </summary>
            <param name="source">The collection of items to initialize the paged list with.</param>
            <param name="pageIndex">The current page index.</param>
            <param name="pageSize">The current page size.</param>
            <param name="totalItemCount">The total item count,</param>        
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.PageIndex">
            <summary>
              Gets or sets the page index.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.PageSize">
            <summary>
              Gets or sets the page size.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.PageCount">
            <summary>
              Gets or sets the page count.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.PageNumber">
            <summary>
              Gets the page number.
            </summary>
            <remarks>Returns PageIndex + 1</remarks>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.ItemCount">
            <summary>
              Gets the item count of the current page.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.TotalItemCount">
            <summary>
              Gets or sets the total item count.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.HasPreviousPage">
            <summary>
              Gets or sets a value indicating whether the list has a previous page.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.HasNextPage">
            <summary>
              Gets or sets a value indicating whether the list has a next page.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.IsFirstPage">
            <summary>
              Gets or sets a value indicating whether the current page is the first.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.PagedList`1.IsLastPage">
            <summary>
              Gets or sets a value indicating whether the current page is the last.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Collections.SmartEnumerable`1">
            <summary>
            Type chaining an IEnumerable&lt;T&gt; to allow the iterating code
            to detect the first and last entries simply.
            </summary>
            <typeparam name="T">Type to iterate over</typeparam>
        </member>
        <member name="F:Mindroute.Core.Collections.SmartEnumerable`1.enumerable">
            <summary>
            Enumerable we proxy to
            </summary>
        </member>
        <member name="M:Mindroute.Core.Collections.SmartEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the SmartEnumerable class.
            </summary>
            <param name="enumerable">Collection to enumerate. Must not be null.</param>
        </member>
        <member name="M:Mindroute.Core.Collections.SmartEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumeration of Entry objects, each of which knows
            whether it is the first/last of the enumeration, as well as the
            current value.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Collections.SmartEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-generic form of GetEnumerator.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Collections.SmartEnumerable`1.Entry">
            <summary>
            Represents each entry returned within a collection,
            containing the value and whether it is the first and/or
            the last entry in the collection's. enumeration
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.SmartEnumerable`1.Entry.Value">
            <summary>
            The value of the entry.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.SmartEnumerable`1.Entry.IsFirst">
            <summary>
            Whether or not this entry is first in the collection's enumeration.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.SmartEnumerable`1.Entry.IsLast">
            <summary>
            Whether or not this entry is last in the collection's enumeration.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Collections.SmartEnumerable`1.Entry.Index">
            <summary>
            The 0-based index of this entry (i.e. how many entries have been returned before this one)
            </summary>
        </member>
        <member name="T:Mindroute.Core.Configuration.ProviderConfiguration">
            <summary>
            Represents the configuration elements associated with a provider.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.ProviderConfiguration.#ctor">
            <summary>
            Initializes a new instance of the ProviderConfiguration class with default values.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.ProviderConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProviderConfiguration class with the specified type.
            </summary>
            <param name="provider">Provider type</param>
        </member>
        <member name="M:Mindroute.Core.Configuration.ProviderConfiguration.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns></returns>
        </member>
        <member name="P:Mindroute.Core.Configuration.ProviderConfiguration.Provider">
            <summary>
            Gets or sets the assembly qualified type name of the provider.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.ProviderConfiguration.Parameters">
            <summary>
            Gets a collection of user-defined parameters for the provider.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.ProviderConfiguration.Properties">
            <summary>
            Return the initialized property bag for the configuration element.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Daemons.FullTextIndexDaemon">
            <summary>
            A daemon that adds content to the fulltext index.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Daemons.Daemon">
            <summary>
              Base class for daemons (background services).
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Extension">
            <summary>
              Base class for content types, plugins and daemons.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.IPersistable">
            <summary>
            Interface for saving/loading property data to/from a PersistableDictionary. 
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.IPersist">
            <summary>
            Interface for adding custom fields to an object and having them automatically persisted to the repository. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.IPersist.Item(System.String)">
            <summary>
            Gets or sets the value of a property marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value of the property if it exists, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Extension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Extension"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Extension.Mindroute#Core#Model#IPersistable#Save">
            <summary>
            Returns a <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> with data from persisted properties
            </summary>
            <returns>A <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Extension.Mindroute#Core#Model#IPersistable#Load(Mindroute.Core.Collections.PersistableDictionary)">
            <summary>
            Update persisted properties with values from a <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/>
            </summary>
            <param name="dict">The <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> to load property values from.</param>
        </member>
        <member name="M:Mindroute.Core.Model.Extension.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Attributes">
            <summary>
            Gets a collection of attributes for the Extension.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.ID">
            <summary>
             Gets the ID of the <see cref="T:Mindroute.Core.Model.Extension"/>. The ID is the fully qualified name of the <see cref="T:Mindroute.Core.Model.Extension"/> type, including the namespace but not the assembly.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Name">
            <summary>
             Gets the system name of the <see cref="T:Mindroute.Core.Model.Extension"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Author">
            <summary>
             Gets the name of the <see cref="T:Mindroute.Core.Model.Extension"/> author as specified by the <see cref="T:Mindroute.Core.Model.AuthorAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.DisplayName">
            <summary>
             Gets the display name as specified by the <see cref="T:Mindroute.Core.Model.RenderAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Description">
            <summary>
             Gets the description text as specified by the <see cref="T:Mindroute.Core.Model.RenderAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Icon">
            <summary>
             Gets the name of the icon for the extension as specified by the <see cref="T:Mindroute.Core.Model.IconAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Weight">
            <summary>
            Gets a value that decides the order in which the extension will appear in lists.
            A lower weight value will float to the top of the list, while heavier weights will appear lower in lists. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.IsEnabled">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:Mindroute.Core.Model.Extension"/> is enabled.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.IsLoaded">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Extension"/> has been loaded into the AppDomain.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.IsGenerated">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Extension"/> was generated by a tool.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Code">
            <summary>
            Gets or sets the code of a dynamically created/compiled extension.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.ExtensionType">
            <summary>
            Gets or sets the name of the extension type, i.e. "ContentType", "Daemon", "Plugin", "Function" or "Extension".
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Section">
            <summary>
            Gets or sets the content type section.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Extension.Item(System.String)">
            <summary>
            Gets or sets the value of a property marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value of the property if it exists, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.Daemon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Daemons.Daemon"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.Daemon.Run">
            <summary>
            Runs when the <see cref="T:Mindroute.Core.Daemons.Daemon"/> wakes up.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.Daemon.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.IsHandler">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Daemons.Daemon"/> handles <see cref="T:Mindroute.Core.Model.Job"/>s.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.RunAs">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> to use when running the daemon.
            </summary>   
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.LastRun">
            <summary>
            Gets or sets the date the <see cref="T:Mindroute.Core.Daemons.Daemon"/> was last run.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.Status">
            <summary>
            Gets or sets the status of the <see cref="T:Mindroute.Core.Daemons.Daemon"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.RunAsUsername">
            <summary>
            Gets or sets the username of the <see cref="T:Mindroute.Core.Model.User"/> account to use when running the damon. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.Interval">
            <summary>
            Gets or sets the amount of time to wait between runs.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.CacheService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.CacheService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.CommentService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.CommentService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.ContentService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.ContentService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.ContentTypeService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.ContentTypeService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.DaemonService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.DaemonService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.PluginService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.PluginService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.PermissionService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.PermissionService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.SettingService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.SettingService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.SiteService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.SiteService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.UserService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.UserService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.JobService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.JobService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.MailService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.MailService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.ImageService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.ImageService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.BlobService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.BlobService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.Daemon.FullTextService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Daemons.Daemon.FullTextService"/>.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.FullTextIndexDaemon.Run">
            <summary>
            Process jobs from the fulltext index queue. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.FullTextIndexDaemon.AddToIndex(Mindroute.Core.Model.Job)">
            <summary>
            Add item to fulltext index.
            </summary>
            <param name="job">Fulltext index job.</param>
        </member>
        <member name="P:Mindroute.Core.Daemons.FullTextIndexDaemon.IsHandler">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Daemons.Daemon"/> handles <see cref="T:Mindroute.Core.Model.Job"/>s.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.FullTextIndexDaemon.BatchSize">
            <summary>
            Gets or sets the number of items to index in each batch.
            </summary>
        </member>
        <member name="T:Mindroute.Core.FullText.IndexAttribute">
            <summary>
            Provides an attribute for marking properties that should be indexed for fulltext search.
            </summary>
        </member>
        <member name="M:Mindroute.Core.FullText.IndexAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.FullText.IndexAttribute"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.FullText.IndexAttribute.Boost">
            <summary>
            Gets or sets the boost factor for fulltext search. By default, the boost factor is 1.
            Setting the boost factor to <c>0</c> excludes the property from the fulltext index.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Functions.FunctionResult">
            <summary>
              Return value from the Execute method of a <see cref="T:Mindroute.Core.Functions.Function"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Functions.FunctionResult.Error">
            <summary>
            Gets or sets a value indicating whether the function failed or not.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Functions.FunctionResult.Message">
            <summary>
            Gets or sets a return message from the function.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Functions.Function">
            <summary>
              Base class for functions.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Functions.Function.Execute">
            <summary>
            Performs the work of the function.
            </summary>
            <returns>An instance of the <see cref="T:Mindroute.Core.Functions.FunctionResult"/> class.</returns>
        </member>
        <member name="T:Mindroute.Core.Helpers.ThreadHelper">
            <summary>
            Helper methods for threading.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.ThreadHelper.FireAndForget(System.Threading.WaitCallback,System.String)">
            <summary>
            Queues a method for execution.
            </summary>
            <param name="callback"></param>
            <param name="failureLogMessage"></param>
            <returns></returns>
        </member>
        <member name="T:Mindroute.Core.Daemons.MailDaemon">
            <summary>
            A daemon that sends email from an email queue.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.MailDaemon.Run">
            <summary>
            Sends jobs from the mail queue. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.MailDaemon.IsHandler">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Daemons.Daemon"/> handles <see cref="T:Mindroute.Core.Model.Job"/>s.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.MailDaemon.SmtpServer">
            <summary>
             Gets or sets the name or IP address of the host used for SMTP transactions.  
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.MailDaemon.SmtpPort">
            <summary>
            Gets or sets the port used for SMTP transactions.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.MailDaemon.SmtpUsername">
            <summary>
            Gets or sets the user name used for SMTP transactions
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.MailDaemon.SmtpPassword">
            <summary>
            Gets or sets the password used for SMTP transactions.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.MailDaemon.RetryAttempts">
            <summary>
            Gets or sets the number of times to retry a failing email.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.MailDaemon.SmtpSsl">
            <summary>
            Gets or sets a value indicating whether to use Secure Sockets Layer (SSL) to encrypt the connection.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Daemons.StartDaemonsTask">
            <summary>
             A boot strapper task that starts daemons.
            </summary>
        </member>
        <member name="T:Mindroute.Core.IBootStrapperTask">
            <summary>
             Interface for boot strapper tasks.
            </summary>
        </member>
        <member name="M:Mindroute.Core.IBootStrapperTask.Startup">
            <summary>
            Called on application startup.
            </summary>
        </member>
        <member name="M:Mindroute.Core.IBootStrapperTask.Shutdown">
            <summary>
            Called on application shutdown to allow freeing and releasing of resources. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.StartDaemonsTask.#ctor(Mindroute.Core.Services.DaemonService)">
            <summary>
            Initializes a new instance of the StartDaemonsTask class.
            </summary>
            <param name="daemonService">An instance of the <see cref="T:Mindroute.Core.Services.DaemonService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Daemons.StartDaemonsTask.Startup">
            <summary>
            Start daemons on startup.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.StartDaemonsTask.Shutdown">
            <summary>
            Stop daemons on shutdown.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Helpers.CompilationHelper">
            <summary>
            Helper methods for dynamically compiling source code.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.CompilationHelper.ToIdentifier(System.String)">
            <summary>
            Creates a valid C# identifer.
            </summary>
            <param name="name">The name to validate.</param>
            <returns>A valid C# identifier.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CompilationHelper.CompileSource(System.String,System.String[])">
            <summary>
            Compiles a C# source file in memory.
            </summary>
            <param name="source">The source code to compile.</param>
            <param name="references">A list of reference assemblies.</param>
            <returns>The results of the compilation.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CompilationHelper.CompileSources(System.String[],System.String[],System.String)">
            <summary>
            Compiles a list of C# sources into the specified assembly.
            </summary>
            <param name="sources">The source code to compile.</param>
            <param name="references">A list of reference assemblies.</param>
            <param name="assembly">The name of the output assembly.</param>
            <returns>The results of the compilation.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CompilationHelper.FullReference(System.String)">
            <summary>
            Try to locate an assembly file by its relative file name.
            </summary>
            <param name="relative">The relative file name, e.g. System.dll</param>
            <returns>The path to the assembly file.</returns>
        </member>
        <member name="T:Mindroute.Core.Helpers.FileHelper">
            <summary>
            Helper class for handling file and folder tasks.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.IsImage(Mindroute.Core.Model.Document)">
            <summary>
            Returns whether the system can handle the file as an image.
            </summary>
            <param name="file">The file to check.</param>
            <returns>Returns true if the file is an image.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.IsVideo(Mindroute.Core.Model.Document)">
            <summary>
            Returns whether the system can handle the file as a video.
            </summary>
            <param name="file">The file to check.</param>
            <returns>Returns true if the file is a video file.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.IsAudio(Mindroute.Core.Model.Document)">
            <summary>
            Returns whether the system can handle the file as a video.
            </summary>
            <param name="file">The file to check.</param>
            <returns>Returns true if the file is an audio file.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.FileSizeAsString(System.Int64)">
            <summary>
            Returns the file size as a string, e.g. 2 GB instead of 2147483647.
            </summary>
            <param name="size">The file size in bytes</param>
            <returns>The file size as a string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.GetExtension(System.String)">
            <summary>
            Gets the extension, including the ".", of the file name (in lowercase).
            </summary>
            <remarks>If the file name does not have extension information, <see cref="F:System.String.Empty"/> is returned.</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.GetIconName(System.String)">
            <summary>
            Returns the icon name that relates to a specific file type.
            </summary>
            <param name="filename">Name of file to get mime type of.</param>
            <returns>Returns the icon name related to the file extension.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.UncompressFile(System.String,System.String)">
            <summary>
            Uncompresses a compressed file to a directory.
            </summary>
            <param name="source">Full path of the file to uncompress.</param>
            <param name="destination">Destination directory to where to uncompress the files.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.FileHelper.GetTempDir(System.Boolean)">
            <summary>
            Returns the path to the temporary directory.
            </summary>
            <param name="unique">Set to true if a unique directory should be created below the default temp directory.</param>
            <returns>Returns the full path to the temp directory.</returns>
        </member>
        <member name="T:Mindroute.Core.Model.CheckStatus">
            <summary>
            Defines the possible states of an installation check.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.CheckStatus.Skipped">
            <summary>
            Check was skipped.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.CheckStatus.Passed">
            <summary>
            Check passed.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.CheckStatus.Failed">
            <summary>
            Check failed.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Blob">
            <summary>
            A class containing metadata about a blob. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Blob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Blob"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Blob.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Blob.ID">
            <summary>
            Gets the blob id.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Blob.Name">
            <summary>
            Gets the file name of the blob.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Blob.MimeType">
            <summary>
            Gets the mime type of the blob.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Blob.Size">
            <summary>
            Gets the size, in bytes, of the blob.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Blob.SearchText">
            <summary>
            Gets the text to index for fulltext search.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Alias">
            <summary>
            Encapsuates information about url alias.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Alias.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Alias"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Alias.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Alias"/> class with the specified route.
            </summary>
            <param name="route">The route for the alias.</param>
        </member>
        <member name="M:Mindroute.Core.Model.Alias.#ctor(System.String,Mindroute.Core.Model.AliasCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Alias"/> class with the specified route and http status code.
            </summary>
            <param name="route">The route for the alias.</param>
            <param name="code">The http status code for the alias.</param>
        </member>
        <member name="M:Mindroute.Core.Model.Alias.ToString">
            <summary>
            Returns a string that represents the current alias.
            </summary>
            <returns>A string that represents the current alias.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Alias.ContentID">
            <summary>
             Gets the content id.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Alias.LanguageID">
            <summary>
             Gets the language id.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Alias.Route">
            <summary>
            Gets or sets the route for this alias, e.g. news or news/news-item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Alias.Code">
            <summary>
            Gets or sets the http status code for the alias.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.AliasCode">
            <summary>
            Enumerator used for aliases.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.AliasCode.OK">
            <summary>
            Primary alias (200 OK).
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.AliasCode.MovedPermanently">
            <summary>
            Permanent redirect (301 Moved Permanently).
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.AliasCode.Found">
            <summary>
            Temporary redirect (302 Found).
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.MimeType">
            <summary>
            A class representing a mime type mapping. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.MimeType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.MimeType"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.MimeType.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.MimeType.Extension">
            <summary>
            Gets or sets the file extension, e.g. ".gif".
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.MimeType.Type">
            <summary>
            Gets or sets the mime type, e.g. "image/gif".
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.MimeType.CacheControl">
            <summary>
            Gets or sets the cache-control header, e.g. <c>null</c>, no-cache, private, public, max-age=nnn etc. etc.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.MimeType.ContentTypeID">
            <summary>
            Gets or sets the ID of the <see cref="T:Mindroute.Core.Model.Document"/> mapped to the mime type.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.InstallationCheck">
            <summary>
            Encapsulates info about an installation requirement.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.InstallationCheck.Status">
            <summary>
            Gets or sets a value indicating whether the installation check failed or not.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.InstallationCheck.FailureMessage">
            <summary>
            Gets or sets a message indicating why the check failed.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.InstallationCheck.Text">
            <summary>
            Gete or sets a descriptive text about the installation check.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.FilterReason">
            <summary>
            Enumerates the possible reasons why a <see cref="T:Mindroute.Core.Model.Content"/> item or <see cref="T:Mindroute.Core.Model.Site"/> will not returned from the Filter method.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FilterReason.None">
            <summary>
            The item is not filtered.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FilterReason.Disabled">
            <summary>
            The item is not enabled.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FilterReason.NotFound">
            <summary>
            The item does not exist or is marked with the Deleted flag.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FilterReason.NotPublished">
            <summary>
            The item is not published.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FilterReason.NotTranslated">
            <summary>
            The item is not translated and fallback is disabled.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FilterReason.Unauthorized">
            <summary>
            User does not have permission to the item.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Configuration.FilesConfiguration">
            <summary>
            Configures the path to files and thumbnails.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.FilesConfiguration.#ctor">
            <summary>
            Initializes a new instance of the FilesConfiguration class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.FilesConfiguration.FilePath">
            <summary>
            Gets or sets the url path to use for files. Default value is 'file'.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.FilesConfiguration.ThumbPath">
            <summary>
            Gets or sets the url path to use for thumbnails. Default value is 'thumb'.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Configuration.LanguageConfiguration">
            <summary>
            Handles language configured in the configuration file.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.LanguageConfiguration.#ctor">
            <summary>
            Initializes a new instance of the LanguageConfiguration class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.LanguageConfiguration.Code">
            <summary>
            Gets or sets the value of the code property.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.LanguageConfiguration.Name">
            <summary>
            Gets or sets the value of the name property.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Configuration.LanguagesConfiguration">
            <summary>
            Handles languages configured in the configuration file.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.LanguagesConfiguration.#ctor">
            <summary>
            Initializes a new instance of the LanguagesConfiguration class with default values.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.LanguagesConfiguration.CreateNewElement">
            <summary>
            Overrides ConfigurationElement and returns LanguageConfiguration item.
            </summary>
            <returns>Returns a new LanguageConfiguration.</returns>
        </member>
        <member name="M:Mindroute.Core.Configuration.LanguagesConfiguration.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Overrides GetElementKey and returns name of LanguageConfiguration item.
            </summary>
            <param name="element">ConfigurationElement to get.</param>
            <returns>Returns the name of a specific ConfigurationElement.</returns>
        </member>
        <member name="P:Mindroute.Core.Configuration.LanguagesConfiguration.CollectionType">
            <summary>
            Gets ConfigurationElementCollectionType.BasicMap.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.LanguagesConfiguration.ElementName">
            <summary>
            Gets "language" as element name.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.LanguagesConfiguration.Item(System.Int32)">
            <summary>
            Gets or sets the language configuration item.
            </summary>
            <param name="index">The index of the System.Configuration.ConfigurationElement to return.</param>
        </member>
        <member name="P:Mindroute.Core.Configuration.LanguagesConfiguration.Item(System.String)">
            <summary>
            Returns specific language configuration item.
            </summary>
            <param name="name">The key of the element to return.</param>
        </member>
        <member name="T:Mindroute.Core.Configuration.DaemonConfiguration">
            <summary>
            Enables or disables daemons.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.DaemonConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Configuration.DaemonConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.DaemonConfiguration.Enabled">
            <summary>
            Gets or sets a value indicating whether daemons are enabled or not.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.DaemonConfiguration.Interval">
            <summary>
            Gets or sets the polling intervall for the <see cref="T:Mindroute.Core.Daemons.Daemon"/>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Configuration.MindrouteConfiguration">
            <summary>
            Main configuration section for Mindroute.Core applications.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.MindrouteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the MindrouteConfiguration class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.Current">
            <summary>
            Gets the current configuration settings.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.BlobConfiguration">
            <summary>
            Gets or sets the blob provider configuration.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.CacheConfiguration">
            <summary>
            Gets or sets the cache provider section.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.RepositoryConfiguration">
            <summary>
            Gets or sets the repository provider section.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.FullTextConfiguration">
            <summary>
            Gets or sets the fulltext provider configuration.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.Daemons">
            <summary>
            Gets or sets the daemons section.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.Files">
            <summary>
            Gets or sets the files section.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.Languages">
            <summary>
            Gets or sets the languages section.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.Themes">
            <summary>
            Gets or sets the themes section.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.DefaultTheme">
            <summary>
            Gets the default Theme
            </summary>
            <remarks>Returns the first theme that does not have a host name</remarks>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.Theme">
            <summary>
            Gets the current Theme
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.WindowsAuthentication">
            <summary>
            Gets a value indicating whether the application uses windows authentication.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.FilePath">
            <summary>
            Gets the url path used for files.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.MindrouteConfiguration.ThumbPath">
            <summary>
            Gets the url path used for thumbnails.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Configuration.ThemeConfiguration">
            <summary>
            Handles themes configured in the configuration file.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.ThemeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the ThemeConfiguration class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.ThemeConfiguration.Name">
            <summary>
            Gets or sets the name attribute.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.ThemeConfiguration.DisplayName">
            <summary>
            Gets or sets the displayname attribute.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.ThemeConfiguration.HostName">
            <summary>
            Gets or sets the hostname attribute.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Configuration.ThemesConfiguration">
            <summary>
            Handles themes configured in the configuration file.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Configuration.ThemesConfiguration.CreateNewElement">
            <summary>
            Creates a new ThemeConfigurationen element.
            </summary>
            <returns>A new ThemeConfigurationen element.</returns>
        </member>
        <member name="M:Mindroute.Core.Configuration.ThemesConfiguration.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified ThemeConfiguration element.
            </summary>
            <param name="element">The ThemeConfiguration element to return the key for. </param>
            <returns>An Object that acts as the key for the specified ThemeConfiguration element.</returns>
        </member>
        <member name="P:Mindroute.Core.Configuration.ThemesConfiguration.CollectionType">
            <summary>
            Gets the ConfigurationElementCollectionType, i.e. BasicMap.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.ThemesConfiguration.ElementName">
            <summary>
            Gets the element name, i.e. "theme".
            </summary>
        </member>
        <member name="P:Mindroute.Core.Configuration.ThemesConfiguration.Item(System.Int32)">
            <summary>
            Gets a theme configuration element based on index.
            </summary>
            <param name="index">The index of the ThemeConfiguration element to access.</param>
            <returns>A ThemeConfiguration element.</returns>
        </member>
        <member name="P:Mindroute.Core.Configuration.ThemesConfiguration.Item(System.String)">
            <summary>
             Gets a theme configuration element based on name.
            </summary>
            <param name="name">The name of the ThemeConfiguration element to access.</param>
            <returns>A ThemeConfiguration element.</returns>
        </member>
        <member name="T:Mindroute.Core.Model.ContentFilter">
            <summary>
            Content filter enumerator.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.ContentFilter.Published">
            <summary>
            Published content items are returned
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.ContentFilter.Transient">
            <summary>
            Transient items (new drafts) are returned for the creator. 
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.ContentFilter.Unpublished">
            <summary>
            Unpublished content items are returned. 
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.ContentFilter.UnpublishedByMe">
            <summary>
            Unpublished content items are returned only for administrators or the user that last modified the content item.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.ContentRef">
            <summary>
            A class for referencing a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.IRef">
            <summary>
            Interface for entity references.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.IRef.Key">
            <summary>
            Gets or sets the reference key.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.IRef.Value">
            <summary>
            Gets the value of the referenced object.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.ContentRef.Equals(System.Object)">
            <summary>
            Determines whether two instances of ContentRef are equal. 
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ContentRef.GetHashCode">
            <summary>
            Returns a hash code for the ContentRef. 
            </summary>
            <returns>A hash code for the ContentRef.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ContentRef.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.ContentRef.ID">
            <summary>
            Gets or sets the ID of the referenced <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentRef.LanguageID">
            <summary>
            Gets or sets the Language ID of the referenced <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentRef.Value">
            <summary>
            Gets the referenced <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentRef.Key">
            <summary>
            Gets or sets the reference key.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentRef.Mindroute#Core#Model#IRef#Value">
            <summary>
            Gets the value of the referenced object.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.ArchiveList">
            <summary>
              An <see cref="T:Mindroute.Core.Model.ArchiveList"/> contains methods for displaying the number of items created during a specific year, month and/or day.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.#ctor(System.Collections.Generic.Dictionary{System.DateTime,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.ArchiveList"/> class with a dictionary of dates and the number of items for each date.
            </summary>
            <param name="archive">A dictionary with dates and the number of items for each date.</param>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.GetYears">
            <summary>
            Gets the list of years with items in the archive list.
            </summary>
            <returns>A list of years with items in the archive.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.GetMonths(System.Int32)">
            <summary>
            Gets a list of months, for the specified year, with items in the archive list.
            </summary>
            <param name="year">The year for which to return months.</param>
            <returns>A list of months with items in the archive.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.GetDays(System.Int32,System.Int32)">
            <summary>
            Gets a list of days, for the specified year and month, with items in the archive list.
            </summary>
            <param name="year">The year for which to return days.</param>
            <param name="month">The month for which to return days.</param>
            <returns>A list of days with items in the archive.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.GetCount">
            <summary>
            Gets the total number of items in the archive list.
            </summary>
            <returns>The total number of items in thte archive list.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.GetCount(System.Int32)">
            <summary>
            Gets the total number of items in the archive list for the specified year.
            </summary>
            <param name="year">The year for which to return the item count.</param>
            <returns>The total number of items in the archive for the specified year.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.GetCount(System.Int32,System.Int32)">
            <summary>
            Gets the total number of items in the archive list for the specified year and month.
            </summary>
            <param name="year">The year for which to return the item count.</param>
            <param name="month">The month for which to return the item count.</param>
            <returns>The total number of items in the archive for the specified year and month.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.ArchiveList.GetCount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the total number of items in the archive list for the specified year, month and day.
            </summary>
            <param name="year">The year for which to return the item count.</param>
            <param name="month">The month for which to return the item count.</param>
            <param name="day">The day for which to return the item count.</param>
            <returns>The total number of items in the archive for the specified year, month and day.</returns>
        </member>
        <member name="T:Mindroute.Core.Model.JobStatus">
            <summary>
              Indicates the available status values for a <see cref="T:Mindroute.Core.Model.Job"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.JobStatus.Pending">
            <summary>
            The <see cref="T:Mindroute.Core.Model.Job"/> is waiting to be processed.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.JobStatus.Working">
            <summary>
            A handler is currently processing the <see cref="T:Mindroute.Core.Model.Job"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.JobStatus.Finished">
            <summary>
            The <see cref="T:Mindroute.Core.Model.Job"/> has finished and should not be processed again.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.DefaultValuesAttribute">
            <summary>
            Provides a general-purpose attribute to specify default values for the properties of a class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.DefaultValuesAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.DefaultValuesAttribute"/> class with the specified default values.
            </summary>
            <param name="values">The default values to initialize the object with.</param>
        </member>
        <member name="M:Mindroute.Core.Model.DefaultValuesAttribute.BuildDictionary(System.Object[])">
            <summary>
            Converts an object array into a dictionary.
            </summary>
            <param name="objArray">The array to convert.</param>
            <returns>A dictionary.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.DefaultValuesAttribute.Values">
            <summary>
            Gets the default values of the properties of the class this attribute is bound to. 
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.IFeedItem">
            <summary>
            Interface for exposing object as feed item.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.IFeedItem.AutoFeedItem(System.Boolean)">
            <summary>
            Returns the object as a feed item.
            </summary>
            <param name="showFull">A value specifying if the feed item should display the full text or an excerpt.</param>
            <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem"/> item.</returns>
        </member>
        <member name="T:Mindroute.Core.Model.LayoutAttribute">
            <summary>
            Specifies how to layout form fields.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.LayoutAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.LayoutAttribute"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.LayoutAttribute.Layout">
            <summary>
            Gets or sets css keywords indicating the size and/or layout of the field, e.g. small, medium, large, sidebyside etc.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.LayoutAttribute.Custom">
            <summary>
            Gets or sets custom css keywords.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.LayoutAttribute.Align">
            <summary>
            Gets or sets align attribute (left, right, middle etc.).
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.LayoutAttribute.Width">
            <summary>
            Gets or sets the Width of the control.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.LayoutAttribute.Height">
            <summary>
            Gets or sets the Height of the control.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.RenderAttribute">
            <summary>
            Provides a general-purpose attribute to specify localizable strings for classes and properties.
            </summary>
            <remarks>
            The properties of this class can be used either as literals or as resource identifiers for a specified ResourceType instance.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Model.RenderAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.RenderAttribute"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.RenderAttribute.GetName">
            <summary>
            Gets the value of the Name property.
            </summary>
            <returns>
            The localized string for the Name property when the ResourceType property has been specified and the Name property represents a resource key; 
            otherwise, the non-localized value of the Name property.
            </returns>
        </member>
        <member name="M:Mindroute.Core.Model.RenderAttribute.GetDescription">
            <summary>
            Gets the value of the Description property.
            </summary>
            <returns>
            The localized description when the ResourceType has been specified and the Description property represents a resource key; 
            otherwise, the non-localized value of the Description property.
            </returns>
        </member>
        <member name="M:Mindroute.Core.Model.RenderAttribute.GetWeight">
            <summary>
            Gets the value of the Weight property.
            </summary>
            <returns>
            The value of the Weight property if it has been set; otherwise, null.
            </returns>
            <remarks>
            When a weight is not specified, presentation layers should consider using the value of 10000. 
            This value allows for explicitly-ordered fields to be displayed before and after the fields that do not specify a weight.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.RenderAttribute.Name">
            <summary>
            Gets or sets a value that is used for display in the UI. The name is typically used as the field label for form controls.
            </summary>
            <remarks>
            Do not use this property to get the value of the Name property. Use the GetName method instead.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.RenderAttribute.Description">
            <summary>
            Gets or sets a value that is used to display a description in the UI.
            </summary>
            <remarks>
            Do not use this property to get the value of the Description property. Use the GetDescription method instead.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.RenderAttribute.ExportTitle">
            <summary>
            Gets or sets a value that is used as an alternate title when exporting a form result.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.RenderAttribute.Weight">
            <summary>
            Gets or sets a value that decides the order in which the property will appear in lists.
            A lower weight value will float to the top of lists, while heavier weights will appear lower in lists.
            </summary>
            <remarks>
            Do not use this property to get the value of the Order property. Use the GetWeight method instead.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.RenderAttribute.ShowForDisplay">
            <summary>
            Gets or sets a value indicating whether the property should be shown in display mode. Default: <c>true</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.RenderAttribute.ShowForEdit">
            <summary>
            Gets or sets a value indicating whether the property should be shown in edit mode. Default: <c>true</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.RenderAttribute.ResourceType">
            <summary>
            Gets or sets the type that contains the resources for the Name, Prompt and Description properties.
            </summary>
            <remarks>
            If this value is null, the Name, Prompt, and Description properties are assumed to be literal non-localized strings. 
            If this value is not null, the string properties are assumed to be the names of public static properties that return the actual string value.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Model.LocalizableString">
            <summary>
            A locale aware string for localizing property names etc.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.LocalizableString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.LocalizableString"/> class.
            </summary>
            <param name="propertyName">The name of the property to localize.</param>
        </member>
        <member name="M:Mindroute.Core.Model.LocalizableString.GetLocalizableValue">
            <summary>
            Gets the localized value of the property name.
            </summary>
            <returns>A localized string.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.LocalizableString.ResourceType">
            <summary>
            Gets or sets the resource type to use for message lookup.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.LocalizableString.Value">
            <summary>
            Gets or sets the message resource name to use as lookup for the ResourceType.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.SiteRef">
            <summary>
            A class for referencing a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.SiteRef.Equals(System.Object)">
            <summary>
            Determines whether two instances of SiteRef are equal. 
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.SiteRef.GetHashCode">
            <summary>
            Returns a hash code for the SiteRef. 
            </summary>
            <returns>A hash code for the SiteRef.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.SiteRef.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.SiteRef.ID">
            <summary>
            Gets the ID of the referenced <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.SiteRef.LanguageID">
            <summary>
            Gets or sets the Language ID of the referenced <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.SiteRef.Value">
            <summary>
            Gets the referenced <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.SiteRef.Key">
            <summary>
            Gets or sets the reference key.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.SiteRef.Mindroute#Core#Model#IRef#Value">
            <summary>
            Gets the value of the referenced object.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.RoleRef">
            <summary>
            A class for referencing a Role.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.RoleRef.Equals(System.Object)">
            <summary>
            Determines whether two instances of RoleRef are equal. 
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.RoleRef.GetHashCode">
            <summary>
            Returns a hash code for the RoleRef. 
            </summary>
            <returns>A hash code for the RoleRef.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.RoleRef.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.RoleRef.ID">
            <summary>
            Gets or sets the ID of the referenced <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.RoleRef.Value">
            <summary>
            Gets the referenced <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.RoleRef.Key">
            <summary>
            Gets or sets the reference key.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.RoleRef.Mindroute#Core#Model#IRef#Value">
            <summary>
            Gets the value of the referenced object.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Job">
            <summary>
            A class representing a job. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Job.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Job"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.ID">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Created">
            <summary>
            Gets or sets the date the <see cref="T:Mindroute.Core.Model.Job"/> item was created.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Started">
            <summary>
            Gets or sets the date the <see cref="T:Mindroute.Core.Model.Job"/> item was started.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Finished">
            <summary>
            Gets or sets the date the <see cref="T:Mindroute.Core.Model.Job"/> item was finished.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Handler">
            <summary>
            Gets or sets the <see cref="T:Mindroute.Core.Model.Job"/> handler.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Payload">
            <summary>
            Gets the payload of the <see cref="T:Mindroute.Core.Model.Job"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Errors">
            <summary>
            Gets or sets the number of times the <see cref="T:Mindroute.Core.Model.Job"/> has failed.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Status">
            <summary>
            Gets the status of the <see cref="T:Mindroute.Core.Model.Job"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Job.Message">
            <summary>
            Gets or sets an optional message indicating the outcome of the job, typically used to display error messages and exceptions.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.UserRef">
            <summary>
            A class for referencing a User.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.UserRef.Equals(System.Object)">
            <summary>
            Determines whether two instances of UserRef are equal. 
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.UserRef.GetHashCode">
            <summary>
            Returns a hash code for the UserRef. 
            </summary>
            <returns>A hash code for the UserRef.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.UserRef.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.UserRef.ID">
            <summary>
            Gets or sets the ID of the referenced <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.UserRef.Value">
            <summary>
            Gets the referenced <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.UserRef.Key">
            <summary>
            Gets or sets the reference key.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.UserRef.Mindroute#Core#Model#IRef#Value">
            <summary>
            Gets the value of the referenced object.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.License">
            <summary>
              An object representing a license.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.License.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.License"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.License.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.License"/> class with the specified xml information.
            </summary>
            <param name="license">An <see cref="T:System.Xml.Linq.XElement"/> containing license information.</param>
        </member>
        <member name="M:Mindroute.Core.Model.License.HasModule(System.String)">
            <summary>
            Determines whether the license has access to the specified module.
            </summary>
            <param name="module">The name of the module to check.</param>
            <returns>True if the current license has access to the specified module, otherwise False.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.License.ToXml">
            <summary>
            Returns an xml representation of the license.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.License.Key">
            <summary>
            Gets the license key.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.IssuedTo">
            <summary>
            Gets or sets the name of the customer.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.Expires">
            <summary>
            Gets or sets the date and time when the license expires, <c>null</c> means that it never expires.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.MaxSites">
            <summary>
            Gets or sets the maximum number of sites allowed by the license, <c>null</c> means unlimited.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.MaxLanguages">
            <summary>
            Gets or sets the maximum number of languages allowed per site, <c>null</c> means unlimited.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.MaxUsers">
            <summary>
            Gets or sets the maximum number of users allowed by the license, <c>null</c> means unlimited.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.MaxContentItems">
            <summary>
            Gets or sets the maximum number of content items allowed by the license, <c>null</c> means unlimited.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.Modules">
            <summary>
            Gets or sets the list of modules (add-ons) allowed by the license.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.License.Signature">
            <summary>
            Gets the cryptographic signature of the license.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Preview">
            <summary>
            Encapsulates settings needed for previewing content.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Preview.#ctor">
            <summary>
            Initializes a new instance of the Preview class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Preview.Mode">
            <summary>
            Gets or sets the preview mode of the current request.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Preview.ID">
            <summary>
            Gets the ID of the <see cref="T:Mindroute.Core.Model.Content"/> to preview.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Preview.LanguageID">
            <summary>
            Gets the language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to preview.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Preview.Date">
            <summary>
            Gets the date to use when previewing the site.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Preview.AsAnonymous">
            <summary>
            Gets a value indicating whether we should preview the site as the anonymous user.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Preview.UnPublished">
            <summary>
            Gets a value indicating whether unpublished <see cref="T:Mindroute.Core.Model.Content"/> should be visible in preview site mode.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.IconAttribute">
            <summary>
            Specifies the icon to use for an extension.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.IconAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.IconAttribute"/> class.
            </summary>
            <param name="icon">The name of the icon.</param>
        </member>
        <member name="P:Mindroute.Core.Model.IconAttribute.Icon">
            <summary>
            Gets the name of the extension icon.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.DisplayInMenu">
            <summary>
            Indicates the menu display mode for content items.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.DisplayInMenu.Never">
            <summary>
            Never display in menu controls.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.DisplayInMenu.Public">
            <summary>
            Display in public menu controls.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.DisplayInMenu.Admin">
            <summary>
            Display in admin menu controls.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.DisplayInMenu.Sitemap">
            <summary>
            Display in XML Sitemap.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.DisplayInMenu.Always">
            <summary>
            Always display in menu controls.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Daemons.DaemonExecutor">
            <summary>
            A class that makes sure a Daemons' Run method gets executed periodically at the configured interval.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.DaemonExecutor.#ctor(Mindroute.Core.Daemons.Daemon)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Daemons.DaemonExecutor"/> class.
            </summary>
            <param name="daemon">The <see cref="T:Mindroute.Core.Daemons.Daemon"/> to execute.</param>
        </member>
        <member name="M:Mindroute.Core.Daemons.DaemonExecutor.Start">
            <summary>
            Starts the daemon.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.DaemonExecutor.Stop">
            <summary>
            Stops the daemon.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.DaemonExecutor.Callback(System.Object)">
            <summary>
            The callback method that triggers the daemons' Run() method.
            </summary>
            <param name="state">The state information passed to the callback method, in this case the ID of the daemon.</param>
        </member>
        <member name="M:Mindroute.Core.Daemons.DaemonExecutor.Impersonate">
            <summary>
            Impersonate the user specified by <see cref="!:Daemon.Username"/>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Daemons.DaemonStatus">
            <summary>
              Indicates the available status values for daemons.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Daemons.DaemonStatus.Ready">
            <summary>
            The daemon is in a ready state.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Daemons.DaemonStatus.Running">
            <summary>
            The daemon is running.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Daemons.DaemonStatus.Failed">
            <summary>
            The deamon failed to start or complete its task.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Helpers.PersistanceHelper">
            <summary>
            Helper and extension methods for objects with [Persisted] properties.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.DeepClone``1(System.Collections.Generic.List{``0})">
            <summary>
            Clones a generic list of IDeepCloneable items.
            </summary>
            <typeparam name="T">The Type of item in the generic list.</typeparam>
            <param name="list">The list to clone.</param>
            <returns>A clone/deep copy of the list.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.Copy(System.Object)">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <param name="instance">The object to be copied.</param>
            <returns>A deep copy of the object.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.Copy(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <param name="instance">The object to be copied.</param>
            <param name="serializationMethod">Null to serialize/deserialize, true to serialize only, false to deserialize only.</param>
            <returns>A deep copy of the object.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.CopyPersistedRefValues(System.Object,System.Object)">
            <summary>
            Copy [Persisted] reference (not-immutable) values from one object to another.
            Used after MemberwiseClone to avoid references being copied.
            </summary>
            <param name="from">Object to copy properties from.</param>
            <param name="to">Object to copy properties to.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertFromJson``1(System.String)">
            <summary>
            Converts the specified json string to an object. 
            </summary>
            <typeparam name="T">The type of the object to convert.</typeparam>
            <param name="value">The json representation of the object to convert. </param>
            <returns>An object that represents the converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertFromJson(System.String,System.Type)">
            <summary>
            Converts the specified json string to an object. 
            </summary>
            <param name="value">The json representation of the object to convert. </param>
            <param name="type">The type of the object to convert.</param>
            <returns>An object of type <paramref name="type"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertFromString``1(System.String)">
            <summary>
            Converts the specified text to an object. 
            </summary>
            <typeparam name="T">The type of the object to convert.</typeparam>
            <param name="value">The text representation of the object to convert. </param>
            <returns>An object that represents the converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertFromString(System.String,System.Type)">
            <summary>
            Converts the specified text to an object. 
            </summary>
            <param name="value">The text representation of the object to convert. </param>
            <param name="type">The type of the object to convert.</param>
            <returns>An object of type <paramref name="type"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertToJson(System.Object)">
            <summary>
            Converts the specified value to its equivalent json representation. 
            </summary>
            <param name="value">An object or null.</param>
            <returns>The json representation of <paramref name="value"/>, or null.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertToString(System.Object)">
            <summary>
            Converts the specified value to its equivalent string representation. 
            </summary>
            <param name="value">An object or null.</param>
            <returns>The string representation of <paramref name="value"/>, or null.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertToString(System.Type)">
            <summary>
            Converts a <see cref="T:System.Type"/> to a string.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to convert.</param>
            <returns>The string representation of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ConvertToType(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.Type"/>. 
            </summary>
            <param name="typeName">The name of the type to convert.</param>
            <returns>The <see cref="T:System.Type"/> object represented by <paramref name="typeName"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.GetPersistedFields(Mindroute.Core.Model.IPersist)">
            <summary>
            Get a list of <see cref="T:Mindroute.Core.Model.PersistedField"/> objects from an object implementing the <see cref="T:Mindroute.Core.Model.IPersist"/> interface. 
            The properties are ordered by weight.
            </summary>
            <param name="persistable">The object from which to get properties.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.PersistedField"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.GetPersistedProperties(System.Type)">
            <summary>
            Get all properties marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute. 
            </summary>
            <param name="type">The Type from which to get properties.</param>
            <returns>An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.GetPersistedValue(Mindroute.Core.Model.IPersist,System.String)">
            <summary>
            Get the value of a property marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute. 
            </summary>
            <param name="persistable">The object from which to get property value.</param>
            <param name="property">The name of the property to get.</param>
            <returns>The property value, or <c>null</c> if the property does not exist.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.GetPersistedValues(Mindroute.Core.Model.IPersist)">
            <summary>
            Get the value of all properties marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute. 
            </summary>
            <param name="persistable">The object from which to get property values.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.IsPersistable(System.Type)">
            <summary>
            Checks if the type is a supported persisted type. 
            Value types like <c>int</c>, <c>bool</c>, <c>double</c> and <c>DateTime</c> etc are supported.  
            Strings, Nullables, Arrays and Lists of theses types are also supported, e.g. <c>double?[]</c>.
            </summary>
            <param name="type">The type to check.</param>
            <returns><code>True</code> if the type is a valid, otherwise <code>False</code>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.SetDefaultValues(System.Object)">
            <summary>
            Sets the default values of properties as specified by the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> attribute.
            </summary>
            <param name="obj">The object on which to set default values.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.SetDefaultValues(System.Object,System.Type)">
            <summary>
            Sets default values on an object as specified by the <see cref="T:Mindroute.Core.Model.DefaultValuesAttribute"/> attribute of the Type.
            </summary>
            <param name="instance">The object on which to set default values.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <see cref="T:Mindroute.Core.Model.DefaultValuesAttribute"/> attributes with the default values.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.SetPersistedValue(Mindroute.Core.Model.IPersist,System.String,System.Object)">
            <summary>
            Set the value of a property marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute. 
            </summary>
            <param name="persistable">The object on which to set a property value.</param>
            <param name="property">The name of the property to set.</param>
            <param name="value">The value to set.</param>
            <returns><c>true</c> if the property was set, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.SetPersistedValues(Mindroute.Core.Model.IPersist,System.Collections.Generic.List{Mindroute.Core.Model.PersistedValue})">
            <summary>
            Sets the value of properties marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute
            from the values in the list.
            </summary>
            <param name="persistable">The object on which to set property values.</param>
            <param name="values">A list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.SetPersistedValues(Mindroute.Core.Model.IPersist,System.String)">
            <summary>
            Set properties marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute from the values in the xml string.
            </summary>
            <param name="persistable">The object on which to set properties.</param>
            <param name="xml">An <see cref="T:System.Xml.Linq.XElement"/> representing the property data.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.SetPersistedValues(Mindroute.Core.Model.IPersist,Mindroute.Core.Collections.PersistableDictionary)">
            <summary>
            Set properties marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute from the values in the dictionary.
            </summary>
            <param name="persistable">The object on which to set properties.</param>
            <param name="dictionary">An <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> with the property data.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToPersistedValues(System.String)">
            <summary>
            Converts the specified xml string to a list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.
            </summary>
            <param name="xml">An xml string representing the property data.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToPersistedValues(System.Xml.Linq.XElement)">
            <summary>
            Converts the specified <see cref="T:System.Xml.Linq.XElement"/> to a list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.
            </summary>
            <param name="xml">An xml element representing the property data.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToPersistedValues(Mindroute.Core.Collections.PersistableDictionary)">
            <summary>
            Converts the specified <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> to a list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.
            </summary>
            <param name="dictionary">A <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> containing the property data.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToXml(Mindroute.Core.Model.IPersistable)">
            <summary>
            Gets an xml representation of all properties marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute.
            </summary>
            <param name="persistable">The object from which to get properties.</param>
            <returns>An xml element representing the content data.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToXml(Mindroute.Core.Model.PersistedValue)">
            <summary>
            Returns an xml representation of the <see cref="T:Mindroute.Core.Model.PersistedValue"/>.
            </summary>
            <param name="persisted"><see cref="T:Mindroute.Core.Model.PersistedValue"/> to convert to xml.</param>
            <returns>An xml string representation of the <see cref="T:Mindroute.Core.Model.PersistedValue"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToXElement(Mindroute.Core.Model.PersistedValue)">
            <summary>
            Returns an xml representation of the <see cref="T:Mindroute.Core.Model.PersistedValue"/>.
            </summary>
            <param name="persisted"><see cref="T:Mindroute.Core.Model.PersistedValue"/> to convert to xml.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToPersistableDictionary(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> class with xml data.
            </summary>
            <param name="xml">The xml data</param>
            <returns>A <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToPersistableDictionary(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> class with xml data.
            </summary>
            <param name="xml">The xml data</param>
            <returns>A <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToXml(Mindroute.Core.Collections.PersistableDictionary)">
            <summary>
            Convert a PersistableDictionary to its xml representation for storage
            </summary>
            <param name="dictionary">The dictionary to convert.</param>
            <returns>An xml string that represents the PersistableDictionary, null if the dictionary is empty.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToXElement(Mindroute.Core.Collections.PersistableDictionary)">
            <summary>
            Convert a PersistableDictionary to its xml representation.
            </summary>
            <param name="dictionary">The dictionary to convert.</param>
            <returns>An XElement that represents the PersistableDictionary, null if the dictionary is empty.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToPersistedValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedValue"/> class from the supplied xml data.
            </summary>
            <param name="xml">An <see cref="T:System.Xml.Linq.XElement"/> containing the data.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.PersistedValue"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.ToPersistedValue(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedValue"/> class from the supplied xml data.
            </summary>
            <param name="xml">An <see cref="T:System.Xml.Linq.XElement"/> containing the data.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.PersistedValue"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value of the specified Type. Similar to default(T) for generic types.
            </summary>
            <param name="type">The type for which to return a default value.</param>
            <returns>The default value of the type.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.PersistanceHelper.GetElementType(System.Type)">
            <summary>
            Returns the type of the object encompassed by the array or list type.
            </summary>
            <param name="type">A list or array Type</param>
            <returns>A Type object.</returns>
        </member>
        <member name="T:Mindroute.Core.Imaging.GrayscaleQuantizer">
            <summary>
            PaletteQuantizer class.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Imaging.PaletteQuantizer">
            <summary>
            Class for PaletteQuantizer.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Imaging.Quantizer">
            <summary>
            Class for Quantizer.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Quantizer class.
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.InitialQuantizePixel(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.QuantizePixel(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="T:Mindroute.Core.Imaging.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:Mindroute.Core.Imaging.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.Quantizer.Color32.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the Color32 struct.
            </summary>
            <param name="sourcePixel">Pointer to handle for color.</param>
        </member>
        <member name="P:Mindroute.Core.Imaging.Quantizer.Color32.Color">
            <summary>
            Gets the color for this Color32 object
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.PaletteQuantizer._colorMap">
            <summary>
            Lookup table for colors
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.PaletteQuantizer.#ctor(System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the PaletteQuantizer class.
            </summary>
            <param name="palette">The color palette to quantize to</param>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Imaging.PaletteQuantizer.QuantizePixel(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Mindroute.Core.Imaging.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="palette">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="P:Mindroute.Core.Imaging.PaletteQuantizer._colors">
            <summary>
            Gets or sets the list of all colors in the palette
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.GrayscaleQuantizer.#ctor">
            <summary>
            Initializes a new instance of the GrayscaleQuantizer class.
            </summary>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Imaging.GrayscaleQuantizer.QuantizePixel(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="T:Mindroute.Core.Imaging.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the OctreeQuantizer class.
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.InitialQuantizePixel(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.QuantizePixel(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="T:Mindroute.Core.Imaging.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Octree class.
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.AddColor(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel">Color to add.</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.TrackPrevious(Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.GetPaletteIndex(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel">Pixel to set</param>
            <returns>Returns the palette index.</returns>
        </member>
        <member name="P:Mindroute.Core.Imaging.OctreeQuantizer.Octree.Leaves">
            <summary>
            Gets or sets the number of leaves in the tree
            </summary>
        </member>
        <member name="P:Mindroute.Core.Imaging.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Gets the array of reducible nodes
            </summary>
        </member>
        <member name="T:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,Mindroute.Core.Imaging.OctreeQuantizer.Octree)">
            <summary>
            Initializes a new instance of the OctreeNode class.
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.AddColor(Mindroute.Core.Imaging.Quantizer.Color32,System.Int32,System.Int32,Mindroute.Core.Imaging.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color to set</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(Mindroute.Core.Imaging.Quantizer.Color32,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
            <param name="pixel">Sets the coloe.</param>
            <param name="level">Sets the palette level.</param>
            <returns>Returns the palette index.</returns>
        </member>
        <member name="M:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.Increment(Mindroute.Core.Imaging.Quantizer.Color32)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
            <param name="pixel">Sets the color.</param>
        </member>
        <member name="P:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Gets or sets the next reducible node
            </summary>
        </member>
        <member name="P:Mindroute.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Gets the child nodes
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Alignment">
            <summary>
            Enumerator used to align images in the ImageService.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.Top">
            <summary>
            Align top.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.Bottom">
            <summary>
            Align bottom.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.TopLeft">
            <summary>
            Align top and left.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.TopRight">
            <summary>
            Align top and right.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.BottomLeft">
            <summary>
            Align bottom and left.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Alignment.BottomRight">
            <summary>
            Align bottom and right.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.CommentStatus">
            <summary>
              Indicates the status of comments.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.CommentStatus.Pending">
            <summary>
            Pending approval.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.CommentStatus.Approved">
            <summary>
            The comment has been approved.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.CommentStatus.Rejected">
            <summary>
            Indicates that a moderator or spamfilter rejected the comment.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.CommentStatus.Flagged">
            <summary>
            Indicates that a moderator needs to check the comment.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.AuthorAttribute">
            <summary>
            Specifies the author of an extension.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.AuthorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.AuthorAttribute"/> class.
            </summary>
            <param name="author">The name of the extension author.</param>
        </member>
        <member name="P:Mindroute.Core.Model.AuthorAttribute.Author">
            <summary>
            Gets the name of the extension author.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Widget">
            <summary>
              An object representing a widget.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Widget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Widget"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Widget.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Widget.ID">
            <summary>
             Gets the ID of <see cref="T:Mindroute.Core.Model.Widget"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Widget.DashboardID">
            <summary>
            Gets the ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/> where the <see cref="T:Mindroute.Core.Model.Widget"/> is located.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Widget.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Mindroute.Core.Model.Widget"/>.
            </summary>
            <remarks>The name is used to locate the widget file on disk.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Widget.Row">
            <summary>
             Gets or sets the row on the <see cref="T:Mindroute.Core.Model.Dashboard"/> where the <see cref="T:Mindroute.Core.Model.Widget"/> is located.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Widget.Column">
            <summary>
             Gets or sets the column on the <see cref="T:Mindroute.Core.Model.Dashboard"/> where the <see cref="T:Mindroute.Core.Model.Widget"/> is located.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Widget.WidgetData">
            <summary>
            Gets the widget data associated with the <see cref="T:Mindroute.Core.Model.Widget"/>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Dashboard">
            <summary>
              An object representing a dashboard.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Dashboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Dashboard"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Dashboard.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Dashboard.ID">
            <summary>
             Gets the ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Dashboard.UserID">
            <summary>
            Gets or sets the ID of the <see cref="P:Mindroute.Core.Model.Dashboard.User"/> who owns the dashboard.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Dashboard.User">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Model.Dashboard.User"/> who owns the Dashboard.
            </summary>
            <remarks>
            This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Dashboard.UserID"/> if you only need the id of the user.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Dashboard.Name">
            <summary>
             Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Dashboard.Columns">
            <summary>
             Gets or sets the number of columns to display on the dashboard.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Dashboard.Weight">
            <summary>
            Gets or sets a value that decides the order in which the <see cref="T:Mindroute.Core.Model.Dashboard"/> item will appear in lists.
            A lower weight value will float to the top of lists, while heavier weights will appear lower in lists. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Dashboard.Widgets">
            <summary>
              Gets the list of <see cref="P:Mindroute.Core.Model.Dashboard.Widgets"/> for the dashboard.
            </summary>
            <remarks>This property is lazy loaded and read only.</remarks>
        </member>
        <member name="T:Mindroute.Core.Model.FallbackMode">
            <summary>
            Indicates the fallback mode to use for multi-language sites.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FallbackMode.None">
            <summary>
            Never fall back to another translation.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FallbackMode.Binary">
            <summary>
            Fallback to another translation for documents.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FallbackMode.Container">
            <summary>
            Fallback to another translation for folders.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FallbackMode.Standard">
            <summary>
            Fallback to another translation for content.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.FallbackMode.All">
            <summary>
            Fallback to another translation for all content.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.PersistedValue">
            <summary>
            An object representing the value of a property marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.PersistedValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedValue"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.PersistedValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedValue"/> class.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Mindroute.Core.Model.PersistedValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedValue"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedValue.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedValue.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedValue.ValueType">
            <summary>
            Gets the data type of the value.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.InstallationState">
            <summary>
            Defines the current state of the installation
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.InstallationState.None">
            <summary>
            InstallationState is not set.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.InstallationState.Installing">
            <summary>
            The system is in the process of being installed.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.InstallationState.Installed">
            <summary>
            The system is installed.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.PersistedField">
            <summary>
            An object representing a custom field that is automatically persisted to the repository.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.PersistedField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedField"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.PersistedField.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedField"/> class with the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to use.</param>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.PropertyType">
            <summary>
            Gets the intrinsic data type of the field.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.ComponentType">
            <summary>
            Gets or sets the type of the component this property is bound to
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Attributes">
            <summary>
            Gets or sets the list of attributes for the field.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.IsReadOnly">
            <summary>
            Gets a value indicating whether the field is read-only, i.e. if it is editable or not.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Boost">
            <summary>
            Gets the boost factor for the fulltext index.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.DisplayName">
            <summary>
            Gets the localized display name of the field.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.ExportTitle">
            <summary>
            Gets the title that is used when exporting form results.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Description">
            <summary>
            Gets the localized description text of the field.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.ShowForDisplay">
            <summary>
            Gets a value indicating whether the field should be shown in display mode.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.ShowForEdit">
            <summary>
            Gets a value indicating whether the field should be shown in edit mode.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Weight">
            <summary>
            Gets a value that decides the order in which the field will appear in lists.
            A lower weight value will float to the top of lists, while heavier weights will appear lower in lists. 
            </summary>
            <remarks>
            When a weight is not specified, presentation layers should consider using the value of 10000. 
            This value allows for explicitly-ordered fields to be displayed before and after the fields that do not specify a weight.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.LayoutCss">
            <summary>
            Gets css keywords indicating the layout of the field as specified by the <see cref="T:Mindroute.Core.Model.LayoutAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.CustomCss">
            <summary>
            Gets custom css keywords specified by the <see cref="T:Mindroute.Core.Model.LayoutAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Align">
            <summary>
            Gets align specified by the <see cref="T:Mindroute.Core.Model.LayoutAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Width">
            <summary>
            Gets width specified by the <see cref="T:Mindroute.Core.Model.LayoutAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Height">
            <summary>
            Gets height specified by the <see cref="T:Mindroute.Core.Model.LayoutAttribute"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.DefaultValue">
            <summary>
            Gets the default value of the field.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.IsRequired">
            <summary>
            Gets a value indicating whether the field is required or not. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.StringLength">
            <summary>
            Gets the maximum length of a string field. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.MinValue">
            <summary>
            Gets the minimum value of the field. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.MaxValue">
            <summary>
            Gets the maximum value of the field. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Pattern">
            <summary>
            Gets the regular expression pattern that the field must match .
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.ControlParameters">
            <summary>
            Gets the control parameters specified by the UIHintAttribute.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedField.Template">
            <summary>
            Gets the name of the field template used to display or edit the field.
            </summary>
            <remarks>
            Returns the name of the field template used to display or edit the field; or null if no template exists for the field.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Model.Folder">
            <summary>
            Base class for folders in the file archive.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Content">
            <summary>
            Base class for all content items. 
            </summary>
        </member>
        <member name="T:Mindroute.Core.Validation.IValidate">
            <summary>
            Interface for adding custom validation to an object. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.Validation.IValidate.AutoValidate">
            <summary>
            Performs the custom validation. 
            </summary>
            <returns>A list of validation errors (empty if validation succeeds).</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Content.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Content.Mindroute#Core#Model#IPersistable#Save">
            <summary>
            Returns a <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> with data from persisted properties
            </summary>
            <returns>A <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Content.Mindroute#Core#Model#IPersistable#Load(Mindroute.Core.Collections.PersistableDictionary)">
            <summary>
            Update persisted properties with values from a <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/>
            </summary>
            <param name="dict">The <see cref="T:Mindroute.Core.Collections.PersistableDictionary"/> to load property values from.</param>
        </member>
        <member name="M:Mindroute.Core.Model.Content.AutoValidate">
            <summary>
            Performs custom validation.
            Subclasses can override this method to supply their own implementation.
            </summary>
            <returns>A list of <see cref="T:Mindroute.Core.Validation.ValidationError"/> objects (empty if validation succeeds).</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Content.AutoFeedItem(System.Boolean)">
            <summary>
            Returns a feed item. The default implementation returns the Title and Teaser. 
            Subclasses can override this method to supply their own implementation.
            </summary>
            <param name="showFull">A value specifying if the feed item should display the full text or an excerpt.</param>
            <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Content.AutoTeaser">
            <summary>
            Returns an automatically calculated teaser text. The default implementation returns the first 512 characters of 
            the first string property. Subclasses can override this method to supply their own implementation.
            </summary>
            <returns>A string with the teaser text.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Content.AutoSearchText">
            <summary>
            Returns an automatically calculated text that should be indexed for full text search. 
            The default implementation returns the concatenated text of the Title, Slug, Tags, Teaser and all other string properties with a boost &gt; 0. 
            Subclasses can override this method to supply their own implementation.
            </summary>
            <returns>A string that should be indexed for full text search.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Content.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ID">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Version">
            <summary>
            Gets the version number, <c>null</c> if this is the latest version.
            </summary>
            <remarks>Drafts always have version = 0.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ParentID">
            <summary>
            Gets or sets the parent ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Site">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Model.Content.Site"/> the <see cref="T:Mindroute.Core.Model.Content"/> item belongs to.
            </summary>     
            <remarks>
            This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Content.LanguageID"/> if you only need the language id of the site.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ContentTypeID">
            <summary>
            Gets the content type ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ContentType">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Model.Content.ContentType"/> of the <see cref="T:Mindroute.Core.Model.Content"/>.
            </summary>     
            <remarks>
            This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Content.ContentTypeID"/> if you only need the ID of the <see cref="P:Mindroute.Core.Model.Content.ContentType"/>.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Slug">
            <summary>
            Gets or sets the slug. A slug is a few words that uniquely identifies the <see cref="T:Mindroute.Core.Model.Content"/> item. 
            Slugs are usually a URL friendly version of the title, but a slug can be anything you like.
            </summary>
            <remarks>
              Valid characters are [a-zA-Z0-9-_.!~'();@=$,]. A slug must also start and end with a letter or digit.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Permalink">
            <summary>
            Gets or sets the permalink (URL) for the content item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Weight">
            <summary>
            Gets or sets a value that decides the order in which the <see cref="T:Mindroute.Core.Model.Content"/> item will appear in lists.
            A lower weight value will float to the top of lists, while heavier weights will appear lower in lists. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Created">
            <summary>
            Gets or sets the date the <see cref="T:Mindroute.Core.Model.Content"/> item was created.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.CreatedBy">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> that created the <see cref="T:Mindroute.Core.Model.Content"/>.
            </summary>   
            <remarks>This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Content.CreatedByID"/> if you only need the id of the user.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.CreatedByID">
            <summary>
            Gets or sets the ID of the User that created the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Deleted">
            <summary>
            Gets the date the <see cref="T:Mindroute.Core.Model.Content"/> item was deleted.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.DeletedBy">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> that deleted the <see cref="T:Mindroute.Core.Model.Content"/>.
            </summary>   
            <remarks>This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Content.DeletedByID"/> if you only need the id of the user.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.DeletedByID">
            <summary>
            Gets the ID of the User that created the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsDeleted">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item is deleted.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Aliases">
            <summary>
            Gets the list of URL aliases. Aliases allow a <see cref="T:Mindroute.Core.Model.Content"/> item to be accessed by URL.
            </summary>
            <remarks>
            This property is lazy loaded and read only.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Permission">
            <summary>
            Gets the permission to the <see cref="T:Mindroute.Core.Model.Content"/> item for the current <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
            <remarks>
            This property is lazy loaded.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Parent">
            <summary>
            Gets the parent item.
            </summary>
            <remarks>
            This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Content.ParentID"/> if you only need the id of the parent.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ParentInternal">
            <summary>
            Gets or sets the parent item without invoking the lazy load behavior.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Ancestors">
            <summary>
            Gets all ancestors of the <see cref="T:Mindroute.Core.Model.Content"/>.
            </summary>     
            <remarks>This property is lazy loaded and read only.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ShortTitle">
            <summary>
            Gets or sets a short version of the title.
            </summary>
            <remarks>The short title must not be more than 64 characters long.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Title">
            <summary>
            Gets or sets the title of the content item.
            </summary>
            <remarks>The title must not be more than 256 characters long.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Teaser">
            <summary>
            Gets the teaser text displayed for search results/listings.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.TeaserInternal">
            <summary>
            Gets or sets a manual teaser text displayed for search results/listings.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.MetaData">
            <summary>
            Gets the meta data associated with the content item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Commenting">
            <summary>
            Gets a value indicating whether commenting is enabled for the <see cref="T:Mindroute.Core.Model.Content"/> item.
            When <see cref="P:Mindroute.Core.Model.Content.CommentingInternal"/> is <c>null</c> this property returns the value of <see cref="!:ContentType.Commenting"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.CommentingInternal">
            <summary>
            Gets or sets a value indicating whether commenting is enabled for the <see cref="T:Mindroute.Core.Model.Content"/> item.
            Set to <c>null</c> to inherit <see cref="P:Mindroute.Core.Model.Content.Commenting"/> from the content type.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.DisplayInMenu">
            <summary>
             Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item should be displayed in menus.
             When <see cref="P:Mindroute.Core.Model.Content.DisplayInMenuInternal"/> is <c>null</c> this property returns the value of <see cref="!:ContentType.DisplayInMenu"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.DisplayInMenuInternal">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item should be displayed in menus. 
            Set to <c>null</c> to inherit <see cref="P:Mindroute.Core.Model.Content.DisplayInMenu"/> from the content type.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsSearchable">
            <summary>
             Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item should be searchable. 
             When <see cref="P:Mindroute.Core.Model.Content.IsSearchableInternal"/> is <c>null</c> this property returns the value of <see cref="!:ContentType.IsSearchable"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsSearchableInternal">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item should be searchable. 
            Set to <c>null</c> to inherit <see cref="P:Mindroute.Core.Model.Content.IsSearchable"/> from the content type.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsLocked">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item is checked out for edit.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsDraft">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item is a draft.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsTransient">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item is transient (new draft).
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.LanguageID">
            <summary>
            Gets or sets the language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.
            LanguageID may only be set on new Content (ID = 0), otherwise an InvalidOperationException is thrown.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.LanguageIDInternal">
            <summary>
            Gets or sets the LanguageID without the ID != 0 check.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Locked">
            <summary>
            Gets the date (UTC) the <see cref="T:Mindroute.Core.Model.Content"/> item was checked out for edit,
            or <c>null</c> if the <see cref="T:Mindroute.Core.Model.Content"/> is not checked out.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.LockedBy">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> that checked out the <see cref="T:Mindroute.Core.Model.Content"/> for edit,
              or <c>null</c> if the <see cref="T:Mindroute.Core.Model.Content"/> is not checked out.
            </summary>   
            <remarks>This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Content.LockedByID"/> if you only need the id of the user.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.LockedByID">
            <summary>
            Gets the ID of the <see cref="T:Mindroute.Core.Model.User"/> that checked out the <see cref="T:Mindroute.Core.Model.Content"/> item for edit,
            or <c>null</c> if the <see cref="T:Mindroute.Core.Model.Content"/> is not checked out.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsPublished">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item is published or not.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.PublishedFrom">
            <summary>
            Gets or sets the date (UTC) from which the <see cref="T:Mindroute.Core.Model.Content"/> item should be published.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.PublishedTo">
            <summary>
            Gets or sets the date (UTC) when the <see cref="T:Mindroute.Core.Model.Content"/> item should no longer be published.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Modified">
            <summary>
            Gets or sets the date (UTC) this version was created.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ModifiedBy">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> that created this version of the <see cref="T:Mindroute.Core.Model.Content"/>.
            </summary>   
            <remarks>This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Content.ModifiedByID"/> if you only need the id of the user.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ModifiedByID">
            <summary>
            Gets or sets the ID of the <see cref="T:Mindroute.Core.Model.User"/> that created this version of the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.OrderBy">
            <summary>
            Gets the order in which to arrange child items. 
            When <see cref="P:Mindroute.Core.Model.Content.OrderByInternal"/> is <c>null</c> this property returns the value of <see cref="!:ContentType.OrderBy"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.OrderByInternal">
            <summary>
            Gets or sets the order in which to arrange child items. 
            Set to <c>null</c> to inherit <see cref="P:Mindroute.Core.Model.Content.OrderBy"/> from the <see cref="P:Mindroute.Core.Model.Content.ContentType"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ChangeDescription">
            <summary>
            Gets or sets the change description for this version of the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Template">
            <summary>
            Gets or sets the template to use when rendering the <see cref="T:Mindroute.Core.Model.Content"/> item.
            If no template has been set, the template of the <see cref="P:Mindroute.Core.Model.Content.ContentType"/> is used.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.AllowedChildren">
            <summary>
            Gets the list of allowed child ContentTypes for the <see cref="T:Mindroute.Core.Model.Content"/> item.
            If AllowedChildrenInternal is null, the AllowedChildren property of the <see cref="P:Mindroute.Core.Model.Content.ContentType"/> will be returned.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.AllowedChildrenInternal">
            <summary>
            Gets the list of allowed child ContentTypes for the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Children">
            <summary>
            Gets the list of child items.
            </summary>
            <remarks>This property is lazy loaded and read only.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ChildrenInternal">
            <summary>
            Gets or sets the list of child items without invoking the lazy load behaviour.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Comments">
            <summary>
            Gets the list of comments.
            </summary>
            <remarks>This property is lazy loaded and read only.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Versions">
            <summary>
            Gets the list of versions.
            </summary>                
            <remarks>This property is lazy loaded and read only.</remarks>     
        </member>
        <member name="P:Mindroute.Core.Model.Content.Tags">
            <summary>
            Gets or sets the list of tags associated with the <see cref="T:Mindroute.Core.Model.Content"/> item. 
            </summary>
            <remarks>
            This property is lazy loaded.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Content.IsValid">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item is valid.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.ValidationErrors">
            <summary>
            Gets the list of validation errors (empty if validation succeeds). You have to call <see cref="P:Mindroute.Core.Model.Content.IsValid"/> first in order to populate this list.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Content.Item(System.String)">
            <summary>
            Gets or sets the value of a property marked with the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> attribute.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value of the property if it exists, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Folder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Folder"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Folder.Title">
            NOTE: we override the Title property so we can change the default localized text
            <summary>
            Gets or sets the name of the folder.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Folder.Name">
            <summary>
            Gets or sets the name of the folder.
            </summary>
            <remarks>This property is identical with the <see cref="P:Mindroute.Core.Model.Folder.Title"/> property.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Folder.Description">
            <summary>
            Gets or sets the description of the folder.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.PersistedAttribute">
            <summary>
            Specifies that a property should be persisted to the repository.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.PersistedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.PersistedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.PersistedAttribute.Match(System.Object)">
            <summary>
            
            </summary>
            <param name="obj">Returns a value that indicates whether this instance equals a specified object</param>
            <returns>true if this instance equals obj; otherwise, false.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.PersistedAttribute.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the field is read-only, i.e. if it is editable or not. Default is <c>false</c>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Helpers.CollectionHelper">
            <summary>
            Helper and extension methods for collections.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.AsPagedList``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Extension method to make it easier to create a PagedList.
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">The collection of items to initialize the paged list with.</param>
            <param name="pageIndex">The current page index.</param>
            <param name="pageSize">The current page size.</param>
            <param name="totalItemCount">The total item count,</param>   
            <returns>A new PagedList of the appropriate type.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.AsSmartEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Extension method to make it easier to create a SmartEnumerable.
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">Source enumerable</param>
            <returns>A new SmartEnumerable of the appropriate type</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.AsHierarchy(System.Collections.Generic.IEnumerable{Mindroute.Core.Model.Content},System.Nullable{System.Int32})">
            <summary>
            Extension method that takes a flat list of Content items and converts it into a Hierarchy with the Parent and Children properties set.
            </summary>
            <param name="source">Source enumerable</param>
            <returns>A new List of Content</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Indicates whether the specified generic collection is null or empty.
            </summary>
            <typeparam name="T">The type of the elements of the collection.</typeparam>
            <param name="collection">The collection to check.</param>
            <returns><c>true</c> if the collection is null or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.IsNullOrDefault``1(``0)">
            <summary>
            Gets a value indicating if the specified value has the default value of the generic type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to check.</param>
            <returns>Returns <c>true</c> if <paramref name="value"/> has the default value of the generic type.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.Join``1(System.Collections.Generic.ICollection{``0},System.String,System.Converter{``0,System.String})">
            <summary>
            Concatenates a specified separator string between each element of a collection, yielding a single concatenated string.
            </summary>
            <typeparam name="T">The type of the elements of the collection.</typeparam>
            <param name="collection">The collection whose elements to join.</param>
            <param name="separator">The separator to use between items.</param>
            <param name="converter">A converter that converts each element from type <typeparamref name="T"/> to a string.</param>
            <returns>A string consisting of the elements of <paramref name="collection"/> interspersed with the separator string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness" is determined via a projection 
            and the default equality comparer for the projected type, e.g. var distinct = list.DistinctBy(x => x.ID).
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Projection for determining "distinctness"</param>
            <returns>
            A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.
            </returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.BuildBranches(System.Collections.Generic.IEnumerable{Mindroute.Core.Model.Content},System.Nullable{System.Int32})">
            <summary>
            Converts a flat hierarchy to a parent-child relationship.
            </summary>
            <param name="hierarchy">The flat list to convert.</param>
            <param name="rootID">The root ID of the branch.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Content"/> items organized in a parent-child relationship.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.BuildBranch(System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
            Converts a flat hierarchy to a parent-child relationship.
            </summary>
            <param name="hierarchy">The flat list to convert.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Content"/> item organized in a parent-child relationship.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a random element from the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomizes the order of elements in the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.Rebuild(System.Collections.Specialized.NameValueCollection,System.Object[])">
            <summary>
            Rebuilds a NameValueCollection, optionally adding, removing or replacing the values in the replacement params.
            </summary>
            <param name="input"></param>
            <param name="replacement"></param>
            <returns></returns>
            <example>
            A call to <c>Request.QueryString.Rebuild("tab", null, "p", 1, "ps", 25)</c> should remove the 'tab' parameter and add or replace the 'p' and 'ps' parameters depending on if they exist or not.
            </example>
        </member>
        <member name="M:Mindroute.Core.Helpers.CollectionHelper.AsQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a NameValueCollection to a query string.
            </summary>
            <param name="input"></param>
            <returns>A query string, or <c>null</c> if the input list is null or empty.</returns>
        </member>
        <member name="T:Mindroute.Core.Helpers.FormatExpression">
            <summary>
            FormatExpresssion class. Used together with StringHelper.NamedFormat.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Helpers.ITextExpression">
            <summary>
            ITextExpression interface. Used together with StringHelper.NamedFormat.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.ITextExpression.Eval(System.Object)">
            <summary>
            Evaluates an expression.
            </summary>
            <param name="o">Parameters to replace in the expression.</param>
            <returns>Returns the evaluated string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.FormatExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FormatExpression class.
            </summary>
            <param name="expression">Expression to format.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.FormatExpression.Eval(System.Object)">
            <summary>
            Evaluates an expression.
            </summary>
            <param name="o">Parameters to replace.</param>
            <returns>Returns an evaluated string.</returns>
        </member>
        <member name="P:Mindroute.Core.Helpers.FormatExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Helpers.FormatExpression.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Helpers.LiteralFormat">
            <summary>
            LiteralFormat class. Used together with StringHelper.NamedFormat.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.LiteralFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LiteralFormat class.
            </summary>
            <param name="literalText">Literal text to set.</param>
        </member>
        <member name="M:Mindroute.Core.Helpers.LiteralFormat.Eval(System.Object)">
            <summary>
            Evaluates literal text.
            </summary>
            <param name="o">Parameters to evaluate.</param>
            <returns>Returns the evaluated text.</returns>
        </member>
        <member name="P:Mindroute.Core.Helpers.LiteralFormat.LiteralText">
            <summary>
            Gets the literal text.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Commenting">
            <summary>
              Indicates if and how comments are allowed.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Commenting.Disabled">
            <summary>
            Commenting is disabled.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Commenting.ReadOnly">
            <summary>
            Existing comments can be viewed.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.Commenting.ReadWrite">
            <summary>
            Existing comments can be viewed and new comments can be added.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Binding">
            <summary>
              An object representing a binding used to map a request to a site/language.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Binding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Binding"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Binding.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Binding"/> class with the specified host name.
            </summary>
            <param name="hostName">A hostname.</param>
        </member>
        <member name="M:Mindroute.Core.Model.Binding.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Binding"/> class with the specified host name and virtual directory.
            </summary>
            <param name="hostName">A hostname.</param>
            <param name="virtualDir">A virtual directory.</param>
        </member>
        <member name="M:Mindroute.Core.Model.Binding.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Binding.ID">
            <summary>
             Gets the ID of the <see cref="T:Mindroute.Core.Model.Binding"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Binding.LanguageID">
            <summary>
             Gets the <see cref="P:Mindroute.Core.Model.Site.LanguageID"/> of the <see cref="P:Mindroute.Core.Model.Binding.Site"/> of the <see cref="T:Mindroute.Core.Model.Binding"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Binding.Site">
            <summary>
            Gets the target <see cref="P:Mindroute.Core.Model.Binding.Site"/> of the <see cref="T:Mindroute.Core.Model.Binding"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Binding.HostName">
            <summary>
             Gets or sets the IP address or DNS host name used to map this binding to a site/language.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Binding.HostNameIdn">
            <summary>
             Gets or sets the DNS host encoded and formatted according to the Internationalizing Domain Names in Applications (IDNA) standard.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Binding.VirtualDir">
            <summary>
             Gets or sets the virtual path used to map this binding to a site/language.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Document">
            <summary>
            Base class for files in the file archive (documents, images, videos etc.)
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Document"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Document.AutoFeedItem(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.ServiceModel.Syndication.SyndicationItem"/> item with the textual values set. Used when the content type is displayed in feeds.
            </summary>
            <param name="showFull">A value specifying if the feed item should display the full text or an excerpt.</param>
            <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem"/> item.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Document.BlobID">
            <summary>
            Gets the id of the blob containing the binary data.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Document.BlobName">
            <summary>
            Gets the name of the underlying blob.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Document.ETag">
            <summary>
            Gets the ETag that uniquely identifies the underlying blob.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Document.Title">
            NOTE: we override the Title property so we can change the default localized text
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Document.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <remarks>This property is identical with the <see cref="P:Mindroute.Core.Model.Document.Title"/> property.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Document.Description">
            <summary>
            Gets or sets the description of the file.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Document.Size">
            <summary>
            Gets the size, in bytes, of the file.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Document.Stream">
            <summary>
            Gets or sets the input stream from where to read the binary content on Insert and Update. 
            </summary>
        </member>
        <member name="T:Mindroute.Core.Plugins.PluginMethod">
            <summary>
            PluginMethod class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Plugins.PluginMethod.#ctor(Mindroute.Core.Plugins.Plugin,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the PluginMethod class.
            </summary>
            <param name="plugin">Plugin to set.</param>
            <param name="method">Method to set.</param>
        </member>
        <member name="P:Mindroute.Core.Plugins.PluginMethod.Plugin">
            <summary>
            Gets or sets the plugin.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.PluginMethod.Method">
            <summary>
            Gets or sets the method.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Plugins.Hook">
            <summary>
              Indicates the available hooks for plugins.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnBlobInserted">
            <summary>
            Occurs after after a <see cref="T:Mindroute.Core.Model.Document"/> was updated with Blob ID and Size.
            The plugin method should match the signature <c>void OnBlobInserted(Document inserted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCacheCleared">
            <summary>
            Occurs after the cache was cleared.
            The plugin method should match the signature <c>void OnCacheCleared()</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCacheRegionCleared">
            <summary>
            Occurs after a cache region was cleared.
            The plugin method should match the signature <c>void OnCacheCleared(CacheRegion region)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentInsert">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Content"/> item is inserted.
            The plugin method should match the signature <c>void OnContentInsert(Content inserted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentInserted">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was inserted.
            The plugin method should match the signature <c>void OnContentInserted(Content inserted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentUpdate">
            <summary>
            Occurs before updating a <see cref="T:Mindroute.Core.Model.Content"/> item.
            The plugin method should match the signature <c>void OnContentUpdate(Content original, Content updated)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentUpdated">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was updated.
            The plugin method should match the signature <c>void OnContentUpdated(Content original, Content updated)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentDelete">
            <summary>
            Occurs before deleting a <see cref="T:Mindroute.Core.Model.Content"/> item.
            The plugin method should match the signature <c>void OnContentDelete(Content deleted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentDeleted">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was deleted.
            The plugin method should match the signature <c>void OnContentDeleted(Content deleted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentRestore">
            <summary>
            Occurs before restoring a <see cref="T:Mindroute.Core.Model.Content"/> item.
            The plugin method should match the signature <c>void OnContentRestore(Content restored)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentRestored">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was restored.
            The plugin method should match the signature <c>void OnContentRestored(Content restored)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentRemove">
            <summary>
            Occurs before removing a <see cref="T:Mindroute.Core.Model.Content"/> item.
            The plugin method should match the signature <c>void OnContentRemove(Content removed)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentRemoved">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was removed.
            The plugin method should match the signature <c>void OnContentRemoved(Content removed)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentRevert">
            <summary>
            Occurs before removing a <see cref="T:Mindroute.Core.Model.Content"/> item is reverted to a previous version. 
            The plugin method should match the signature <c>void OnContentRevert(Content current, Content old)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentReverted">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was reverted to a previous version.
            The plugin method should match the signature <c>void OnContentReverted(Content current, Content reverted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentPublish">
            <summary>
            Occurs before a draft <see cref="T:Mindroute.Core.Model.Content"/> item is published. 
            The plugin method should match the signature <c>void OnContentPublish(Content original, Content draft)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentPublished">
            <summary>
            Occurs after a draft <see cref="T:Mindroute.Core.Model.Content"/> item was published. 
            The plugin method should match the signature <c>void OnContentPublished(Content original, Content published)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentLock">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Content"/> item is locked for edit. 
            The plugin method should match the signature <c>void OnContentLock(Content original)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentLocked">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was locked for edit. 
            The plugin method should match the signature <c>void OnContentLocked(Content locked)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentUnlock">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Content"/> item is unlocked. 
            The plugin method should match the signature <c>void OnContentUnlock(Content locked)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentUnlocked">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was unlocked. 
            The plugin method should match the signature <c>void OnContentUnlocked(Content unlocked)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentCopy">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Content"/> item is copied. 
            The plugin method should match the signature <c>void OnContentCopy(Content source, Content destination)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentCopied">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was copied. 
            The plugin method should match the signature <c>void OnContentCopied(Content source, Content copy)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentMove">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Content"/> item is moved.
            The plugin method should match the signature <c>void OnContentMove(Content source, Content destination)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentMoved">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> item was moved.
            The plugin method should match the signature <c>void OnContentMoved(Content source, Content moved)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentSearch">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Content"/> search.
            The plugin method should match the signature <c>void OnContentSearch(ContentQuery query)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnContentSearched">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Content"/> search.
            The plugin method should match the signature <c>void OnContentSearched(ContentQuery query, List&lt;Content&gt; result))</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCommentInsert">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Comment"/> is inserted.
            The plugin method should match the signature <c>void OnCommentInsert(Comment inserted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCommentInserted">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Comment"/> item was inserted.
            The plugin method should match the signature <c>void OnCommentInserted(Comment inserted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCommentUpdate">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Comment"/> item is updated.
            The plugin method should match the signature <c>void OnCommentUpdate(Comment original, Comment updated)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCommentUpdated">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Comment"/> item was updated.
            The plugin method should match the signature <c>void OnCommentUpdated(Comment original, Comment updated)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCommentRemove">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.Comment"/> is removed.
            The plugin method should match the signature <c>void OnCommentRemove(Comment removed)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnCommentRemoved">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.Comment"/> was removed.
            The plugin method should match the signature <c>void OnCommentRemoved(Comment removed)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserAuthenticate">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.User"/> is authenticated.
            The plugin method should match the signature <c>void OnUserAuthenticate(string username, string providerName)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserAuthenticated">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.User"/> was authenticated.
            The plugin method should match the signature <c>void OnUserAuthenticated(User authenticated)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserDelete">
            <summary>
            Occurs before deleting a <see cref="T:Mindroute.Core.Model.User"/>.
            The plugin method should match the signature <c>void OnUserDelete(User deleted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserDeleted">
            <summary>
            Occurs after deleting a <see cref="T:Mindroute.Core.Model.User"/>.
            The plugin method should match the signature <c>void OnUserDeleted(User deleted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserInsert">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.User"/> is inserted.
            The plugin method should match the signature <c>void OnUserInsert(User inserted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserInserted">
            <summary>
            Occurs aftera a <see cref="T:Mindroute.Core.Model.User"/> was inserted.
            The plugin method should match the signature <c>void OnUserInserted(User inserted)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserUpdate">
            <summary>
            Occurs before a <see cref="T:Mindroute.Core.Model.User"/> is updated.
            The plugin method should match the signature <c>void OnUserUpdate(User original, User updated)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnUserUpdated">
            <summary>
            Occurs after a <see cref="T:Mindroute.Core.Model.User"/> was updated.
            The plugin method should match the signature <c>void OnUserUpdated(User original, User updated)</c>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnGetTopTags">
            <summary>
            Occurs when the TagService.GetTopTags method is called.
            The first enabled plugin with a method that matches the signature <c>IList&lt;Tag&gt; OnGetTopTags(IList&lt;Tag&gt; tags)</c> is called .
            </summary>
        </member>
        <member name="F:Mindroute.Core.Plugins.Hook.OnExtractText">
            <summary>
            Occurs when the FullTextService.AddToIndex(Blob) method is called.
            The first enabled plugin with a method that matches the signature <c>string OnExtractText(Blob blob)</c> is called.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Daemons.ActiveDirectoryDaemon">
            <summary>
            Syncs user and role data with Active Directory.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Run">
            <summary>
            Imports user and role data from Active Directory.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Get(System.DirectoryServices.AccountManagement.IdentityType,System.String)">
            <summary>
            Returns a <see cref="T:Mindroute.Core.Model.User"/> from Active Directory.
            </summary>
            <param name="identityType">A IdentityType enumeration value that specifies the format of the identityValue parameter.</param>
            <param name="identityValue">The identity of the user principal.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.User"/> object-</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.GetRole(System.DirectoryServices.AccountManagement.IdentityType,System.String)">
            <summary>
            Returns a <see cref="T:Mindroute.Core.Model.Role"/> from Active Directory.
            </summary>
            <param name="identityType">A IdentityType enumeration value that specifies the format of the identityValue parameter.</param>
            <param name="identityValue">The identity of the user principal.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Role"/> object-</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.GetRoles(System.Guid)">
            <summary>
            Get the list of roles of which the specified user is a member.
            </summary>
            <param name="guid">The Globally Unique Identifier (GUID) of the user for which to get roles.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Role"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.GetMembers(System.Guid,System.Boolean)">
            <summary>
            Get the members of the specified role. When the recursive flag is set to true, 
            this method searches the specified role recursively and returns all nested role members. 
            </summary>
            <param name="guid">The Globally Unique Identifier (GUID) of the role for which to get members.</param>
            <param name="recursive">A value that specifies if the role is searched recursively.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.User"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Search(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a paged list of <see cref="T:Mindroute.Core.Model.User"/> objects from Active Directory.
            </summary>
            <param name="name">The name to search for. Wildcards are allowed, e.g. Joh* will return both John and Johan.</param>
            <param name="pageIndex">The page index at which to start reading.</param>
            <param name="pageSize">The page size of the result set.</param>
            <returns>A paged list of <see cref="T:Mindroute.Core.Model.User"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.SearchRoles(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a paged list of <see cref="T:Mindroute.Core.Model.Role"/> objects from Active Directory.
            </summary>
            <param name="name">The name to search for. Wildcards are allowed, e.g. Adm* will return both Admins and Administrators.</param>
            <param name="pageIndex">The page index at which to start reading.</param>
            <param name="pageSize">The page size of the result set.</param>
            <returns>A paged list of <see cref="T:Mindroute.Core.Model.Role"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Convert(System.DirectoryServices.AccountManagement.UserPrincipal)">
            <summary>
              Converts a UserPrincipal to a <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
            <param name="userPrincipal">The UserPrincipal to convert.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.User"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Convert(System.DirectoryServices.AccountManagement.GroupPrincipal)">
            <summary>
              Converts a GroupPrincipal to a <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="groupPrincipal">The GroupPrincipal to convert.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Role"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Daemons.ActiveDirectoryDaemon.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Domain">
            <summary>
            Gets or sets the name of the domain or server.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Username">
            <summary>
            Gets or sets the username to use when authenticating against the directory.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.ActiveDirectoryDaemon.Password">
            <summary>
            Gets or sets the password to use when authenticating against the directory.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.ActiveDirectoryDaemon.AutoImport">
            <summary>
            Gets or sets a value indicating whether users should be automatically imported from the directory.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Daemons.ActiveDirectoryDaemon.PrincipalContext">
            <summary>
            Gets the node in the Active Directory hierarchy where a search starts. 
            </summary>
        </member>
        <member name="T:Mindroute.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_AutoImport_Description">
            <summary>
              Looks up a localized string similar to Auto import users the first time they access the application..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_AutoImport_Name">
            <summary>
              Looks up a localized string similar to Auto import.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_Description">
            <summary>
              Looks up a localized string similar to Syncs user and role data with Active Directory..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_Domain_Description">
            <summary>
              Looks up a localized string similar to The name of the domain or server.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_Domain_Name">
            <summary>
              Looks up a localized string similar to Domain.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_Password_Description">
            <summary>
              Looks up a localized string similar to The password to use when authenticating against the directory..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_Password_Name">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_Username_Description">
            <summary>
              Looks up a localized string similar to The username to use when authenticating against the directory..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.ActiveDirectoryDaemon_Username_Name">
            <summary>
              Looks up a localized string similar to Username.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_DbConnection">
            <summary>
              Looks up a localized string similar to Can open database connection.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_DbConnection_Failed">
            <summary>
              Looks up a localized string similar to Cannot open database connection.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_DbConnection_Failed_Message">
            <summary>
              Looks up a localized string similar to Check that the database in the connection string exists, and that the specified user has access to the database..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_DbIsEmpty">
            <summary>
              Looks up a localized string similar to Database is empty.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_DbIsEmpty_Failed">
            <summary>
              Looks up a localized string similar to Database is not empty.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_DbIsEmpty_Failed_Message">
            <summary>
              Looks up a localized string similar to An empty database is required for setup to continue..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_DbVersion_Failed">
            <summary>
              Looks up a localized string similar to Wrong database version.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_SqlServer">
            <summary>
              Looks up a localized string similar to Supported version of SQL Server.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_SqlServer_Failed">
            <summary>
              Looks up a localized string similar to Unsupported version of SQL Server.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Check_SqlServer_Failed_Message">
            <summary>
              Looks up a localized string similar to Microsoft SQL Server 2005 or later is required..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.CommentStatus_Approved">
            <summary>
              Looks up a localized string similar to Approved.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.CommentStatus_Flagged">
            <summary>
              Looks up a localized string similar to Flagged.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.CommentStatus_Pending">
            <summary>
              Looks up a localized string similar to Pending.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.CommentStatus_Rejected">
            <summary>
              Looks up a localized string similar to Rejected.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Content_Title_Name">
            <summary>
              Looks up a localized string similar to Title.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_Interval_Description">
            <summary>
              Looks up a localized string similar to Enter a time interval indicating how often the daemon should run, e.g. 00:15 to run every 15 minutes..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_Interval_Name">
            <summary>
              Looks up a localized string similar to Interval.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_LastRun_Name">
            <summary>
              Looks up a localized string similar to Last run.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_Password_Description">
            <summary>
              Looks up a localized string similar to Password of the user to run the daemon as..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_Password_Name">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_RunAsUsername_Description">
            <summary>
              Looks up a localized string similar to Username of the user to run the daemon as..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_RunAsUsername_Name">
            <summary>
              Looks up a localized string similar to Run as.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_Status_Name">
            <summary>
              Looks up a localized string similar to Status.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Daemon_StatusMessage_Name">
            <summary>
              Looks up a localized string similar to Message.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Document_Description">
            <summary>
              Looks up a localized string similar to Regular uploaded files, i.e. office documents, spreadsheets, text files etc..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Document_Description_Description">
            <summary>
              Looks up a localized string similar to A short description of the file..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Document_Description_Name">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Document_Name">
            <summary>
              Looks up a localized string similar to File.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Document_Title_Name">
            <summary>
              Looks up a localized string similar to File name.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Folder_Description">
            <summary>
              Looks up a localized string similar to Folders are containers for files and are used to structure the contents of the file archive..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Folder_Description_Description">
            <summary>
              Looks up a localized string similar to A short description of the folder..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Folder_Description_Name">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Folder_Name">
            <summary>
              Looks up a localized string similar to Folder.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Folder_Title_Name">
            <summary>
              Looks up a localized string similar to Folder name.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.FullTextIndexDaemon_BatchSize_Description">
            <summary>
              Looks up a localized string similar to Number of jobs to process each run. Leave blank to process all jobs in the queue..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.FullTextIndexDaemon_BatchSize_Name">
            <summary>
              Looks up a localized string similar to Batch size.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.FullTextIndexDaemon_Description">
            <summary>
              Looks up a localized string similar to A daemon that that adds content to the fulltext index..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_Description">
            <summary>
              Looks up a localized string similar to A daemon that processes and sends email from the mail queue..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_RetryAttempts_Description">
            <summary>
              Looks up a localized string similar to The number of times to retry sending a failing mail..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_RetryAttempts_Name">
            <summary>
              Looks up a localized string similar to Retry attempts.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_SmtpPassword_Name">
            <summary>
              Looks up a localized string similar to Smtp password.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_SmtpPort_Name">
            <summary>
              Looks up a localized string similar to Smtp port.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_SmtpServer_Name">
            <summary>
              Looks up a localized string similar to Smtp server.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_SmtpSsl_Name">
            <summary>
              Looks up a localized string similar to Enable SSL.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.MailDaemon_SmtpUsername_Name">
            <summary>
              Looks up a localized string similar to Smtp username.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Alias">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid alias..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_AliasIsNotUnique">
            <summary>
              Looks up a localized string similar to The alias &apos;{0}&apos; is not unique..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Date">
            <summary>
              Looks up a localized string similar to {0} is not a date ({1})..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Decimal">
            <summary>
              Looks up a localized string similar to {0} is not a decimal..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Email">
            <summary>
              Looks up a localized string similar to {0} is not a valid email address..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Host">
            <summary>
              Looks up a localized string similar to {0} is not a valid hostname..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_HostName">
            <summary>
              Looks up a localized string similar to {0} is not a valid hostname or IP-address..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Integer">
            <summary>
              Looks up a localized string similar to {0} is not an integer..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_InvalidDateRange">
            <summary>
              Looks up a localized string similar to Invalid date range..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_License">
            <summary>
              Looks up a localized string similar to Invalid license key..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_MaxValue">
            <summary>
              Looks up a localized string similar to {0} cannot be greater than {1}..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_MinGreaterThanMax">
            <summary>
              Looks up a localized string similar to The maximum value &apos;{0}&apos; must be greater than or equal to the minimum value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_MinValue">
            <summary>
              Looks up a localized string similar to {0} cannot be less than {1}..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Permalink">
            <summary>
              Looks up a localized string similar to The permalink contains invalid characters..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_PermalinkIsNotUnique">
            <summary>
              Looks up a localized string similar to The permalink &apos;{0}&apos; is not unique..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Range">
            <summary>
              Looks up a localized string similar to {0} must be between {1} and {2}..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Regex">
            <summary>
              Looks up a localized string similar to {0} does not match the regular expression &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Required">
            <summary>
              Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Route">
            <summary>
              Looks up a localized string similar to One or more the aliases are invalid..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Slug">
            <summary>
              Looks up a localized string similar to The slug contains invalid characters..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_SlugIsNotUnique">
            <summary>
              Looks up a localized string similar to The slug &apos;{0}&apos; is not unique..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_StringLength">
            <summary>
              Looks up a localized string similar to {0} cannot exceed {1} characters..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_StringMinLength">
            <summary>
              Looks up a localized string similar to {0} cannot be less than {1} characters..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Time">
            <summary>
              Looks up a localized string similar to {0} is not a time ({1})..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_Url">
            <summary>
              Looks up a localized string similar to {0} is not a valid URL..
            </summary>
        </member>
        <member name="P:Mindroute.Core.Properties.Resources.Validation_VirtualDir">
            <summary>
              Looks up a localized string similar to The path contains invalid characters..
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.IAliasRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Alias"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IAliasRepository.GetAlias(System.String,System.Int32)">
            <summary>
            Returns the alias the specified route and languageID.
            </summary>
            <param name="route"></param>
            <param name="languageID"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IAliasRepository.GetAliases(System.Int32,System.Int32)">
            <summary>
             Gets the list of URL aliases for a Content item. 
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Alias"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IAliasRepository.SetAliases(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Mindroute.Core.Model.Alias})">
            <summary>
             Sets the list of URL aliases for a Content item. 
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="aliases">The list of aliases to set.</param>
        </member>
        <member name="T:Mindroute.Core.Repositories.IMimeTypeRepository">
            <summary>
            Repository interface for mime types.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IMimeTypeRepository.Remove(System.String)">
            <summary>
              Removes the specified mime type mapping.
            </summary>
            <param name="extension">Extension of the mime type to delete.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IMimeTypeRepository.Get">
            <summary>
              Gets all mime types from the repository.
            </summary>
            <returns>Returns a list of mime types.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IMimeTypeRepository.Get(System.String)">
            <summary>
              Gets a mime type from the repository.
            </summary>
            <returns>Returns a list of mime types.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IMimeTypeRepository.Insert(Mindroute.Core.Model.MimeType)">
            <summary>
              Inserts a new mime type mapping into the repository.
            </summary>
            <param name="mimetype">Mime type to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IMimeTypeRepository.Update(Mindroute.Core.Model.MimeType)">
            <summary>
              Updates an existing mime type in the repository
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.MimeType"/> item to update.</param>
        </member>
        <member name="T:Mindroute.Core.Repositories.IJobRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Job"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IJobRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Job"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Job"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IJobRepository.Search(Mindroute.Core.Search.JobQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.JobQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.JobQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of draft <see cref="T:Mindroute.Core.Model.Job"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IJobRepository.Insert(Mindroute.Core.Model.Job)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Job"/> object into the repository.
            </summary>
            <param name="job"><see cref="T:Mindroute.Core.Model.Job"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IJobRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Job"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IJobRepository.Update(Mindroute.Core.Model.Job)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Job"/> in the datasource.
            </summary>
            <param name="job"><see cref="T:Mindroute.Core.Model.Job"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Repositories.IRepositoryProvider">
            <summary>
              Interface for repository providers.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRepositoryProvider.GetInstallationChecks">
            <summary>
             Gets the list of installation checks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRepositoryProvider.Install">
            <summary>
            Called on application setup so that the provider may run custom installation actions.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRepositoryProvider.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Register the repository interfaces with the dependency injection container.
            </summary>
            <param name="container">An <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> object.</param>
        </member>
        <member name="P:Mindroute.Core.Repositories.IRepositoryProvider.IsInstalled">
            <summary>
            Returns a value indicating if the provider has been installed.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.IRepositoryProvider.TotalSize">
            <summary>
            Gets the total size, in bytes, of all data in the repository.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.IWidgetRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Widget"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IWidgetRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Widget"/> from the repositiory.
            </summary>
            <param name="id">The ID of the <see cref="T:Mindroute.Core.Model.Widget"/></param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Widget"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IWidgetRepository.GetByDashboard(System.Int32)">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Widget"/> objects for a <see cref="T:Mindroute.Core.Model.Dashboard"/> from the repositiory.
            </summary>
            <param name="dashboardID">The ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Widget"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IWidgetRepository.Insert(Mindroute.Core.Model.Widget)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Widget"/> object into the repository.
            </summary>
            <param name="widget"><see cref="T:Mindroute.Core.Model.Widget"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IWidgetRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Widget"/> object from the repository.
            </summary>
            <param name="id">ID of <see cref="T:Mindroute.Core.Model.Widget"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IWidgetRepository.Update(Mindroute.Core.Model.Widget)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Widget"/> in the datasource.
            </summary>
            <param name="widget"><see cref="T:Mindroute.Core.Model.Widget"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Repositories.IDashboardRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Dashboard"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IDashboardRepository.GetAll">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects from the repositiory.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IDashboardRepository.Insert(Mindroute.Core.Model.Dashboard)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Dashboard"/> object into the repository.
            </summary>
            <param name="dashboard"><see cref="T:Mindroute.Core.Model.Dashboard"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IDashboardRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Dashboard"/> object from the repository.
            </summary>
            <param name="id">ID of dashboard to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IDashboardRepository.Update(Mindroute.Core.Model.Dashboard)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Dashboard"/> in the datasource.
            </summary>
            <param name="dashboard"><see cref="T:Mindroute.Core.Model.Dashboard"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Repositories.IExtensionRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Extension"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IExtensionRepository.GetAll">
            <summary>
              Gets the list of registered <see cref="T:Mindroute.Core.Model.Extension"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Extension"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IExtensionRepository.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Extension"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Extension"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IExtensionRepository.Insert(Mindroute.Core.Model.Extension)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Extension"/> object into the repository.
            </summary>
            <param name="extension"><see cref="T:Mindroute.Core.Model.Extension"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IExtensionRepository.Remove(System.String)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Extension"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IExtensionRepository.Update(Mindroute.Core.Model.Extension)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Extension"/> in the datasource.
            </summary>
            <param name="extension"><see cref="T:Mindroute.Core.Model.Extension"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Repositories.IBindingRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Binding"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IBindingRepository.GetAll">
            <summary>
              Gets a list of all <see cref="T:Mindroute.Core.Model.Binding"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Binding"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IBindingRepository.Insert(Mindroute.Core.Model.Binding)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Binding"/> object into the repository.
            </summary>
            <param name="binding"><see cref="T:Mindroute.Core.Model.Binding"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IBindingRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Binding"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Binding"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IBindingRepository.Update(Mindroute.Core.Model.Binding)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Binding"/> in the datasource.
            </summary>
            <param name="binding"><see cref="T:Mindroute.Core.Model.Binding"/> object to update.</param>
        </member>
        <member name="T:Mindroute.Core.Blobs.SqlBlobProvider">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Blobs.IBlobProvider"/> interface.
            </summary>    
        </member>
        <member name="M:Mindroute.Core.Blobs.SqlBlobProvider.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider with the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.SqlBlobProvider.Exists(System.Guid)">
            <summary>
            Checks if the specified blob data exists.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Mindroute.Core.Blobs.SqlBlobProvider.Get(System.Guid,System.IO.Stream)">
            <summary>
            Writes the binary data of the blob to the specified output stream.
            </summary>
            <param name="id">ID of the blob.</param>
            <param name="output">The output stream where the data should be written.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.SqlBlobProvider.Insert(Mindroute.Core.Model.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob.
            After insert <c>blob.Size</c> contains the size of the uploaded blob.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Mindroute.Core.Blobs.SqlBlobProvider.Remove(System.Guid)">
            <summary>
            Permanently removes a blob from the repository.
            </summary>
            <param name="id">ID of the blob.</param>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.IBlobRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Blob"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.IBlobRepository.Get(System.Guid)">
            <summary>
              Gets the specified <see cref="T:Mindroute.Core.Model.Blob"/> from the repository.
            </summary>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Blob"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.IBlobRepository.GetSize">
            <summary>
            Gets the size, in bytes, of all blobs in the repository.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.IBlobRepository.Insert(Mindroute.Core.Model.Blob)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Blob"/> object into the repository.
            </summary>
            <param name="blob"><see cref="T:Mindroute.Core.Model.Blob"/> object to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.IBlobRepository.Remove(System.Guid)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Blob"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Blob"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.IBlobRepository.Update(Mindroute.Core.Model.Blob)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Blob"/> object into the repository.
            </summary>
            <param name="blob"><see cref="T:Mindroute.Core.Model.Blob"/> object to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.IBlobRepository.Search(Mindroute.Core.Search.Query)">
            <summary>
            Performs a search according to the specified <see cref="T:Mindroute.Core.Search.Query"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.Query"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="N:Mindroute.Core.Blobs"/>s.</returns>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.Scripts">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.Scripts.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.Scripts.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.Scripts.Create">
             <summary>
               Looks up a localized string similar to 
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N&apos;[dbo].[Role]&apos;) AND type in (N&apos;U&apos;))
            BEGIN
            CREATE TABLE [dbo].[Role](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [nvarchar](256) NOT NULL,
            	[Description] [nvarchar](512) NULL,
            	[Created] [datetime] NOT NULL,
            	[Modified] [datetime] NOT NULL,
            	[MetaData] [xml] NULL,
            	[Guid] [uniqueidentifier] NULL,
             CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )
            )
            END
            GO
            IF N [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.Scripts.Populate">
             <summary>
               Looks up a localized string similar to -- insert system roles
            SET IDENTITY_INSERT Role ON
            INSERT INTO Role (ID, Name, Description) VALUES (-1, &apos;BUILT-IN\Anonymous&apos;, &apos;All users that have not been authenticated&apos;)
            INSERT INTO Role (ID, Name, Description) VALUES (-2, &apos;BUILT-IN\Authenticated&apos;, &apos;All authenticated users&apos;)
            INSERT INTO Role (ID, Name, Description) VALUES (-3, &apos;BUILT-IN\Everyone&apos;, &apos;All users&apos;)
            INSERT INTO Role (ID, Name, Description) VALUES (-4, &apos;BUILT-IN\Creators&apos;, &apos;The user that creates an entity becomes a member of the Creators ro [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlAliasRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IAliasRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlAliasRepository.AliasColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlAliasRepository.GetAlias(System.String,System.Int32)">
            <summary>
            Returns the alias with the specified languageID and route.
            </summary>
            <param name="languageID"></param>
            <param name="route"></param>
            <returns>An <see cref="T:Mindroute.Core.Model.Alias"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlAliasRepository.GetAliases(System.Int32,System.Int32)">
            <summary>
             Gets the list of URL aliases for a Content item. 
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <returns>Returns a list of strings representing the URL aliases.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlAliasRepository.SetAliases(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Mindroute.Core.Model.Alias})">
            <summary>
             Sets the list of URL aliases for a Content item. 
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="aliases">The list of aliases to set.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlAliasRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Alias})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Alias"/> from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Alias"/> to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlAliasRepository.AliasColumn">
            <summary>
              Enumerate the columns of the Alias table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.SqlServer.IBlobRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.BlobColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.Get(System.Guid)">
            <summary>
              Gets the specified <see cref="T:Mindroute.Core.Model.Blob"/> from the repository.
            </summary>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Blob"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.Search(Mindroute.Core.Search.Query)">
            <summary>
            Performs a search according to the specified <see cref="T:Mindroute.Core.Search.Query"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.Query"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="N:Mindroute.Core.Blobs"/>s.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.GetSize">
            <summary>
            Gets the size, in bytes, of all blobs in the repository.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.Insert(Mindroute.Core.Model.Blob)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Blob"/> object into the repository.
            </summary>
            <param name="blob"><see cref="T:Mindroute.Core.Model.Blob"/> object to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.Update(Mindroute.Core.Model.Blob)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Blob"/> in the datasource.
            </summary>
            <param name="blob"><see cref="T:Mindroute.Core.Model.Blob"/> object to update.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.Remove(System.Guid)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Blob"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Blob"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Blob})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Blob"/> from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Blob"/> to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlBlobRepository.BlobColumn">
            <summary>
              Enumerate the columns of the Blob table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IMimeTypeRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.MimeTypeColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.MimeType"/> object from the repository.
            </summary>
            <param name="extension">Extension (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.MimeType"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.Get">
            <summary>
             Returns all mime types in the repository.
            </summary>
            <returns>Returns a paged list of draft <see cref="T:Mindroute.Core.Model.Job"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.Insert(Mindroute.Core.Model.MimeType)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.MimeType"/> object into the repository.
            </summary>
            <param name="mimetype"><see cref="T:Mindroute.Core.Model.MimeType"/> object to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.Remove(System.String)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.MimeType"/> object from the repository.
            </summary>
            <param name="extension">Extension of the <see cref="T:Mindroute.Core.Model.MimeType"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.Update(Mindroute.Core.Model.MimeType)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.MimeType"/> in the datasource.
            </summary>
            <param name="mimetype"><see cref="T:Mindroute.Core.Model.MimeType"/> object to update.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.Fill(System.Data.IDataReader,System.Collections.Generic.IList{Mindroute.Core.Model.MimeType})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.MimeType"/> objects from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.MimeType"/> objects to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlMimeTypeRepository.MimeTypeColumn">
            <summary>
              Enumerate the columns for the MimeType table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlJobRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IJobRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.JobColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Job"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Job"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.Search(Mindroute.Core.Search.JobQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.JobQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.JobQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of draft <see cref="T:Mindroute.Core.Model.Job"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.Insert(Mindroute.Core.Model.Job)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Job"/> object into the repository.
            </summary>
            <param name="job"><see cref="T:Mindroute.Core.Model.Job"/> object to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.Remove(System.Int32)">
            <summary>
              Permanently removes an <see cref="T:Mindroute.Core.Model.Job"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Job"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.Update(Mindroute.Core.Model.Job)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Job"/> in the datasource.
            </summary>
            <param name="job"><see cref="T:Mindroute.Core.Model.Job"/> object to update.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.Fill(System.Data.IDataReader,System.Collections.Generic.IList{Mindroute.Core.Model.Job})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Job"/> objects from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Job"/> objects to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlJobRepository.JobColumn">
            <summary>
              Enumerate the columns for the Job table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IWidgetRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.WidgetColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Widget"/> object from the repositiory.
            </summary>
            <param name="id">The ID of the <see cref="T:Mindroute.Core.Model.Widget"/> to retrive.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Widget"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.GetByDashboard(System.Int32)">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Widget"/> objects for a <see cref="T:Mindroute.Core.Model.Dashboard"/> from the repositiory.
            </summary>
            <param name="dashboardID">The ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/> to get.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Widget"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.Insert(Mindroute.Core.Model.Widget)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Widget"/> object into the repository.
            </summary>
            <param name="widget"><see cref="T:Mindroute.Core.Model.Widget"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Widget"/> object from the repository.
            </summary>
            <param name="id">ID of <see cref="T:Mindroute.Core.Model.Widget"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.Update(Mindroute.Core.Model.Widget)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Widget"/> in the datasource.
            </summary>
            <param name="widget"><see cref="T:Mindroute.Core.Model.Widget"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Widget})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Widget"/> objects from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Widget"/> objects to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlWidgetRepository.WidgetColumn">
            <summary>
              Enumerate the columns of the Widget table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IDashboardRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository.DashboardColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository.GetAll">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects from the repositiory.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository.Insert(Mindroute.Core.Model.Dashboard)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Dashboard"/> object into the repository.
            </summary>
            <param name="dashboard"><see cref="T:Mindroute.Core.Model.Dashboard"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Dashboard"/> object from the repository.
            </summary>
            <param name="id">ID of dashboard to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository.Update(Mindroute.Core.Model.Dashboard)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Dashboard"/> in the datasource.
            </summary>
            <param name="dashboard"><see cref="T:Mindroute.Core.Model.Dashboard"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Dashboard})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlDashboardRepository.DashboardColumn">
            <summary>
              Enumerate the columns of the Dashboard table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider">
            <summary>
              Sql Server implementation of a Membership Provider.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.UserColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">Configuration name</param>
            <param name="config">Configuration settings</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">The current password for the specified user.</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns><c>True</c> if the password was updated successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns><c>True</c> if the password question and answer are updated successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException">Throws when the method is called.</exception>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user.</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"/> enumeration value indicating whether the user was created successfully.</param>
            <returns>A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the information for the newly created user.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source. 
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData"><c>True</c> to delete data related to the user from the database; <c>false</c> to leave data related to the user in the database.</param>
            <returns><c>True</c> if the user was successfully deleted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the email contains the specified email to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A MembershipUserCollection collection that contains a page of pageSize MembershipUser objects beginning at the page specified by pageIndex.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A MembershipUserCollection collection that contains a page of pageSize MembershipUser objects beginning at the page specified by pageIndex.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A MembershipUserCollection collection that contains a page of pageSize MembershipUser objects beginning at the page specified by pageIndex.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application. Not implemented.
            </summary>
            <returns>The number of users currently accessing the application.</returns>
            <exception cref="T:System.NotImplementedException">Throws when the method is called.</exception>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source. Not implemented.
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>The password for the specified user name.</returns>
            <exception cref="T:System.NotImplementedException">Throws when the method is called.</exception>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets user information from the data source based on the unique identifier for the membership user. 
            Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>A MembershipUser object populated with the specified user's information from the data source.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. 
            Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>A MembershipUser object populated with the specified user's information from the data source.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Retrieve Username for given email
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>The user name associated with the specified e-mail address. If no match is found, return null.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user.</param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates information about a user in the data source. 
            </summary>
            <param name="user">A MembershipUser object that represents the user to update and the updated information for the user.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source. 
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>true if the specified username and password are valid; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated. Not implemented.
            </summary>
            <param name="userName">The membership user whose lock status you want to clear.</param>
            <returns>true if the membership user was successfully unlocked; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException">Throws when the method is called.</exception>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.Search(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the username or email matches.
            </summary>
            <param name="username">The username address to search for.</param>
            <param name="email">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A MembershipUserCollection collection that contains a page of pageSize MembershipUser objects beginning at the page specified by pageIndex.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.GeneratePassword(System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="passwordLength">The length of the generated password.</param>
            <returns>A random password string.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.Fill(System.Data.IDataReader,System.Collections.Generic.IList{System.Web.Security.MembershipUser})">
            <summary>
              Populates a list of <see cref="T:System.Web.Security.MembershipUser"/> from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:System.Web.Security.MembershipUser"/> to populate.</param>        
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.ApplicationName">
            <summary>
            Gets or sets the application name as set in the web.config
            otherwise returns Mindroute. Set will throw an error.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the membership provider is configured 
            to allow users to reset their passwords. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.EnablePasswordRetrieval">
            <summary>
            Gets a value indicating whether the membership provider is configured to allow users to retrieve their passwords. 
            Hardcoded to <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            Gets the maximum invalid password attempts. 
            Since the RequiresQuestionAndAnswer property is hardcoded to <c>false</c>, invalid password-answer attempts are not tracked. 
            </summary>
            <exception cref="T:System.NotImplementedException">Throws if the property is accessed.</exception>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password. 
            Hardcoded to 0.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password. 
            Defaults to 4.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out. 
            Not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">Throws if the property is accessed.</exception>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store. 
            Hardcoded to Hashed.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval. 
            Hardcoded to false.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name. 
            Hardcoded to true.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password. 
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">Throws if the property is accessed.</exception>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlMembershipProvider.UserColumn">
            <summary>
              Enumerate the columns in the User table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IExtensionRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.ExtensionColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.GetAll">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Extension"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Extension"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Extension"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Extension"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.Insert(Mindroute.Core.Model.Extension)">
            <summary>
              Inserts an <see cref="T:Mindroute.Core.Model.Extension"/> object into the repository.
            </summary>
            <param name="extension"><see cref="T:Mindroute.Core.Model.Extension"/> object to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.Remove(System.String)">
            <summary>
              Permanently removes an <see cref="T:Mindroute.Core.Model.Extension"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Extension"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.Update(Mindroute.Core.Model.Extension)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Extension"/> in the datasource.
            </summary>
            <param name="extension"><see cref="T:Mindroute.Core.Model.Extension"/> object to update.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Extension})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Extension"/> objects from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Extension"/> objects to populate.</param>        
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.GetExtensionType(System.String)">
            <summary>
            Gets the type of the extension, i.e. ContentType, Daemon, Plugin, Function or Extension.
            </summary>
            <param name="name">Name of extension to get type of.</param>
            <returns>Returns the extension type.</returns>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlExtensionRepository.ExtensionColumn">
            <summary>
              Enumerate the columns for the Extension table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.FullTextSearchOptions">
            <summary>
            Full text search options.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch">
            <summary>
            Parses and rewrites ad hoc SQL Server 2005 full-text search conditions into their valid normal form.  
            Always returns a valid full-text search condition suitable for use in a CONTAINS or CONTAINSTABLE query.  
            Exceptions can optionally be thrown when certain improper constructs are present. If exceptions are not 
            thrown, the invalid constructs are replaced, removed, and/or massaged as needed to form a valid condition.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch"/> class from being created.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch"/> class with the specified search condition.
            </summary>
            <param name="condition">A full-text search condition.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.#ctor(System.String,Mindroute.Core.Repositories.SqlServer.FullTextSearchOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch"/> class with the specified search condition and options.
            </summary>
            <param name="condition">A full-text search condition</param>
            <param name="options">The options to use.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.GetLCID(System.String)">
            <summary>
            Gets the Microsoft Windows locale identifier (LCID) for the specified language.
            </summary>
            <param name="languageCode">The two-letter language code.</param>
            <returns>An int representing the LCID of the language.</returns>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.Condition">
            <summary>
            Gets the fulltext search condition.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.Options">
            <summary>
            Gets the options to use.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.NormalForm">
            <summary>
            Gets the valid SQL Server full-text search condition suitable for use in a CONTAINS or CONTAINSTABLE query.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.SearchTerms">
            <summary>
            Gets a list of regex patterns for matching in the resulting text for presentation, 
            similar to the way Google highlights search terms in its results.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator">
            <summary>
            A struct representing a condition operator.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator.op_Equality(Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator,Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="obj1">The first Object to compare.</param>
            <param name="obj2">The second Object to compare.</param>
            <returns>true if the specified Objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator.op_Inequality(Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator,Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="obj1">The first Object to compare.</param>
            <param name="obj2">The second Object to compare.</param>
            <returns>true if the specified Objects are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator.TryParse(System.String,Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator@)">
            <summary>
            Converts the string representation of an operator to a ConditionOperator.
            </summary>
            <param name="s">A string representing the condition to convert.</param>
            <param name="op">When this method returns, contains the ConditionOperator equivalent to the operator contained in s.</param>
            <returns><c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator.ToString">
            <summary>
            Returns a string that represents the condition.
            </summary>
            <returns>A string that represents the condition.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object. </param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator.Equals(Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator)">
            <summary>
            Determines whether the specified ConditionOperator is equal to the current ConditionOperator.
            </summary>
            <param name="obj">The Object to compare with the current Object. </param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator.GetHashCode">
            <summary>
            Serves as a hash function for a the current object. 
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionParser">
            <summary>
            Private class used to parse fulltext search condititions.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionParser.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionParser"/> class from being created.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionParser.#ctor(System.String,Mindroute.Core.Repositories.SqlServer.FullTextSearchOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionParser"/> class with the specified search condition and options.
            </summary>
            <param name="condition">A full-text search condition</param>
            <param name="options">The options to use.</param>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionParser.RootExpression">
            <summary>
            Gets the root expression.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream">
            <summary>
            Private class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream"/> class from being created.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream.#ctor(System.String,Mindroute.Core.Repositories.SqlServer.FullTextSearchOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream"/> class with the specified search condition and options.
            </summary>
            <param name="condition">A full-text search condition</param>
            <param name="options">The options to use.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream.Read">
            <summary>
            Advances the position of the condition stream.
            </summary>
            <returns><c>True</c> if there are more characters in the stream, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream.ReadQuote">
            <summary>
            Reads a quoted string.
            </summary>
            <returns>A string containing the quotes string.</returns>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream.Boq">
            <summary>
            Gets a value indicating whether we are at the beginning of the stream.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream.Eoq">
            <summary>
            Gets a value indicating whether we are at the end of the stream.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionStream.Current">
            <summary>
            Gets the current character.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression">
            <summary>
            A class representing a condition expression.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression"/> class from being created.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.#ctor(Mindroute.Core.Repositories.SqlServer.FullTextSearchOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression"/> class with the specified options.
            </summary>
            <param name="options">The options to use.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.#ctor(Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression,Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression"/> class with the specified parent expression and operator.
            </summary>
            <param name="parent">The parent expression</param>
            <param name="op">The condition operator.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.#ctor(Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression,Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression"/> class with the specified parent expression, operator and term.
            </summary>
            <param name="parent">The parent expression</param>
            <param name="op">The condition operator.</param>
            <param name="term">The search term.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.AddSubexpression(Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator)">
            <summary>
            Adds a sub-expression.
            </summary>
            <param name="op">The condition.</param>
            <returns>A condition expression.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.AddTerm(Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionOperator,System.String)">
            <summary>
            Adds a term.
            </summary>
            <param name="op">The operator.</param>
            <param name="term">The search term.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.ToString">
            <summary>
            Returns a string that represents the expression.
            </summary>
            <returns>A string that represents the expression.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.Parent">
            <summary>
            Gets the parent expression.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.IsRoot">
            <summary>
            Gets a value indicating whether the condition is a root condition.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.IsLastSubexpression">
            <summary>
            Gets a value indicating whether the condition is the last sub-expression.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.NextSubexpression">
            <summary>
            Gets the next sub-expression.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.Operator">
            <summary>
            Gets the condition operator.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.IsTerm">
            <summary>
            Gets a value indicating whether this is a term.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.TermIsPhrase">
            <summary>
            Gets a value indicating whether this is a phrase term.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.TermIsPrefix">
            <summary>
            Gets a value indicating whether this is a prefix term.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.IsSubexpression">
            <summary>
            Gets a value indicating whether this is a sub-expression.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.HasSubexpressions">
            <summary>
            Gets a value indicating whether the condition has sub-expressions.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.LastSubexpression">
            <summary>
            Gets the last sub-expressions.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.FullTextSearch.ConditionExpression.Term">
            <summary>
            Gets the search term.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IBindingRepository"/> interface.
            </summary>    
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository.BindingColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository.GetAll">
            <summary>
              Gets a list of all <see cref="T:Mindroute.Core.Model.Binding"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Binding"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository.Insert(Mindroute.Core.Model.Binding)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Binding"/> object into the repository.
            </summary>
            <param name="binding"><see cref="T:Mindroute.Core.Model.Binding"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Binding"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Binding"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository.Update(Mindroute.Core.Model.Binding)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Binding"/> in the datasource.
            </summary>
            <param name="binding"><see cref="T:Mindroute.Core.Model.Binding"/> object to update.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Binding})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Binding"/> from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Binding"/> to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlBindingRepository.BindingColumn">
            <summary>
              Enumerate the Binding table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.PreviewMode">
            <summary>
            Indicates the preview mode of the current request.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.PreviewMode.None">
            <summary>
            No preview.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.PreviewMode.Preview">
            <summary>
            Preview single content item.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.PreviewMode.PreviewSite">
            <summary>
            Preview site.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.PreviewMode.PreviewDraft">
            <summary>
            Preview saved draft if one exist.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.ContentQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Mindroute.Core.Model.Content"/> items.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.Query">
            <summary>
            Defines a base class for search queries.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.Query.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.Query"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.Query.CleanupSortItems(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes invalid SortItems from the OrderBy property.
            </summary>
            <param name="allowed">A list of allowed columns names.</param>
        </member>
        <member name="P:Mindroute.Core.Search.Query.Count">
            <summary>
            Gets or sets the total number of items that matches the search criteria. 
            When paging through the result of a query, we only need to calculate the total number of hits on the first page.
            To accomplish this, the Count property should be set to <c>null</c> when querying the first page of the result.
            When the query returns, this property is updated with the total number of hits returned by the query. 
            Before paging to another page in the result you should set the Count property to the value returned by the initial query.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.Query.CountOnly">
            <summary>
            Gets or sets a value indicating whether the search should only return the number of matching items.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.Query.ExecutionTime">
            <summary>
            Gets or sets the execution time of the query.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.Query.PageIndex">
            <summary>
            Gets or sets the page index at which to start reading. 
            </summary>
            <example>
            To return items 1-10, set <paramref name="PageIndex"/> to 0 and <see cref="P:Mindroute.Core.Search.Query.PageSize"/> to 10.
            To return items 11-20, set <paramref name="PageIndex"/> to 1 and <see cref="P:Mindroute.Core.Search.Query.PageSize"/> to 10.
            </example>
        </member>
        <member name="P:Mindroute.Core.Search.Query.PageSize">
            <summary>
            Gets or sets the page size of the result set (the number of items to return). When PageSize = 0, the result is not paged.
            </summary>
            <example>
            To return items 1-10, set <paramref name="PageIndex"/> to 0 and <see cref="P:Mindroute.Core.Search.Query.PageSize"/> to 10.
            To return items 11-20, set <paramref name="PageIndex"/> to 1 and <see cref="P:Mindroute.Core.Search.Query.PageSize"/> to 10.
            </example>
        </member>
        <member name="P:Mindroute.Core.Search.Query.OrderBy">
            <summary>
            Gets or sets the sort order of the result.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.ContentQuery.#ctor">
            <summary>
            Initializes a new instance of the ContentQuery class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.ContentQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContentQuery class with a full text search expression.
            </summary>
            <param name="text">Full text search expression.</param>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.AccessMask">
            <summary>
            Gets or sets the <see cref="T:Mindroute.Core.Security.AccessMask"/> to verify the search result against, 
            <c>null</c> to disable permission check. Default is <see cref="F:Mindroute.Core.Security.AccessMask.Read"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.ContentTypes">
            <summary>
            Gets or sets the IDs of the <see cref="T:Mindroute.Core.Model.ContentType"/>s to search, default is an empty list which searches all content types.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.ContentTypeMode">
            <summary>
            Gets or sets the <see cref="P:Mindroute.Core.Search.ContentQuery.ContentTypeMode"/> to use when searching, default is <see cref="!:ContentTypeMode.Exact"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.InvertContentTypes">
            <summary>
            Gets or sets a value indicating whether to return content that -does not- match the content types specified in <see cref="P:Mindroute.Core.Search.ContentQuery.ContentTypes"/>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.MetaDataValue">
            <summary>
            Gets or sets a meta data property to search for.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.PropertyValue">
            <summary>
            Gets or sets a content property to search for.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.MinDepth">
            <summary>
            Gets or sets the minimum depth of the search.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the search, default is <c>null</c> which searches the entire content hierarchy starting with <see cref="P:Mindroute.Core.Search.ContentQuery.ParentID"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.FromDate">
            <summary>
            Gets or sets a date that limits the result to items created on or after this date.
            </summary> 
            <remarks>The date should be specified as Coordinated Universal Time (UTC).</remarks>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.ToDate">
            <summary>
            Gets or sets the date that limits the result to items created on or before this date.
            </summary>
            <remarks>The date should be specified as Coordinated Universal Time (UTC).</remarks>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.ParentID">
            <summary>
            Gets or sets the parent item in the content tree to search from. 
            The default value is <c>null</c> which searches from the root of the content hierarchy.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.CreatedByID">
            <summary>
            Gets or sets the ID of a <see cref="T:Mindroute.Core.Model.User"/>. Used to find <see cref="T:Mindroute.Core.Model.Content"/> created by a specific <see cref="T:Mindroute.Core.Model.User"/>, <c>null</c> to ignore the CreatedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.SearchTransient">
            <summary>
            Gets or sets a value indicating whether the search should return transient drafts.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.SearchDate">
            <summary>
            Gets or sets the date to use when determining if a <see cref="T:Mindroute.Core.Model.Content"/> item is published or not.
            Default is <c>DateTime.UtcNow</c>.
            </summary>
            <remarks>Used in PreviewSite mode.</remarks>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.SearchDeleted">
            <summary>
            Gets or sets a value indicating whether the search should return deleted content;
            <c>true</c> returns only deleted content, <c>false</c> returns only content that has not been deleted and <c>null</c> ignores the IsDeleted property.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.SearchInFiles">
            <summary>
            Gets or sets a value indicating whether to search in <see cref="T:Mindroute.Core.Model.Blob"/>s or not;
            <c>true</c> searches <see cref="T:Mindroute.Core.Model.Blob"/>s only, <c>false</c> searches <see cref="T:Mindroute.Core.Model.Content"/>only, and <c>null</c> will look in both <see cref="T:Mindroute.Core.Model.Content"/> items and their associated <see cref="T:Mindroute.Core.Model.Blob"/>s.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.SearchLocked">
            <summary>
            Gets or sets a value indicating whether the search should return locked content items;
            <c>true</c> returns only locked content, <c>false</c> returns only unlocked content and <c>null</c> ignores the IsLocked property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.LockedByID">
            <summary>
            Gets or sets the ID of a <see cref="T:Mindroute.Core.Model.User"/>. Used to find <see cref="T:Mindroute.Core.Model.Content"/> locked by a specific <see cref="T:Mindroute.Core.Model.User"/>, <c>null</c> to ignore the LockedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.SearchNonSearchable">
            <summary>
            Gets or sets a value indicating whether the search should return content that is marked non-searchable.
            <c>true</c> returns only non-searchable content, <c>false</c> returns only content that is searchable, and <c>null</c> ignores the IsSearchable property.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.SearchUnPublished">
            <summary>
            Gets or sets a value indicating whether the result should return content that is not published.
            <c>false</c> returns only published content, <c>true</c> returns only unpublished content and <c>null</c> ignores the IsPublished, PublishedFrom and PublishedTo properties.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.Tags">
            <summary>
            Gets or sets the tags to filter by. Depending on the value of <see cref="P:Mindroute.Core.Search.ContentQuery.TagFilterMode"/>, content tagged with any or all of the tags are returned.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.TagFilterMode">
            <summary>
            Gets or sets the tag filter mode. Default is <see cref="!:TagFilterMode.Any"/> which returns content containing any of the specified tags, 
            while <see cref="!:TagFilterMode.All"/> specifies that the returned content must match all the specified tags.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.DisplayInMenu">
            <summary>
            Gets or sets the DisplayInMenu property to filter by, default is <c>null</c> which ignores the DisplayInMenu property.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.InvertDisplayInMenu">
            <summary>
            Gets or sets a value indicating whether to return content -without- the specified <see cref="P:Mindroute.Core.Search.ContentQuery.DisplayInMenu"/> value.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.LanguageID">
            <summary>
            Gets or sets the language ID of the <see cref="P:Mindroute.Core.Search.ContentQuery.Site"/> to search, when <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/> is <c>null</c>, all sites and languages are searched.
            Default value is <c>MindrouteContext.Current.Site.LanguageID</c>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.LanguageMode">
            <summary>
            Gets or sets the <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageMode"/> used when <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/> has been specified, 
            default is <see cref="!:LanguageMode.Translated"/> which only returns the translation specified by <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/>
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.ContentSection">
            <summary>
            Gets or sets the <see cref="T:Mindroute.Core.Model.ContentSection"/> to search. Multiple values can be ORed together, e.g. ContentSection.Files | ContentSection.Folders. 
            Default value is <c>null</c> which searches all sections.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.Text">
            <summary>
            Gets or sets the full text search expression used in the query.
            The query can contain single words or phrases, e.g. (stockholm and "baseball cap"),
            and search for part of words by using * (e.g. "car*" will return a match for both "car" and "carpark").
            The query supports AND, AND NOT, OR and NEAR operators.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.Site">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Search.ContentQuery.Site"/> to search.
            </summary>     
            <remarks>
            This property is lazy loaded, use <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/> if you only need the id of the site.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Search.ContentQuery.UserID">
            <summary>
            Gets or sets the ID of the <see cref="T:Mindroute.Core.Model.User"/> to check permissions against.
            Default is <c>MindrouteContext.Current.User.ID</c>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.CommentQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Mindroute.Core.Model.Comment"/> items.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.CommentQuery.#ctor">
            <summary>
            Initializes a new instance of the CommentQuery class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.AccessMask">
            <summary>
            Gets or sets the <see cref="T:Mindroute.Core.Security.AccessMask"/> to verify the search result against, 
            <c>null</c> to disable permission check. Default is <see cref="F:Mindroute.Core.Security.AccessMask.Read"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.CreatedByID">
            <summary>
            Gets or sets the ID of a <see cref="T:Mindroute.Core.Model.User"/>. Used to find <see cref="T:Mindroute.Core.Model.Comment"/>s created by a specific <see cref="T:Mindroute.Core.Model.User"/>, <c>null</c> to ignore the CreatedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.ContentID">
            <summary>
            Gets or sets the ID of a <see cref="T:Mindroute.Core.Model.Content"/> item for which to find comments, <c>null</c> to find all comments.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.LanguageID">
            <summary>
            Gets or sets the language ID of the <see cref="P:Mindroute.Core.Search.CommentQuery.Site"/> to search, when <see cref="P:Mindroute.Core.Search.CommentQuery.LanguageID"/> is <c>null</c>, all sites and languages are searched.
            Default value is <c>MindrouteContext.Current.Site.LanguageID</c>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.CommentStatus">
            <summary>
            Gets or sets the a <see cref="P:Mindroute.Core.Search.CommentQuery.CommentStatus"/>. Used to finds comment with a specified status.
            Default value is <c>null</c> which returns all comments regardless of their status.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.ContentTypes">
            <summary>
            Gets or sets which <see cref="T:Mindroute.Core.Model.ContentType"/> objects to find comments for, an empty list (the default) means find comments for all content types.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.SearchAllTranslations">
            <summary>
            Gets or sets a value indicating whether the search should return comments for all all translations
            of a <see cref="T:Mindroute.Core.Model.Content"/> item or only comments for the the translation specified by <see cref="P:Mindroute.Core.Search.CommentQuery.LanguageID"/>.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.MinDepth">
            <summary>
            Gets or sets the minimum depth of the search.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the search.
            To find comments for a specific <see cref="T:Mindroute.Core.Model.Content"/> item, set a <see cref="P:Mindroute.Core.Search.CommentQuery.ContentID"/> and set <see cref="!:Depth"/> to 0.
            To find comments for a <see cref="T:Mindroute.Core.Model.Content"/> item and it's immediate children set a <see cref="P:Mindroute.Core.Search.CommentQuery.ContentID"/> and set <see cref="!:Depth"/> to 1.
            The default value is <c>null</c> which finds comments for the specified <see cref="T:Mindroute.Core.Model.Content"/> item and all its descendants.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.SearchDeleted">
            <summary>
            Gets or sets a value indicating whether the search should return comments for deleted content; <c>true</c> returns only comments for deleted content, 
            <c>false</c> returns only comments for content that has not been deleted and <c>null</c> ignores the IsDeleted property. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.Text">
            <summary>
            Gets or sets the full text search expression used in the query.
            The query can contain single words or phrases, e.g. (stockholm and "baseball cap"),
            and search for part of words by using * (e.g. "car*" will return a match for both "car" and "carpark").
            The query supports AND, AND NOT, OR and NEAR operators.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.Site">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Search.CommentQuery.Site"/> to search.
            </summary>     
            <remarks>
            This property is lazy loaded, use <see cref="P:Mindroute.Core.Search.CommentQuery.LanguageID"/> if you only need the id of the site.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Search.CommentQuery.UserID">
            <summary>
            Gets or sets the ID of the <see cref="T:Mindroute.Core.Model.User"/> to check permissions against.
            Default is <c>MindrouteContext.Current.User.ID</c>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.CommentColumn">
            <summary>
              Indicates the <see cref="T:Mindroute.Core.Model.Comment"/> columns to sort by.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.CommentColumn.Default">
            <summary>
            The default sort column is <see cref="P:Mindroute.Core.Model.Comment.ID"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.CommentColumn.ContentID">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Comment.ContentID"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.CommentColumn.Created">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Comment.Created"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.CommentColumn.Columns">
            <summary>
            Gets the list of possible columns to sort by.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.ContentSection">
            <summary>
            Indicates the base type of a content type.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.ContentSection.Pages">
            <summary>
            Pages
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.ContentSection.Folders">
            <summary>
            Folders
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.ContentSection.Files">
            <summary>
            Files
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.ContentTypeMode">
            <summary>
             The content type mode used when <see cref="P:Mindroute.Core.Search.ContentQuery.ContentTypes"/> has been specified.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentTypeMode.Exact">
            <summary>
            Search content with the exact content types specified by <see cref="P:Mindroute.Core.Search.ContentQuery.ContentTypes"/>
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentTypeMode.Inherit">
            <summary>
            Search content with the content types specified by <see cref="P:Mindroute.Core.Search.ContentQuery.ContentTypes"/> including all content types that inherit from them.
            </summary>
        </member>
        <member name="T:Mindroute.Core.FullText.FullTextDocument">
            <summary>
            A class representing a fulltext document.
            </summary>
        </member>
        <member name="P:Mindroute.Core.FullText.FullTextDocument.Catalog">
            <summary>
            Gets or sets the index catalog.
            </summary>
        </member>
        <member name="P:Mindroute.Core.FullText.FullTextDocument.Key">
            <summary>
            Gets or sets the entity key, i.e. ContentID/LanguageID, CommentID or BlobID
            </summary>
        </member>
        <member name="P:Mindroute.Core.FullText.FullTextDocument.Score">
            <summary>
            Gets or sets the score.
            </summary>
        </member>
        <member name="P:Mindroute.Core.FullText.FullTextDocument.NativeDocument">
            <summary>
            Gets or sets the native document, i.e. Lucene.Net.Documents.Document
            </summary>
        </member>
        <member name="T:Mindroute.Core.FullText.LuceneFullTextProvider">
            <summary>
            Lucene implementation of the IFullTextProvider interface.
            </summary>
        </member>
        <member name="T:Mindroute.Core.FullText.IFullTextProvider">
            <summary>
            Interface for fulltext search providers.
            </summary>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Get(Mindroute.Core.FullText.FullTextCatalog,System.String)">
            <summary>
            Get a <see cref="T:Mindroute.Core.FullText.FullTextDocument"/> from the fulltext index.
            </summary>
            <param name="catalog"></param>
            <param name="key"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.GetItemCount">
            <summary>
            Gets the number of items in the index.
            </summary>
            <returns>The number of items in the index.</returns>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Insert(System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
            Add a list of <see cref="T:Mindroute.Core.Model.Content"/> items to the fulltext index.
            </summary>
            <param name="items">The content items to add to the index.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Insert(System.Collections.Generic.List{Mindroute.Core.Model.Comment})">
            <summary>
            Add a list of <see cref="T:Mindroute.Core.Model.Comment"/> objects the fulltext index.
            </summary>
            <param name="comments">The comments to add to the index.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Insert(System.Collections.Generic.List{Mindroute.Core.Model.Blob})">
            <summary>
            Add a list of <see cref="T:Mindroute.Core.Model.Blob"/> objects to the fulltext index.
            </summary>
            <param name="blobs">The blobs to add to the index.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Optimize">
            <summary>
            Optimizes the fulltext index.
            </summary>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Remove(Mindroute.Core.Model.Content)">
            <summary>
            Remove a <see cref="T:Mindroute.Core.Model.Content"/> item from the fulltext index.
            </summary>
            <param name="content">The content item to remove from the index.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Remove(Mindroute.Core.Model.Comment)">
            <summary>
            Remove a <see cref="T:Mindroute.Core.Model.Comment"/> from the fulltext index.
            </summary>
            <param name="comment">The comment to remove from the index.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Remove(Mindroute.Core.Model.Blob)">
            <summary>
            Remove a <see cref="T:Mindroute.Core.Model.Blob"/> from the fulltext index.
            </summary>
            <param name="blob">The blob to remove from the index.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Search(Mindroute.Core.Search.ContentQuery)">
            <summary>
            Search the fulltext index with the specified ContentQuery.
            </summary>
            <param name="query">A content query.</param>
            <returns>A list of FullTextDocument objects matching the query.</returns>
        </member>
        <member name="M:Mindroute.Core.FullText.IFullTextProvider.Search(Mindroute.Core.Search.CommentQuery)">
            <summary>
            Search the fulltext index with the specified CommentQuery.
            </summary>
            <param name="query">A comment query.</param>
            <returns>A list of FullTextDocument objects matching the query.</returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider with the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Get(Mindroute.Core.FullText.FullTextCatalog,System.String)">
            <summary>
            Get a <see cref="T:Mindroute.Core.FullText.FullTextDocument"/> from the fulltext index.
            </summary>
            <param name="catalog"></param>
            <param name="key"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Insert(System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
            Inserts a list of <see cref="T:Mindroute.Core.Model.Content"/> items to the fulltext index.
            </summary>
            <param name="items">The items to insert</param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Insert(System.Collections.Generic.List{Mindroute.Core.Model.Comment})">
            <summary>
            Inserts a list of <see cref="T:Mindroute.Core.Model.Comment"/>s to the fulltext index.
            </summary>
            <param name="comments">The comments to insert.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Insert(System.Collections.Generic.List{Mindroute.Core.Model.Blob})">
            <summary>
            Inserts a list of <see cref="T:Mindroute.Core.Model.Blob"/>s to the fulltext index.
            </summary>
            <param name="blobs">The blobs to insert.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Remove(Mindroute.Core.Model.Content)">
            <summary>
            Remove a <see cref="T:Mindroute.Core.Model.Content"/> item from the fulltext index.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Remove(Mindroute.Core.Model.Comment)">
            <summary>
            Remove a <see cref="T:Mindroute.Core.Model.Comment"/> from the fulltext index.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Remove(Mindroute.Core.Model.Blob)">
            <summary>
            Remove a <see cref="T:Mindroute.Core.Model.Blob"/> from the fulltext index.
            </summary>
            <param name="blob"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Optimize">
            <summary>
            Optimizes the fulltext index.
            </summary>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Search(Mindroute.Core.Search.ContentQuery)">
            <summary>
            Search the fulltext index with the specified ContentQuery.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.FixQuery(Lucene.Net.Search.Query)">
            <summary>
            Rewrites a query that searches the _text field to also include title, tags and slug so that the boost factors comes into play.
            </summary>
            <param name="q">The lucene query to rewrite</param>
            <returns>A query that also searches the title, tags and slug fields.</returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Search(Mindroute.Core.Search.CommentQuery)">
            <summary>
            Search the fulltext index with the specified CommentQuery.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Insert(Mindroute.Core.FullText.FullTextDocument)">
            <summary>
            Inserts a <see cref="T:Mindroute.Core.FullText.FullTextDocument"/> into the full text index.
            </summary>
            <param name="item">Document to insert.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Insert(System.Collections.Generic.IList{Mindroute.Core.FullText.FullTextDocument})">
            <summary>
            Inserts many <see cref="T:Mindroute.Core.FullText.FullTextDocument"/>s into the full text index.
            </summary>
            <param name="items">List of documents.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Remove(Mindroute.Core.FullText.FullTextCatalog,System.String)">
            <summary>
            Removes an item from the index.
            </summary>
            <param name="catalog"></param>
            <param name="key">Id of the item to remove.</param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.GetItemCount">
            <summary>
            Gets the number of items in the index.
            </summary>
            <returns>The number of items in the index.</returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.GetQueryParser(System.String)">
            <summary>
            Returns a query parser for the specified field.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Search(Lucene.Net.Search.Query,System.Int32)">
            <summary>
            Search the index with the specified lucene query.
            </summary>
             <param name="query">A lucene query.</param>
            <param name="max">Max number of results to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.CreateSearchResult(Lucene.Net.Documents.Document,System.Single)">
            <summary>
            Create a <see cref="T:Mindroute.Core.FullText.FullTextDocument"/> document from the specified Lucene document.
            </summary>
            <param name="doc">The document from which to create a fulltext result.</param>
            <param name="score">The score of the document.</param>
            <returns>An instance of the <see cref="T:Mindroute.Core.FullText.FullTextDocument"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.ExecuteRemoveItem(Mindroute.Core.FullText.FullTextCatalog,System.String)">
            <summary>
            Removes an item from the index.
            </summary>
            <param name="catalog"></param>
            <param name="key"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.DoWriterAction(System.Action{Lucene.Net.Index.IndexWriter})">
            <summary>
             Executes an action agains the index writer.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.DoWriterAction``1(System.Func{Lucene.Net.Index.IndexWriter,``0})">
            <summary>
             Executes an action agains the index writer.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.EnsureIndexWriter">
            <summary>
            Ensures the existance of an IndexWriter.
            </summary>
            <remarks>This method should only be called from within a lock</remarks>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Finalize">
            <summary>
            Finalizes an instance of the LuceneFullTextProvider class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.FullText.LuceneFullTextProvider.Dispose">
            <summary>
            Dispose the InderWriter and Directory.
            </summary>
        </member>
        <member name="P:Mindroute.Core.FullText.LuceneFullTextProvider.Searcher">
            <summary>
            Gets an IndexSearcher.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.LanguageMode">
            <summary>
             The language mode used when <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/> has been specified.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.LanguageMode.Translated">
            <summary>
            Search only content that has been translated to the language specified by <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/>
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.LanguageMode.NotTranslated">
            <summary>
            Search only content that has not been translated to the language specified by <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/>
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.LanguageMode.AllTranslations">
            <summary>
            Returns all translations of content in the site specified by <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/>
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.LanguageMode.Fallback">
            <summary>
            Search with fallback using <see cref="P:Mindroute.Core.Search.ContentQuery.LanguageID"/> as the preferred translation.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.JobQuery">
            <summary>
            Defines a query used to find <see cref="T:Mindroute.Core.Model.Job"/> items.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.JobQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.JobQuery"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.JobQuery.Handler">
            <summary>
            Gets or sets a handler. Used to find <see cref="T:Mindroute.Core.Model.Job"/> items with a specific handler.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.JobQuery.Status">
            <summary>
            Gets or sets a <see cref="T:Mindroute.Core.Model.JobStatus"/>. Used to find jobs with a specific status.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.TagFilterMode">
            <summary>
             The filter mode used when searching for content by tags.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.TagFilterMode.Any">
            <summary>
            Indicates a filter that matches on any of the specified tags.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.TagFilterMode.All">
            <summary>
            Indicates a filter that matches on all of the specified tags.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.RoleColumn">
            <summary>
              Indicates the <see cref="T:Mindroute.Core.Model.Role"/> columns to sort by.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.RoleColumn.Default">
            <summary>
            The default sort column is <see cref="P:Mindroute.Core.Model.Role.ID"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.RoleColumn.Name">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Role.Name"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.RoleColumn.Created">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Role.Created"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.RoleColumn.Columns">
            <summary>
            Gets the list of possible columns to sort by.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.UserColumn">
            <summary>
              Indicates the <see cref="T:Mindroute.Core.Model.User"/> columns to sort by.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.UserColumn.Default">
            <summary>
            The default sort column is <see cref="P:Mindroute.Core.Model.User.ID"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.UserColumn.Username">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.User.Username"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.UserColumn.Name">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.User.Name"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.UserColumn.DisplayName">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.User.DisplayName"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.UserColumn.Email">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.User.Email"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.UserColumn.Created">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.User.Created"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.UserColumn.Columns">
            <summary>
            Gets the list of possible columns to sort by.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.DraftQuery">
            <summary>
            Defines a query used to find draft <see cref="T:Mindroute.Core.Model.Content"/> items.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.DraftQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.DraftQuery"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.DraftQuery.LanguageID">
            <summary>
            Gets or sets the language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to check for drafts, when <see cref="P:Mindroute.Core.Search.DraftQuery.LanguageID"/> is <c>null</c>, drafts from all sites and languages are returned.
            Default value is <c>null</c>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.DraftQuery.UserID">
            <summary>
            Gets or sets the ID of the <see cref="T:Mindroute.Core.Model.User"/> for which to get drafts, <c>null</c> returns drafts by any user.
            Default value is <c>null</c>. 
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.RoleQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Mindroute.Core.Model.Role"/> items.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.RoleQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.RoleQuery"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.RoleQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.RoleQuery"/> class with the specified text.
            </summary>
            <param name="text">The text to search for.</param>
        </member>
        <member name="P:Mindroute.Core.Search.RoleQuery.Text">
            <summary>
              Gets or sets the text to search for. All roles where the Name property contain the text will be returned.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.RoleQuery.IncludeSystemRoles">
            <summary>
            Gets or sets a value indicating whether the result should include system roles.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.RoleQuery.Users">
            <summary>
            Gets the list of <see cref="T:Mindroute.Core.Model.User"/> IDs. Can be used to find all roles that a <see cref="T:Mindroute.Core.Model.User"/> is member of.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.RoleQuery.SearchWindowsRoles">
            <summary>
            Gets or sets a value indicating whether the result should return windows roles or not.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.UserQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Mindroute.Core.Model.User"/> items.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.UserQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.UserQuery"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.UserQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.UserQuery"/> class with the specified text.
            </summary>
            <param name="text">The text to search for.</param>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.IncludeSystemUsers">
            <summary>
            Gets or sets a value indicating whether the result should include system users.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.SearchDeleted">
            <summary>
            Gets or sets a value indicating whether the result should include deleted users.
            Set to <c>false</c> to return only visible users, <c>true</c> to return only deleted users or <c>null</c> to return both visible and deleted users.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.SearchApproved">
            <summary>
            Gets or sets a value indicating whether the result should include approved users or not.
            Set to <c>true</c> to return only approved users, <c>false</c> to return only unapproved users or <c>null</c> to return both approved and unapproved users.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.Text">
            <summary>
              Gets or sets the text to search for. All users where the Username, Name or Email properties contain the text will be returned.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.MetaDataValue">
            <summary>
            Gets or sets a meta data property to search for.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.Roles">
            <summary>
            Gets the list of <see cref="T:Mindroute.Core.Model.Role"/> IDs. Can be used to find all users that are members of specific <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.ApplicationName">
            <summary>
            Gets or sets the application name to search for.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.ProviderName">
            <summary>
            Gets or sets the provider name to search for.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.SearchAdministrators">
            <summary>
            Gets or sets a value indicating whether or not to find administrators.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.UserQuery.SearchWindowsUsers">
            <summary>
            Gets or sets a value indicating whether or not to find windows users.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.ContentColumn">
            <summary>
              Indicates the <see cref="T:Mindroute.Core.Model.Content"/> columns to sort by.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentColumn.Default">
            <summary>
            The default sort column is <see cref="P:Mindroute.Core.Model.Content.ID"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentColumn.Title">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Content.Title"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentColumn.ShortTitle">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Content.ShortTitle"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentColumn.Created">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Content.Created"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentColumn.Modified">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Content.Modified"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentColumn.Weight">
            <summary>
            Order by <see cref="P:Mindroute.Core.Model.Content.Weight"/>.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.ContentColumn.Columns">
            <summary>
            Gets the list of possible columns to sort by.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.SortDirection">
            <summary>
             Indicates the direction to sort by.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.SortDirection.Ascending">
            <summary>
            Sorts the data in ascending order.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Search.SortDirection.Descending">
            <summary>
            Sorts the data in descending order.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Search.SortItem">
            <summary>
            Represents a sort order in a search. One or more SortItem objects 
            can be added to a <see cref="T:Mindroute.Core.Search.Query"/>.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.SortItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.SortItem"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Search.SortItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.SortItem"/> class 
            with the specified column name.
            </summary>
            <param name="column">The column to sort by.</param>
        </member>
        <member name="M:Mindroute.Core.Search.SortItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Search.SortItem"/> class 
            with the specified column name and <see cref="T:Mindroute.Core.Search.SortDirection"/>.
            </summary>
            <param name="column">The column to sort by.</param>
            <param name="direction">The direction to sort by.</param>
        </member>
        <member name="M:Mindroute.Core.Search.SortItem.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Mindroute.Core.Search.SortItem"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Mindroute.Core.Search.SortItem"/>.</returns>
        </member>
        <member name="P:Mindroute.Core.Search.SortItem.Column">
            <summary>
            Gets or sets the column to sort by.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Search.SortItem.Direction">
            <summary>
            Gets or sets the direction to sort by (ascending or descending).
            </summary>
        </member>
        <member name="T:Mindroute.Core.Security.AccessMask">
            <summary>
              Indicates the access mask value(s) for an AccessControlEntry.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.AccessMask.None">
            <summary>
            No permission
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.AccessMask.Read">
            <summary>
            Permission to access the entity.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.AccessMask.Create">
            <summary>
            Permission to create new entities.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.AccessMask.Edit">
            <summary>
            Permission to modify an entity.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.AccessMask.Delete">
            <summary>
            Permission to delete an entity.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.AccessMask.Admin">
            <summary>
            Permission to set permissions.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.AccessMask.Full">
            <summary>
            Full control of the entity.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Security.Entity">
            <summary>
              A class representing an entity on which permissions can be set.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Security.Entity.#ctor(Mindroute.Core.Security.EntityType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Security.Entity"/> class.
            </summary>
            <param name="type">Type of the entity.</param>
            <param name="id">ID of the entity.</param>
        </member>
        <member name="M:Mindroute.Core.Security.Entity.#ctor(Mindroute.Core.Security.EntityType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Security.Entity"/> class.
            </summary>
            <param name="type">Type of the entity.</param>
            <param name="id">ID of the entity.</param>
            <param name="createdById">ID of the user that created the entity.</param>
        </member>
        <member name="P:Mindroute.Core.Security.Entity.ID">
            <summary>
            Gets the ID of the <see cref="T:Mindroute.Core.Security.Entity"/>
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.Entity.EntityType">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Security.Entity.EntityType"/> of the <see cref="T:Mindroute.Core.Security.Entity"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.Entity.CreatedByID">
            <summary>
            Gets the ID of the <see cref="T:Mindroute.Core.Model.User"/> that created the <see cref="T:Mindroute.Core.Security.Entity"/>
            </summary>
        </member>
        <member name="T:Mindroute.Core.Security.Permission">
            <summary>
            An object representing a user's permission for en entity.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Security.Permission.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Security.Permission"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Security.Permission.#ctor(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},Mindroute.Core.Security.AccessMask)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Security.Permission"/> class with the specified entity and access mask.
            </summary>        
            <param name="entityType">The <see cref="P:Mindroute.Core.Security.Permission.EntityType"/>.</param>
            <param name="entityID">ID of the entity.</param>
            <param name="accessMask">The <see cref="P:Mindroute.Core.Security.Permission.AccessMask"/></param>
        </member>
        <member name="P:Mindroute.Core.Security.Permission.EntityType">
            <summary>
              Gets or sets the <see cref="P:Mindroute.Core.Security.Permission.EntityType"/> of the <see cref="T:Mindroute.Core.Security.Permission"/> entry.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.Permission.EntityID">
            <summary>
              Gets or sets the entity ID of the <see cref="T:Mindroute.Core.Security.Permission"/> entry, <c>null</c> for global permission.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.Permission.AccessMask">
            <summary>
              Gets or sets the bitmask containing the actual permissions.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Security.EntityType">
            <summary>
              Indicates the entity type for an AccessControlEntry.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.EntityType.Content">
            <summary>
            <see cref="T:Mindroute.Core.Model.Content"/> items.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.EntityType.Site">
            <summary>
            <see cref="T:Mindroute.Core.Model.Site"/> items.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Security.EntityType.Policy">
            <summary>
            Policy items.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Security.PermissionException">
            <summary>
            The exception that is thrown when a permission error is detected.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Security.PermissionException.#ctor(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},Mindroute.Core.Security.AccessMask)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Security.PermissionException"/> class.
            </summary>
            <param name="entityType">The EntityType that was checked for permissions.</param>
            <param name="entityID">The ID of the entity that was checked for permissions.</param>
            <param name="accessMask">The permission that was checked.</param>
        </member>
        <member name="M:Mindroute.Core.Security.PermissionException.#ctor(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},Mindroute.Core.Security.AccessMask,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Security.PermissionException"/> class.
            </summary>
            <param name="entityType">The EntityType that was checked for permissions.</param>
            <param name="entityID">The ID of the entity that was checked for permissions.</param>
            <param name="accessMask">The permission that was checked.</param>
            <param name="message">Initializes the <see cref="T:Mindroute.Core.Security.PermissionException"/> with the specified message.</param>
        </member>
        <member name="P:Mindroute.Core.Security.PermissionException.EntityType">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Security.PermissionException.EntityType"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.PermissionException.EntityID">
            <summary>
            Gets the entity id.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.PermissionException.AccessMask">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Security.PermissionException.AccessMask"/>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Helpers.SerializationHelper">
            <summary>
            Helper and extension methods for serializing and deserializing objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.SerializationHelper.Deserialize(System.Byte[])">
            <summary>
            Deserializes the specified byte array into an object graph.
            </summary>       
            <param name="bytes">The serialized object.</param>
            <returns>Returns an instance of the specified type.</returns>
            <remarks>Uses the BinaryFormatter.</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.SerializationHelper.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified byte array into an object graph.
            </summary>       
            <typeparam name="T">The type of data to deserialize.</typeparam>
            <param name="bytes">The serialized object.</param>
            <returns>Returns an instance of the specified type.</returns>
            <remarks>Uses the BinaryFormatter.</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.SerializationHelper.Serialize(System.Object)">
            <summary>
            Serializes an object, or graph of connected objects, to a byte array.
            </summary>
            <param name="graph">The object that contains the data to serialize.</param>
            <returns>An byte array representation of the graph.</returns>
            <remarks>Uses the BinaryFormatter.</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.SerializationHelper.SerializeToJson(System.Object)">
            <summary>
            Serializes an object, or graph of connected objects, to a json string.
            </summary>
            <param name="graph">The object that contains the data to write to the json string.</param>
            <returns>A json representation of the graph.</returns>
            <remarks>Uses the JavaScriptSerializer.</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.SerializationHelper.DeserializeFromJson``1(System.String)">
            <summary>
            Deserializes the specified json string into an object graph.
            </summary>       
            <typeparam name="T">The type of data to deserialize.</typeparam>
            <param name="json">The json serialized object.</param>
            <returns>Returns an instance of the specified type.</returns>
            <remarks>Uses the JavaScriptSerializer.</remarks>
        </member>
        <member name="T:Mindroute.Core.Security.AnonymousIdentity">
            <summary>
            Represents an anonymous user.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Security.AnonymousIdentity.#ctor">
            <summary>
            Initializes a new instance of the AnonymousIdentity class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.AnonymousIdentity.AuthenticationType">
            <summary>
            Gets the type of authentication used to identify the user.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.AnonymousIdentity.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Security.AnonymousIdentity.Name">
            <summary>
            Gets the user's name.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.RequestLocation">
            <summary>
            The location of the current request.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.None">
            <summary>
            Indicates that the request location has not been set.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.StaticFile">
            <summary>
            This is a request for a static file, e.g. jpg, css etc. 
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.EmbeddedResource">
            <summary>
            This is a request for an embedded reasource, e.g. WebResource.axd or ScriptResource.axd 
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.Public">
            <summary>
            This is a request for a resource in the public site.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.Login">
            <summary>
            This is a request for the admin login page.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.Logout">
            <summary>
            This is a request for the admin logout page.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.Install">
            <summary>
            This is a request for a resource in the /admin/install folder. 
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.Upgrade">
            <summary>
            This is a request for a resource in the /admin/upgrade folder. 
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.Messages">
            <summary>
            This is a request for a resource in the /admin/message folder 
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RequestLocation.Admin">
            <summary>
            This is a request for a resource in the /admin section.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Helpers.HtmlHelper">
            <summary>
            Contains methods for parsing, formatting, and validating HTML.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.RoutePattern">
            <summary>
            A regular expression pattern for validating permalinks and aliases. Valid characters are [a-zA-Z0-9-_.!~'();@=$,/]. 
            </summary>
            <remarks>
            Technically + * : &amp; are also permitted, but urls with these characters will probably be denied by the asp.net request filtering module.
            </remarks>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.IpAddressOrHostPattern">
            <summary>
            A regular expression pattern for validating a binding, i.e. an IP adress or a DNS host name.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.EmailPattern">
            <summary>
            A regular expression pattern for validating an email address and splitting it in the local and domain part.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.HostPattern">
            <summary>
            A regular expression pattern for validating a DNS host name.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.IpAddressPattern">
            <summary>
            A regular expression pattern for validating an IP adress.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.SlugPattern">
            <summary>
            A regular expression pattern for validating slugs. Valid characters are [a-zA-Z0-9-_.!~'();@=$,]. 
            A slug must also start and end with a letter or digit.
            </summary>
            <remarks>
            Technically + * : &amp; are also permitted, but urls with these characters will probably be denied by the asp.net request filtering module.
            </remarks>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.UrlPattern">
            <summary>
            A regular expression pattern for validating urls.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.UriPattern">
            <summary>
            A regular expression pattern for parsing the components (scheme, host, path, query and fragment) of an url.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.LinkifyPattern">
            <summary>
            A regular expression pattern for finding urls in text.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Helpers.HtmlHelper.RootRelativeUrlPattern">
            <summary>
            A regular expression pattern for finding root-relative urls in html.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.HasMore(System.String)">
            <summary>
            Gets a value indicating whether the html string contains the &lt;!--more--&gt; delimiter.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.Less(System.String)">
            <summary>
            Gets the part of a html string before the &lt;!--more--&gt; delimiter.
            </summary>
            <param name="html">Html to split.</param>
            <returns>The text before the &lt;!--more--&gt; delimiter</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.More(System.String)">
            <summary>
            Gets the part of a html string after the &lt;!--more--&gt; delimiter.
            </summary>
            <param name="html">Html to split.</param>
            <returns>The text after the &lt;!--more--&gt; delimiter</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.Linkify(System.String)">
            <summary>
            Wraps an &lt;a href=""&gt;&lt;/a&gt; tag around all urls in the text.
            </summary>
            <param name="text">Text containing urls to linkify.</param>
            <returns>A string with all urls wrapped in anchors.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.Linkify(System.String,System.String)">
            <summary>
            Wraps an &lt;a href=""&gt;&lt;/a&gt; tag with the specified rel attribute around all urls in the text.
            </summary>
            <param name="text">Text containing urls to linkify.</param>
            <param name="rel">The rel attribute to set on the anchors, e.g. "nofollow".</param>
            <returns>A string with all urls wrapped in anchors.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.LinkifyEvaluator(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Callback method for the Linkify method
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.Emphasize(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Emphasizes (wraps in &lt;em&gt;&lt;/em&gt;) all matching search terms in the input text.
            </summary>
            <param name="input">The text to examine.</param>
            <param name="terms">List of words to mark in the text.</param>
            <returns>A string with all matching search termns highlighted.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.AttributeSafe(System.String)">
            <summary>
            Converts quotation marks (&quot;), ampersands (&amp;) and left angle brackets (&lt;) to equivalent character entities.
            The result should be used only for attributes that are in double quotation marks.
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.JsSafe(System.String)">
            <summary>
            Converts the input text making it safe to use as a javascript string enclosed with single quotes '.
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.HtmlSafe(System.String)">
            <summary>
            Converts ampersands (&amp;), left angle brackets (&lt;) and right angle brackets (&gt;) to equivalent character entities.
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.HtmlSafe(System.String,System.Boolean)">
            <summary>
            Converts ampersands (&amp;), left angle brackets (&lt;), right angle brackets (&gt;) and optionally line breaks (\n) to equivalent character entities.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="br">When <c>true</c> converts line breaks to &lt;br /&gt;</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.GetLinks(System.String)">
            <summary>
            Returns a string collection of links (&lt;a href=""&gt;&lt;/a&gt;) within the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A string collection with the urls in the specified text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.GetMatchingText(System.String,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>Gets a relevant section of text related to the search terms.</summary>
            <param name="input">Text to examine.</param>        
            <param name="length">Number of characters to return.</param>
            <param name="terms">Search terms to look for.</param>
            <returns>Returns the relevant text with the found query words marked as bold.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.ShortenUrl(System.String,System.Int32)">
            <summary>
            Shortens a url for display.
            </summary>
            <param name="url">The URL to shorten.</param>
            <param name="max">Maximum size for the url. Anything longer gets shortened.</param>
            <returns>The shortened url.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.SpamSpan(System.String)">
            <summary>
            Obfuscate all email addresses with the spamspan method (http://www.spamspan.com) to prevent spambots from collecting it. 
            </summary>
            <param name="html">The html string with email addresses to obfuscate.</param>
            <returns>The obfuscated string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.SpamSpanEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Callback method for the SpamSpan method
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.StripHtml(System.String)">
            <summary>
            Returns a string with all HTML tags and comments removed.  
            This is useful for displaying HTML in plain text and stripping formatting like bold and italics.
            </summary>
            <param name="html">The string to strip of HTML.</param>
            <returns>The stripped string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.NextCharBeginsHtmlTag(System.String,System.Int32)">
            <summary>
             Checks if the next char in the html string begins a tag.
            </summary>
            <param name="html">The html string.</param>
            <param name="i">The char index.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.IsAttributeValueStartCharacter(System.Char)">
            <summary>
            Checks if the specified char is an attribute start char.
            </summary>
            <param name="c">The char to check.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.IsAttributeValueEndCharacter(System.Char,System.Char)">
            <summary>
            Checks if the specified char is an attribute end char.
            </summary>
            <param name="c">The char to check.</param>
            <param name="attributeStartChar">The char that started the attribute.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.IsHtmlTagBeginCharacter(System.Char)">
            <summary>
            Checks if the specified char is a html tag begin char.
            </summary>
            <param name="c">The char to check.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.IsEnglishLetter(System.Char)">
            <summary>
            Checks if the specified char is an english letter [a-zA-Z].
            </summary>
            <param name="nextChar">The char to check.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.Tidy(System.String)">
            <summary>
            Correct common HTML markup errors such as badly nested, unclosed elements and unescaped entities.
            </summary>
            <param name="input">The HTML fragment to tidy.</param>
            <returns>A corrected XHTML fragment.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.ToAbsoluteUrls(System.String,System.String)">
            <summary>
            Converts all root-relatives urls within the provided html string to absolute urls.
            </summary>
            <param name="html">Html containing urls to convert.</param>
            <param name="root">The root url to insert before all root-realative urls, e.g. http://www.tempuri.org.</param>
            <example>Converts href="/path/to/foo.jpg" to href="http://www.tempuri.org/path/to/foo.jpg"</example>
            <returns>A string with all root-relative urls converted to absolute urls.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.HtmlHelper.FixUrlWithoutProtocol(System.String,System.String)">
            <summary>
            Fixes urls without protocol, e.g. www.lemoon.se => http://www.lemoon.se
            </summary>
            <param name="url"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="T:Mindroute.Core.Helpers.CryptoHelper">
            <summary>
            Extension methods for calculating hash values, encrypting and decrypting text.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.ComputeHash(System.String)">
            <summary>
            Generates a hash for the given plain text value and returns a base64 encoded result. Before the hash is computed, a random salt
            is generated and appended to the plain text. This salt is stored at the end of the hash value, so it can be used later for hash
            verification.
            </summary>
            <param name="plainText">Plaintext value to be hashed. The function does not check whether this parameter is null.</param>
            <returns>Hash value formatted as a base64 encoded string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.ComputeHashWithSalt(System.String,System.Byte[])">
            <summary>
            Generates a hash for the given plain text value and returns a base64 encoded result.
            </summary>
            <param name="plainText">Plaintext value to be hashed. The function does not check whether this parameter is null.</param>
            <param name="saltBytes">The salt to use when computing the hash. This salt is stored at the end of the hash value, so it can be used later for hash verification.</param>
            <returns>Hash value formatted as a base64 encoded string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.VerifyHash(System.String,System.String)">
            <summary>
            Compares a hash of the specified plain text value to a given hash value. Plain text is hashed with the same salt value as the original hash.
            </summary>
            <param name="plainText">Plain text to be verified against the specified hash. The function does not check whether this parameter is null.</param>
            <param name="hashValue">Base64 encoded hash value produced by ComputeHash function. This value includes the original salt appended to it.</param>
            <returns>If computed hash mathes the specified hash the function the return value is true; otherwise, the function returns false.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string into a string using a password 
            </summary>
            <param name="clearText">The input text you want to encrypt.</param>
            <param name="password">The password to use when encrypting the text.</param>
            <returns>The resulting cipher text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt a byte array into a byte array using a key and an IV 
            </summary>
            <param name="clearData">The input data you want to encrypt.</param>
            <param name="key">The secret key for the underlying encryption algorithm.</param>
            <param name="iv">The initialization vector for underlying encryption algorithm.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string into a string using a password  
            </summary>
            <param name="cipherText">The cipher text you want to decrypt.</param>
            <param name="password">The password to use when decrypting the text.</param>
            <returns>Returns a decrypted string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt a byte array into a byte array using a key and an IV  
            </summary>
            <param name="cipherData">The cipher data you want to decrypt.</param>
            <param name="key">The secret key for the underlying encryption algorithm.</param>
            <param name="iv">The initialization vector for underlying encryption algorithm.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.ComputeSignature(System.String,System.String)">
            <summary>
            Signs the given plain text value with the specified private key and returns a base64 encoded result.
            </summary>
            <param name="plainText">Plain text to sign.</param>
            <param name="privateKey">A private key to sign the plain text with.</param>
            <returns>Signature value formatted as a base64 encoded string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.VerifySignature(System.String,System.String,System.String)">
            <summary>
            Verifies that the specified plain text value matches a given signature.
            </summary>
            <param name="plainText">Plain text to be verified against the specified signatute.</param>
            <param name="signature">Base64 encoded signature produced by ComputeSignature function.</param>
            <param name="publicKey">A public key to verify the signature with.</param>
            <returns><c>true</c> if the computed signature mathes the specified signature; otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.CryptoHelper.GenerateKeys">
            <summary>
            Generate a public/private key pair.
            </summary>
            <returns>A string array where the first item is the public key and the second is the private key.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.CacheService">
            <summary>
              Service layer for managing the cache.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.#ctor(Mindroute.Core.Caching.ICacheProvider,Mindroute.Core.Repositories.IContentRepository,Mindroute.Core.Repositories.IRoleRepository,Mindroute.Core.Repositories.IWidgetRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.
            </summary>
            <param name="cache">An object implementing the <see cref="T:Mindroute.Core.Caching.ICacheProvider"/> interface.</param>
            <param name="contentRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IContentRepository"/> interface.</param>
            <param name="roleRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IRoleRepository"/> interface.</param>
            <param name="widgetRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IWidgetRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.Clear(Mindroute.Core.Caching.CacheRegion)">
            <summary>
            Removes a specific region of the cache.
            </summary>
            <param name="region">The <see cref="T:Mindroute.Core.Caching.CacheRegion"/> to clear.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentDeleted(Mindroute.Core.Model.Content)">
            <summary>
            Clears the content item from the cache after it was deleted from the repository.
            </summary>
            <param name="deleted">The deleted content item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentLoad(System.Int32,System.Int32)">
            <summary>
            Gets a content item from the cache.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <returns>An instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentLoaded(System.Int32,System.Int32,Mindroute.Core.Model.Content)">
            <summary>
            Stores a content item in the cache after it was loaded from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnAncestorsLoad(System.Int32,System.Int32)">
            <summary>
            Gets ancestors from cache.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Content"/> objects or <c>null</c> if not found in cache.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnAncestorsLoaded(System.Int32,System.Int32,System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
            Stores ancestors in cache.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <param name="ancestors">The list of <see cref="T:Mindroute.Core.Model.Content"/> items to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnDescendantsLoad(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
            Gets descendants from the cache.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <param name="depth">The depth of descendants.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Content"/> objects or <c>null</c> if not found in cache.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnDescendantsLoaded(System.Int32,System.Int32,System.Nullable{System.Int32},System.Collections.Generic.List{Mindroute.Core.Model.Content},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
            Stores descendants in the cache.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <param name="depth">The depth of descendants.</param>
            <param name="descendants">The list of <see cref="T:Mindroute.Core.Model.Content"/> items to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.PermalinkToID(System.String,System.Int32)">
            <summary>
            Gets content ID from cache.
            </summary>
            <param name="permalink">Permalink of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <returns>The Content ID.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.PermalinkToID(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Stores content id in cache
            </summary>
            <param name="permalink">Permalink of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.SlugToID(System.String,System.Int32)">
            <summary>
            Gets content ID from cache.
            </summary>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <returns>The Content ID.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.SlugToID(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Stores content id in cache
            </summary>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSitemapLoad(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
            Gets sitemap from cache
            </summary>
            <param name="siteID">ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <param name="depth">The depth of the hierarchy.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Content"/> objects or <c>null</c> if not found in cache.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSitemapLoaded(System.Int32,System.Int32,System.Collections.Generic.List{Mindroute.Core.Model.Content},System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
            Stores sitemap in cache.
            </summary>
            <param name="siteID">ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="languageID">The two-letter language code of the translation.</param>
            <param name="sitemap">The list of <see cref="T:Mindroute.Core.Model.Content"/> items to store.</param>
            <param name="depth">The depth of the hierarchy.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentInserted(Mindroute.Core.Model.Content)">
            <summary>
            Modifies cache when new content was inserted.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item that was content.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentRemoved(Mindroute.Core.Model.Content)">
            <summary>
            Clears the cache when a content item was removed.
            </summary>
            <param name="removed">The <see cref="T:Mindroute.Core.Model.Content"/> item that was removed.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentMoved(Mindroute.Core.Model.Content,Mindroute.Core.Model.Content,System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
            Clears the cache when a content item was moved.
            </summary>
            <param name="original">The <see cref="T:Mindroute.Core.Model.Content"/> item (before move).</param>
            <param name="moved">The moved <see cref="T:Mindroute.Core.Model.Content"/> item (after move).</param>
            <param name="ancestors">The ancestors of the original <see cref="T:Mindroute.Core.Model.Content"/> items.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentRestored(Mindroute.Core.Model.Content)">
            <summary>
            Clears the cache when a content item was restored
            </summary>
            <param name="restored">The <see cref="T:Mindroute.Core.Model.Content"/> item and its' descendants.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentReverted(Mindroute.Core.Model.Content,Mindroute.Core.Model.Content)">
            <summary>
            Clears the cache when a content item was reverted to a previous version.
            </summary>
            <param name="current">The current <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="reverted">The reverted <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnContentUpdated(Mindroute.Core.Model.Content,Mindroute.Core.Model.Content)">
            <summary>
            Clear cache after content was updated.
            </summary>
            <param name="original">The original <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="updated">The updated <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.ClearContentCache(Mindroute.Core.Model.Content,System.Boolean)">
            <summary>
            Helper method for clearing the cache of a content item and its dependencies.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item to clear from the cache.</param>
            <param name="clearDescendants"><c>true</c> to clear the descendants cache for every ancestor of the specified <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnCommentsLoad(System.Int32,System.Int32)">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Comment"/> for a <see cref="T:Mindroute.Core.Model.Content"/> item from the cache.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item</param>
            <returns>Returns an list of the <see cref="T:Mindroute.Core.Model.Comment"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnCommentsLoaded(System.Int32,System.Int32,System.Collections.Generic.IList{Mindroute.Core.Model.Comment})">
            <summary>
            Stores the list of <see cref="T:Mindroute.Core.Model.Comment"/> for a <see cref="T:Mindroute.Core.Model.Content"/> item in the cache.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item</param>
            <param name="comments">The <see cref="T:Mindroute.Core.Model.Comment"/> objects to store in the cache.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnCommentInserted(Mindroute.Core.Model.Comment)">
            <summary>
            Clears cache when a new comment was inserted.
            </summary>
            <param name="comment">The <see cref="T:Mindroute.Core.Model.Content"/> item that was content.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnCommentUpdated(Mindroute.Core.Model.Comment)">
            <summary>
            Clears cache when a comment was updated.
            </summary>
            <param name="comment">The <see cref="T:Mindroute.Core.Model.Content"/> item that was content.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnCommentRemoved(Mindroute.Core.Model.Comment)">
            <summary>
            Clears cache when a comment was removed.
            </summary>
            <param name="comment">The <see cref="T:Mindroute.Core.Model.Content"/> item that was content.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnExtensionLoad(System.String)">
            <summary>
            Gets an extension object from the cache.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnExtensionLoaded(System.String,Mindroute.Core.Model.Extension)">
            <summary>
            Gets an extension object from the cache.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnExtensionsLoad">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Extension"/> objects from the cache.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Extension"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnExtensionsLoaded(System.Collections.Generic.List{Mindroute.Core.Model.Extension})">
            <summary>
              Stores the list of <see cref="T:Mindroute.Core.Model.Extension"/> objects in the cache.
            </summary>
            <param name="extensions">List of extension objects.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnExtensionUpdated(Mindroute.Core.Model.Extension)">
            <summary>
            Update cache when an <see cref="T:Mindroute.Core.Model.Extension"/> was updated.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnExtensionRemoved(System.String)">
            <summary>
            Clears the cache when an <see cref="T:Mindroute.Core.Model.Extension"/> was removed.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnExtensionsRegistered">
            <summary>
            Clears the cache when the <see cref="T:Mindroute.Core.Model.Extension"/> objects were registered.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnAccessControlListLoad(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32})">
            <summary>
            Gets the ACL for an entity from the cache.
            </summary>
            <param name="entityType"><see cref="T:Mindroute.Core.Security.EntityType"/> of the entity.</param>
            <param name="entityID">ID of the entity.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnAccessControlListLoaded(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},System.Collections.Generic.List{Mindroute.Core.Model.AccessControlEntry})">
            <summary>
            Stores the ACL for an entity in the cache.
            </summary>
            <param name="entityType"><see cref="T:Mindroute.Core.Security.EntityType"/> of the entity.</param>
            <param name="entityID">ID of the entity.</param>
            <param name="acl">The ACL to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnAccessControlListUpdated(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32})">
            <summary>
            Clears the cache when the ACL for an entity has been set.
            </summary>
            <param name="entityType"><see cref="T:Mindroute.Core.Security.EntityType"/> of the entity.</param>
            <param name="entityID">ID of the entity.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSettingLoad``1(System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
              Gets a setting value from the cache.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">Site ID or <c>null</c> to get a global setting.</param>
            <param name="name">Setting name.</param>
            <param name="systemSetting"><c>True</c> to get a system setting, otherwise false.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSettingLoaded``1(System.Nullable{System.Int32},System.String,System.Boolean,``0)">
            <summary>
              Stores a setting value in the cache.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">Site ID or <c>null</c> to store a global setting.</param>
            <param name="name">Setting name.</param>
            <param name="systemSetting"><c>True</c> to store a system setting, otherwise false.</param>
            <param name="value">The setting value to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSettingRemoved(System.Nullable{System.Int32},System.String)">
            <summary>
            Clears the cache when a setting has been removed.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to remove a global setting.</param>
            <param name="name">Setting name.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSettingUpdated(System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Clears the cache when a setting has been updated.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to remove a global setting.</param>
            <param name="name">Setting name.</param>
            <param name="systemSetting"><c>True</c> if the setting is a system setting.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnBindingsLoad">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Binding"/> objects from the cache.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Binding"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnBindingsLoaded(System.Collections.Generic.List{Mindroute.Core.Model.Binding})">
            <summary>
              Stores the list of <see cref="T:Mindroute.Core.Model.Binding"/> objects in the cache.
            </summary>
            <param name="bindings">The list of <see cref="T:Mindroute.Core.Model.Binding"/> objects to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnBindingsSet">
            <summary>
              Removes the list of <see cref="T:Mindroute.Core.Model.Binding"/> objects in the cache.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSitesLoad">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Site"/> objects from the cache.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSitesLoaded(System.Collections.Generic.List{Mindroute.Core.Model.Site})">
            <summary>
              Stores the list of <see cref="T:Mindroute.Core.Model.Site"/> objects in the cache.
            </summary>
            <param name="sites">The list of <see cref="T:Mindroute.Core.Model.Site"/> objects to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSiteInserted">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Site"/> has been inserted.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnSiteUpdated">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Site"/> has been updated.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnLanguageRemoved(System.Int32)">
            <summary>
            Clears the cache when a language has been removed from a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="languageID">Two-letter language code.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserLoad(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.User"/> from the cache.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.User"/></param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserLoaded(Mindroute.Core.Model.User)">
            <summary>
            Stores a <see cref="T:Mindroute.Core.Model.User"/> in the cache.
            </summary>
            <param name="user">The <see cref="T:Mindroute.Core.Model.User"/> to store in the cache.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserIDLoad(System.String,System.String)">
            <summary>
            Gets the ID of a <see cref="T:Mindroute.Core.Model.User"/> from the cache.
            </summary>
            <param name="username">The username of the <see cref="T:Mindroute.Core.Model.User"/></param>
            <param name="providerName">The name of the authentication provider.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Mindroute.Core.Model.User"/> has the specified username.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserIDLoaded(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Stores a username-&gt;id mapping in the cache.
            </summary>
            <param name="username">The username of the <see cref="T:Mindroute.Core.Model.User"/></param>
            <param name="providerName">The name of the authentication provider.</param>
            <param name="id">The ID of the <see cref="T:Mindroute.Core.Model.User"/></param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserUpdated(Mindroute.Core.Model.User,Mindroute.Core.Model.User)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.User"/> has been updated.
            </summary>
            <param name="original">The <see cref="T:Mindroute.Core.Model.User"/> item before the update.</param>
            <param name="updated">The <see cref="T:Mindroute.Core.Model.User"/> item after the update.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserDeleted(Mindroute.Core.Model.User)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.User"/> has been deleted.
            </summary>
            <param name="deleted">The <see cref="T:Mindroute.Core.Model.User"/> object that was deleted.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserRestored(Mindroute.Core.Model.User)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.User"/> has been restored.
            </summary>
            <param name="restored">The <see cref="T:Mindroute.Core.Model.User"/> object that was restored.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserAddedToRole(System.Int32)">
            <summary>
            Clears the roles cache when a <see cref="T:Mindroute.Core.Model.User"/> has been added to a <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.User"/></param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnUserRemovedFromRole(System.Int32)">
            <summary>
            Clears the roles cache when a <see cref="T:Mindroute.Core.Model.User"/> has been removed from a <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.User"/></param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnRoleLoad(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Role"/> from the cache.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Role"/></param>
            <returns>An instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnRoleLoaded(Mindroute.Core.Model.Role)">
            <summary>
              Stores a <see cref="T:Mindroute.Core.Model.Role"/> in the cache.
            </summary>
            <param name="role">The <see cref="T:Mindroute.Core.Model.Role"/> to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnRolesLoad(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Mindroute.Core.Model.Role"/> objects for a <see cref="T:Mindroute.Core.Model.User"/> from the cache.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/></param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Role"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnRolesLoaded(System.Int32,System.Collections.Generic.List{Mindroute.Core.Model.Role})">
            <summary>
            Stores a list of <see cref="T:Mindroute.Core.Model.Role"/> objects for a <see cref="T:Mindroute.Core.Model.User"/> in the cache.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/></param>
            <param name="roles">The list of <see cref="T:Mindroute.Core.Model.Role"/> objects.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnRoleRemoved(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Role"/> has been removed.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Role"/></param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnRoleUpdated(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Role"/> has been updated.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Role"/></param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnDashboardInserted(Mindroute.Core.Model.Dashboard)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Dashboard"/> has been inserted.
            </summary>
            <param name="dashboard">The affected <see cref="T:Mindroute.Core.Model.Dashboard"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnDashboardRemoved(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Dashboard"/> has been removed.
            <param name="dashboardID">The ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/> that was removed.</param>
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnDashboardUpdated(Mindroute.Core.Model.Dashboard)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Dashboard"/> has been updated.
            <param name="dashboard">The affected <see cref="T:Mindroute.Core.Model.Dashboard"/>.</param>
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnDashboardsLoad">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects from the cache.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnDashboardsLoaded(System.Collections.Generic.List{Mindroute.Core.Model.Dashboard})">
            <summary>
              Stores the list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects in the cache.
            </summary>
            <param name="dashboards">The list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnWidgetLoad(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Widget"/> from the cache.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Widget"/></param>
            <returns>An instance of the <see cref="T:Mindroute.Core.Model.Widget"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnWidgetLoaded(Mindroute.Core.Model.Widget)">
            <summary>
              Stores a <see cref="T:Mindroute.Core.Model.Widget"/> in the cache.
            </summary>
            <param name="widget">The <see cref="T:Mindroute.Core.Model.Widget"/> to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnWidgetsLoad(System.Int32)">
            <summary>
            Gets widgets from the cache.
            </summary>
            <param name="dashboardID">ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/>.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Widget"/> objects or <c>null</c> if not found in cache.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnWidgetsLoaded(System.Int32,System.Collections.Generic.List{Mindroute.Core.Model.Widget})">
            <summary>
            Store widgets in cache.
            </summary>
            <param name="dashboardID">ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/> item.</param>
            <param name="widgets">The list of <see cref="T:Mindroute.Core.Model.Widget"/> items to store.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnWidgetRemoved(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Widget"/> has been removed.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Widget"/></param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnWidgetUpdated(Mindroute.Core.Model.Widget)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Widget"/> has been updated.
            </summary>
            <param name="widget">The updated <see cref="T:Mindroute.Core.Model.Widget"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnWidgetInserted(Mindroute.Core.Model.Widget)">
            <summary>
            Clears the cache when a <see cref="T:Mindroute.Core.Model.Widget"/> has been inserted.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnTagsLoad(Mindroute.Core.Model.Content)">
            <summary>
              Gets the list of tags for a <see cref="T:Mindroute.Core.Model.Content"/> item from the cache.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item</param>
            <returns>Returns an list of tags.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CacheService.OnTagsLoaded(Mindroute.Core.Model.Content,System.Collections.Generic.IList{System.String})">
            <summary>
            Stores the list of <see cref="T:Mindroute.Core.Model.Comment"/> for a <see cref="T:Mindroute.Core.Model.Content"/> item in the cache.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item</param>
            <param name="comments">The <see cref="T:Mindroute.Core.Model.Comment"/> objects to store in the cache.</param>
        </member>
        <member name="P:Mindroute.Core.Services.CacheService.Hits">
            <summary>
            Gets the total number of cache hits.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Services.CacheService.Misses">
            <summary>
            Gets the total number of cache misses.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Services.CacheService.Items">
            <summary>
            Gets the total number of items in the cache.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Services.BlobService">
            <summary>
              Service layer for blobs.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.#ctor(Mindroute.Core.Blobs.IBlobProvider,Mindroute.Core.Repositories.SqlServer.IBlobRepository,Mindroute.Core.Services.FullTextService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.BlobService"/> class.
            </summary>
            <param name="blobProvider">An object implementing the <see cref="T:Mindroute.Core.Blobs.IBlobProvider"/> interface.</param>
            <param name="blobRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.SqlServer.IBlobRepository"/> interface.</param>
            <param name="fullTextService">An instance of the <see cref="T:Mindroute.Core.Services.FullTextService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.Exists(System.Guid)">
            <summary>
            Checks if the specified blob exists.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.Get(System.Guid)">
            <summary>
            Gets a <see cref="T:Mindroute.Core.Model.Blob"/> object from the repository.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Blob"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.GetData(System.Guid)">
            <summary>
            Returns the blob data as a <see cref="T:System.IO.FileInfo"/> object. To avoid corrupting the blob storage, the file returned from this method should not be modified or deleted.
            </summary>
            <param name="id">ID of the blob.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object if the blob exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.GetData(System.Guid,System.IO.Stream)">
            <summary>
            Writes the binary data of the blob to the specified output stream.
            </summary>
            <param name="id">ID of the blob.</param>
            <param name="output">The output stream where the data should be written.</param>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.GetData(System.Guid,System.String)">
            <summary>
            Writes the binary data of the blob to the specified file path.
            </summary>
            <param name="id">ID of the blob.</param>
            <param name="path">The file path where the data should be written.</param>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.Insert(Mindroute.Core.Model.Blob,System.String)">
            <summary>
            Inserts a blob from a file path.
            </summary>
            <param name="path">The file path of the blob to insert.</param>
            <returns>A unique identifier for the inserted blob.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.Insert(Mindroute.Core.Model.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob in the repository.
            </summary>
            <param name="blob">The blob to insert.</param>
            <param name="input">The input stream where from which the data should be read.</param>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.Remove(System.Guid)">
            <summary>
              Permanently removes a blob from the repository.
            </summary>
            <param name="id">ID of the blob to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.NewComb">
            <summary>
            Creates a sequential Guid based on the system time, also referred to as a Comb (Combined Guid/Timestamp). 
            </summary>
            <returns>A new Comb.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.BlobService.Search(Mindroute.Core.Search.Query)">
            <summary>
            Performs a search according to the specified <see cref="T:Mindroute.Core.Search.Query"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.Query"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="N:Mindroute.Core.Blobs"/>s.</returns>
        </member>
        <member name="P:Mindroute.Core.Services.BlobService.TotalSize">
            <summary>
            Gets the size, in bytes, of all blobs in the repository.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Services.FunctionService">
            <summary>
              Service layer for <see cref="T:Mindroute.Core.Functions.Function"/> objects.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Services.ExtensionService">
            <summary>
              Service layer for <see cref="T:Mindroute.Core.Model.Extension"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.ExtensionService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IExtensionRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.ExtensionService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="extensionRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IExtensionRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ExtensionService.Get``1">
            <summary>
              Gets an <see cref="T:Mindroute.Core.Model.Extension"/> object from the repository.
            </summary>
            <typeparam name="T">The type of the extension to return.</typeparam>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Extension"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ExtensionService.Get``1(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Extension"/> object from the repository.
            </summary>
            <param name="id">Full name of the extension, e.g. Mindroute.Core.Plugins.TestPlugin.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Extension"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ExtensionService.GetExtensions">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Extension"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Extension"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ExtensionService.Remove(System.String)">
            <summary>
            Removes a <see cref="T:Mindroute.Core.Model.Extension"/> from the repository.
            </summary>
            <param name="id">The full name of the <see cref="T:Mindroute.Core.Model.Extension"/> to remove, e.g. Mindroute.Core.Plugins.TestPlugin.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ExtensionService.Update(Mindroute.Core.Model.Extension)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Extension"/> in the datasource.
            </summary>
            <param name="extension"><see cref="T:Mindroute.Core.Model.Extension"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.FunctionService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IExtensionRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.FunctionService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="extensionRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IExtensionRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.FunctionService.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Functions.Function"/> object from the repository.
            </summary>
            <param name="id">Full name of the daemon, e.g. Mindroute.Core.Daemons.TestDaemon.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Daemons.Daemon"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.FunctionService.GetAll">
            <summary>
              Gets the list of registered <see cref="T:Mindroute.Core.Functions.Function"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Functions.Function"/> objects.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.FullTextService">
            <summary>
              Service layer for managing the fulltext index.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.#ctor(Mindroute.Core.Services.JobService,Mindroute.Core.Services.PluginService,Mindroute.Core.FullText.IFullTextProvider)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.FullTextService"/> class.
            </summary>
            <param name="jobService">An instance of the <see cref="T:Mindroute.Core.Services.JobService"/> class.</param>
            <param name="pluginService">An instance of the <see cref="T:Mindroute.Core.Services.PluginService"/> class.</param>
            <param name="fullTextProvider">An object implementing the <see cref="T:Mindroute.Core.FullText.IFullTextProvider"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.AddToIndex(Mindroute.Core.Model.Blob)">
            <summary>
            Adds a blob to the fulltext index.
            </summary>
            <param name="blob"></param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.AddToIndex(System.Collections.Generic.List{Mindroute.Core.Model.Blob},System.Boolean)">
            <summary>
            Adds many blobs to the fulltext index.
            </summary>
            <param name="blobs"></param>
            <param name="async">
            <c>true</c> to queue indexing for later processing by the <see cref="T:Mindroute.Core.Daemons.FullTextIndexDaemon"/>
            or <c>false</c> to index the blobs immediately.
            </param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.RemoveFromIndex(Mindroute.Core.Model.Blob)">
            <summary>
            Remove blob from fulltext index.
            </summary>
            <param name="blob"></param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.AddToIndex(Mindroute.Core.Model.Content)">
            <summary>
            Adds a content item to the fulltext index.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item to add.</param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.AddToIndex(System.Collections.Generic.List{Mindroute.Core.Model.Content},System.Boolean)">
            <summary>
            Adds many content items to the fulltext index.
            </summary>
            <param name="async">
            <c>true</c> to queue indexing for later processing by the <see cref="T:Mindroute.Core.Daemons.FullTextIndexDaemon"/>
            or <c>false</c> to index the items immediately.
            </param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.RemoveFromIndex(Mindroute.Core.Model.Content)">
            <summary>
            Remove content from fulltext index.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.AddToIndex(Mindroute.Core.Model.Comment)">
            <summary>
            Adds a comment to the fulltext index.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.AddToIndex(System.Collections.Generic.List{Mindroute.Core.Model.Comment},System.Boolean)">
            <summary>
            Adds many comments to the fulltext index.
            </summary>
            <param name="comments"></param>
            <param name="async">
            <c>true</c> to queue indexing for later processing by the <see cref="T:Mindroute.Core.Daemons.FullTextIndexDaemon"/>
            or <c>false</c> to index the comments immediately.
            </param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.RemoveFromIndex(Mindroute.Core.Model.Comment)">
            <summary>
            Remove comment from fulltext index.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.GetFromIndex(Mindroute.Core.FullText.FullTextCatalog,System.String)">
            <summary>
            Get a <see cref="T:Mindroute.Core.FullText.FullTextDocument"/> from the fulltext index.
            </summary>
            <param name="catalog"></param>
            <param name="key"></param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.Optimize">
            <summary>
            Optimizes the fulltext index.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.Rebuild">
            <summary>
            Rebuilds the fulltext index.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.RebuildAsync">
            <summary>
            Rebuilds the fulltext index. This is done spinning another thread.
            </summary>
            <param name="catalog"></param>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.Search(Mindroute.Core.Search.ContentQuery)">
            <summary>
            Search the fulltext index with the specified ContentQuery.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Services.FullTextService.Search(Mindroute.Core.Search.CommentQuery)">
            <summary>
            Search the fulltext index with the specified CommentQuery.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="P:Mindroute.Core.Services.FullTextService.ItemCount">
            <summary>
            Gets the number of items in the fulltext index.
            </summary>
            <returns>The number of items in the index.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.MailService">
            <summary>
              Service layer for sending email.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.MailService.#ctor(Mindroute.Core.Services.JobService,Mindroute.Core.Services.DaemonService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.MailService"/> class.
            </summary>
            <param name="jobService">An instance if the <see cref="T:Mindroute.Core.Services.JobService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.MailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends the specified <see cref="T:System.Net.Mail.MailMessage"/> using the smtp settings configured in the <see cref="T:Mindroute.Core.Daemons.MailDaemon"/> or the application configuration file.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send.</param>
        </member>
        <member name="M:Mindroute.Core.Services.MailService.Send(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient)">
            <summary>
            Sends the specified <see cref="T:System.Net.Mail.MailMessage"/> using the specified smtp settings.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send.</param>
            <param name="smtp">The <see cref="T:System.Net.Mail.SmtpClient"/> settings to use.</param>
        </member>
        <member name="M:Mindroute.Core.Services.MailService.Queue(System.Net.Mail.MailMessage)">
            <summary>
            Add a <see cref="T:System.Net.Mail.MailMessage"/> to the mail queue for processing by the <see cref="T:Mindroute.Core.Daemons.MailDaemon"/>.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to insert in the mail queue.</param>
            <returns>The <see cref="T:Mindroute.Core.Model.Job"/> that was stored in the mail queue.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.MailService.ConvertToJob(System.Net.Mail.MailMessage)">
            <summary>
            Converts a <see cref="T:System.Net.Mail.MailMessage"/> to a <see cref="T:Mindroute.Core.Model.Job"/> for storage in the mail queue.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to convert.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Job"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.MailService.ConvertFromJob(Mindroute.Core.Model.Job)">
            <summary>
            Converts a <see cref="T:Mindroute.Core.Model.Job"/> to a <see cref="T:System.Net.Mail.MailMessage"/>.
            </summary>
            <param name="job">The <see cref="T:Mindroute.Core.Model.Job"/> to convert.</param>
            <returns>A <see cref="T:System.Net.Mail.MailMessage"/>.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.JobService">
            <summary>
              Service layer for jobs.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.#ctor(Mindroute.Core.Repositories.IJobRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.JobService"/> class.
            </summary>
            <param name="jobRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IJobRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Job"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Job"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.SetPending(Mindroute.Core.Model.Job)">
            <summary>
            Resets a finished <see cref="T:Mindroute.Core.Model.Job"/> by setting its status to <see cref="F:Mindroute.Core.Model.JobStatus.Pending"/> and clearing the error count and message.
            </summary>
            <param name="job">The <see cref="T:Mindroute.Core.Model.Job"/> to start.</param>
            <returns><c>true</c> if the job could be reset, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.SetWorking(Mindroute.Core.Model.Job)">
            <summary>
            Starts a <see cref="T:Mindroute.Core.Model.Job"/> by setting its status to <see cref="F:Mindroute.Core.Model.JobStatus.Working"/>.
            </summary>
            <param name="job">The <see cref="T:Mindroute.Core.Model.Job"/> to start.</param>
            <returns><c>true</c> if the job could be started, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.SetFinished(Mindroute.Core.Model.Job,System.Boolean)">
            <summary>
            Mark a <see cref="T:Mindroute.Core.Model.Job"/> as finished by removing it from the queue, or optionally clearing the error count and setting the status to <see cref="F:Mindroute.Core.Model.JobStatus.Finished"/>.
            </summary>
            <param name="job">The <see cref="T:Mindroute.Core.Model.Job"/> to mark as finished.</param>
            <param name="keep"><c>false</c> to remove the finished item, or <c>true</c> to keep it in the queue with status <see cref="F:Mindroute.Core.Model.JobStatus.Finished"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.SetFailed(Mindroute.Core.Model.Job,System.Int32)">
            <summary>
            Mark a <see cref="T:Mindroute.Core.Model.Job"/> as failed by increasing the error count. Depending on the value of the <paramref name="maxErrors"/> parameter 
            the job status is set to either <see cref="F:Mindroute.Core.Model.JobStatus.Pending"/> to indicate that the job should be processed again or 
            <see cref="F:Mindroute.Core.Model.JobStatus.Finished"/> to indicate that no more attempts to process the job should be made.
            </summary>
            <param name="job">The <see cref="T:Mindroute.Core.Model.Job"/> to mark as failed.</param>
            <param name="maxErrors">The maximum number of errors to accept before setting the <see cref="P:Mindroute.Core.Model.Job.Status"/> to <see cref="F:Mindroute.Core.Model.JobStatus.Finished"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.GetByHandler(System.String,System.Nullable{System.Int32})">
            <summary>
              Gets pending jobs with the specified handler.
            </summary>
            <param name="handler">The handler for which to find jobs.</param>
            <param name="count">The maximum number of jobs to return, <c>null</c> to return all pending jobs for the handler.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Job"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.Search(Mindroute.Core.Search.JobQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.JobQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.JobQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of draft <see cref="T:Mindroute.Core.Model.Job"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.Insert(Mindroute.Core.Model.Job)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Job"/> object into the repository.
            </summary>
            <param name="job"><see cref="T:Mindroute.Core.Model.Job"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Job"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Services.JobService.Update(Mindroute.Core.Model.Job)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Job"/> in the datasource.
            </summary>
            <param name="job"><see cref="T:Mindroute.Core.Model.Job"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Services.DashboardService">
            <summary>
              Service layer for managing the dashboard and widgets.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IDashboardRepository,Mindroute.Core.Repositories.IWidgetRepository,Mindroute.Core.Services.LicenseService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.DashboardService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="dashboardRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IDashboardRepository"/>.</param>
            <param name="widgetRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IWidgetRepository"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.GetDashboard(System.Int32)">
            <summary>
            Returns a <see cref="T:Mindroute.Core.Model.Dashboard"/> tab by ID.
            </summary>
            <param name="id">ID of the dashboard to return.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Dashboard"/> object</returns>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.GetDashboards">
            <summary>
            Returns a list of all <see cref="T:Mindroute.Core.Model.Dashboard"/> objects in the repository.
            </summary>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Dashboard"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.GetDashboardsByUser(System.Nullable{System.Int32})">
            <summary>
            Get <see cref="T:Mindroute.Core.Model.Dashboard"/> tabs for the specified <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
            <param name="userID">The ID of the <see cref="T:Mindroute.Core.Model.User"/> to get <see cref="T:Mindroute.Core.Model.Dashboard"/> for. 
            Passing in <c>null</c> will retrieve the shared tabs.
            </param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Dashboard"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.GetWidget(System.Int32)">
            <summary>
            Gets a widget by specifing the <see cref="T:Mindroute.Core.Model.Widget"/> ID.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Widget"/>.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Widget"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.GetWidgetsByDashboard(System.Int32)">
            <summary>
            Gets a list of widgets by specifing the <see cref="T:Mindroute.Core.Model.Dashboard"/> ID.
            </summary>
            <param name="dashboardID">ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/> for which to return widgets.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Widget"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.InsertDashboard(Mindroute.Core.Model.Dashboard)">
            <summary>
              Inserts a new <see cref="T:Mindroute.Core.Model.Dashboard"/>.
            </summary>
            <param name="dashboard">The <see cref="T:Mindroute.Core.Model.Dashboard"/> to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.InsertWidget(System.Int32,Mindroute.Core.Model.Widget)">
            <summary>
              Inserts a widget on the specified <see cref="T:Mindroute.Core.Model.Dashboard"/>.
            </summary>
            <param name="dashboardID">The ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/> to insert the <see cref="!:widget"/> on.</param>
            <param name="widget">The <see cref="!:widget"/> to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.RemoveDashboard(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Dashboard"/> tab.
            </summary>
            <param name="dashboardID">The ID of the <see cref="T:Mindroute.Core.Model.Dashboard"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.RemoveWidget(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Widget"/> from its <see cref="T:Mindroute.Core.Model.Dashboard"/>
            </summary>
            <param name="widgetID">The ID of the <see cref="T:Mindroute.Core.Model.Widget"/> to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.UpdateDashboard(Mindroute.Core.Model.Dashboard)">
            <summary>
              Updates a <see cref="T:Mindroute.Core.Model.Dashboard"/> tab.
            </summary>
            <param name="dashboard">The <see cref="T:Mindroute.Core.Model.Dashboard"/> to update.</param>
        </member>
        <member name="M:Mindroute.Core.Services.DashboardService.UpdateWidget(Mindroute.Core.Model.Widget)">
            <summary>
              Updates a <see cref="T:Mindroute.Core.Model.Widget"/>
            </summary>
            <param name="widget">The <see cref="T:Mindroute.Core.Model.Widget"/> to update.</param>
        </member>
        <member name="T:Mindroute.Core.Services.LicenseService">
            <summary>
              Service layer for managing licenses.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.#ctor(Mindroute.Core.Services.SettingService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.LicenseService"/> class.
            </summary>
            <param name="settingService">An instance of the <see cref="T:Mindroute.Core.Services.SettingService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.Get">
            <summary>
            Gets the <see cref="T:Mindroute.Core.Model.License"/> information.
            </summary>
            <returns>A <see cref="T:Mindroute.Core.Model.License"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.Update">
            <summary>
            Updates the license information from the license server.
            </summary>
            <returns>The updated <see cref="T:Mindroute.Core.Model.License"/> object retrieved from the license server or <c>null</c> if the request failed.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.Register(System.String)">
            <summary>
            Registers a new license key and fetches the license from the license server.
            </summary>
            <param name="licenseKey">The license key of the license to register, or <c>null</c> to to register a trial license.</param>
            <returns>The <see cref="T:Mindroute.Core.Model.License"/> object retrieved from the license server or <c>null</c> if the request failed.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.GetSupportQueryString">
            <summary>
            Returns the querystring needed to autologin to the support site,
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.Set(System.String,System.Boolean)">
            <summary>
            Fetches the <see cref="T:Mindroute.Core.Model.License"/> information from the license server and stores it in the repository.
            </summary>
            <param name="licenseKey">The license key of the license, <c>null to request a new license.</c></param>
            <param name="register"><c>true</c> if the request is a registration, otherwise <c>false</c>.</param>
            <returns>The <see cref="T:Mindroute.Core.Model.License"/> object retrieved from the license server or <c>null</c> if the request failed.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.IsValid(Mindroute.Core.Model.License)">
            <summary>
            Returns true if the license could be verified and has not expired.
            </summary>
            <param name="license">License to validate.</param>
            <returns><c>true</c> if the license is valid; otherwise <c>false</c>.</returns>
            <remarks>Additional checks, such as number of sites, languages etc must be done at the application level.</remarks>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.VerifyKey(System.String)">
            <summary>
            Returns true if the license key is valid.
            </summary>
            <param name="licenseKey">The license key to verify.</param>
            <returns><c>true</c> if the license key is valid, otherwise <c>false</c></returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.VerifySignature(Mindroute.Core.Model.License)">
            <summary>
            Returns true if the cryptographic signature of the license is valid.
            </summary>
            <param name="license">The license to verify.</param>
            <returns><c>true</c> if the license is valid, otherwise <c>false</c></returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.GetDataToSign(Mindroute.Core.Model.License)">
            <summary>
            Extracts the data to sign from a license.
            </summary>
            <param name="license">The license</param>
            <returns>A <c>string</c> to sign.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.LicenseService.GetPhysicalAddress">
            <summary>
            Returns the Physical Address (MAC) of the network card.
            </summary>
            <returns>A string containing the physical address of the network card.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.DaemonService">
            <summary>
              Service layer for <see cref="T:Mindroute.Core.Daemons.Daemon"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.DaemonService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IExtensionRepository,Mindroute.Core.Services.UserService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.DaemonService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="extensionRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IExtensionRepository"/> interface.</param>
            <param name="userService">An instance of the <see cref="T:Mindroute.Core.Services.UserService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.DaemonService.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Daemons.Daemon"/> object from the repository.
            </summary>
            <param name="id">Full name of the daemon, e.g. Mindroute.Core.Daemons.TestDaemon.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Daemons.Daemon"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.DaemonService.GetAll">
            <summary>
              Gets the list of registered <see cref="T:Mindroute.Core.Daemons.Daemon"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Daemons.Daemon"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.DaemonService.Update(Mindroute.Core.Daemons.Daemon)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Daemons.Daemon"/> in the datasource.
            </summary>
            <param name="daemon"><see cref="T:Mindroute.Core.Daemons.Daemon"/> object to update.</param>
        </member>
        <member name="M:Mindroute.Core.Services.DaemonService.Update(Mindroute.Core.Daemons.Daemon,System.String)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Daemons.Daemon"/> in the datasource.
            </summary>
            <param name="daemon"><see cref="T:Mindroute.Core.Daemons.Daemon"/> object to update.</param>
            <param name="password">Password of the <see cref="T:Mindroute.Core.Model.User"/> to run the daemon as. Set to <c>null</c> if you dont want to change <see cref="T:Mindroute.Core.Model.User"/>.</param>
        </member>
        <member name="T:Mindroute.Core.Services.ImageService">
            <summary>
            Business logic for cropping, scaling and saving images.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.#ctor(Mindroute.Core.Services.BlobService)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Services.ImageService"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.CreateBitmap(Mindroute.Core.Model.Document)">
            <summary>
            Creates a bitmap for the specified <see cref="T:Mindroute.Core.Model.Document"/>.
            </summary>
            <param name="file">File item to create bitmap from.</param>
            <returns>A Bitmap object.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.CreateThumb(Mindroute.Core.Model.Document,System.Int32)">
            <summary>
            Creates a thumbnail for an image with the specified size.
            </summary>
            <param name="file">File item to create thumbnail of.</param>
            <param name="size">The image is scaled to fit in a square with dimensions size x size.</param>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> object pointing to the thumbnail.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.CreateThumb(Mindroute.Core.Model.Document,System.Int32,System.Int32)">
            <summary>
            Creates a thumbnail for an image with the specified width and height.
            </summary>
            <param name="file">File item to create thumbnail of.</param>
            <param name="width">The width of the thumbnail.</param>
            <param name="height">The height of the thumbnail.</param>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> object pointing to the thumbnail.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.CreateThumb(Mindroute.Core.Model.Document,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a thumbnail for an image by cropping it with the specified parameters.
            </summary>
            <param name="file">File item to create thumbnail of.</param>
            <param name="x">X coordinate to crop from.</param>
            <param name="y">Y coordinate to crop from.</param>
            <param name="width">The width of the cropped image.</param>
            <param name="height">The height of the cropped image.</param>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> object pointing to the thumbnail.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.Crop(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops an image.
            </summary>
            <param name="image">The image to crop.</param>
            <param name="x">X coordinate to crop from.</param>
            <param name="y">Y coordinate to crop from.</param>
            <param name="width">Width of the cropped image.</param>
            <param name="height">Height of the cropped image.</param>
            <returns>Returns the cropped image as a bitmap.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumb(Mindroute.Core.Model.Document,System.Int32)">
            <summary>
            Gets a thumbnail for a file. If no thumbnail exists, one is created.
            </summary>
            <param name="file">File to get thumbnail for.</param>
            <param name="size">Gets a thumbnail with dimensions size x size.</param>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> object pointing to the thumbnail.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumb(Mindroute.Core.Model.Document,System.Int32,System.Int32)">
            <summary>
            Gets a thumbnail for a file. If no thumbnail exists, one is created.
            </summary>
            <param name="file">File to get thumbnail for.</param>
            <param name="width">Width of the thumbnail.</param>
            <param name="height">Height of the thumbnail.</param>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> object pointing to the thumbnail.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumb(Mindroute.Core.Model.Document,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a cropped thumbnail for a file. If no thumbnail exists, one is created.
            </summary>
            <param name="file">File item to create thumbnail of.</param>
            <param name="x">X coordinate to crop from.</param>
            <param name="y">Y coordinate to crop from.</param>
            <param name="width">The width of the cropped image.</param>
            <param name="height">The height of the cropped image.</param>
            <returns>Returns a <see cref="T:System.IO.FileInfo"/> object pointing to the thumbnail.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumbExtension(Mindroute.Core.Model.Document)">
            <summary>
            Gets the thumbnail extension for a file.
            </summary>
            <param name="file">File to get thumbnail extension for.</param>
            <returns>The thumbnail extension.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumbFormat(Mindroute.Core.Model.Document)">
            <summary>
            Gets the thumbnail format for a file.
            </summary>
            <param name="file">File to get thumbnail format for.</param>
            <returns>The thumbnail image format.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumbPath(Mindroute.Core.Model.Document)">
            <summary>
            Gets the fully qualified path to the thumbnail location of the specified file with a placeholder for the size parameter, e.g. C:\Lemoon\App_Data\Cache\Thumbs\b\c\bc80dbbb-a2b9-44d3-a81c-6e0204e49326-{0}.jpg
            </summary>
            <param name="file">File to get thumbnail path for.</param>
            <returns>Returns the full path to the thumbnail image with a plcewcholder for the size.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumbPath(Mindroute.Core.Model.Document,System.Int32)">
            <summary>
            Gets the fully qualified path to the thumbnail location of the specified file, e.g. C:\Lemoon\App_Data\Cache\Thumbs\b\c\bc80dbbb-a2b9-44d3-a81c-6e0204e49326-100.jpg
            </summary>
            <param name="file">File to get thumbnail path for.</param>
            <param name="size">Size of the thumbnail.</param>
            <returns>Returns the full path to the thumbnail image.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumbPath(Mindroute.Core.Model.Document,System.Int32,System.Int32)">
            <summary>
            Gets the fully qualified path to the thumbnail location of the specified file, e.g. C:\Lemoon\App_Data\Cache\Thumbs\b\c\bc80dbbb-a2b9-44d3-a81c-6e0204e49326-640x480.jpg
            </summary>
            <param name="file">File to get thumbnail path for.</param>
            <param name="width">Width of the thumbnail.</param>
            <param name="height">Height of the thumbnail.</param>
            <returns>Returns the full path to the thumbnail image.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.GetThumbPath(Mindroute.Core.Model.Document,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the fully qualified path to the thumbnail location of the specified file, e.g. C:\Lemoon\App_Data\Cache\Thumbs\b\c\bc80dbbb-a2b9-44d3-a81c-6e0204e49326-100x200-440x280.jpg
            </summary>
            <param name="file">File to get thumbnail path for.</param>
            <param name="x">X coordinate to crop from.</param>
            <param name="y">Y coordinate to crop from.</param>
            <param name="width">The width of the cropped image.</param>
            <param name="height">The height of the cropped image.</param>
            <returns>Returns the full path to the thumbnail image.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.Save(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat,System.IO.FileInfo)">
            <summary>
            Saves the image.
            </summary>
            <param name="image">The image to save.</param>
            <param name="format">Format to use when saving the image.</param>
            <param name="destination">Location where the image should be saved.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ImageService.Scale(System.Drawing.Bitmap,System.Double)">
            <summary>
              Scales an image to a percentage of its original dimensions.
            </summary>
            <param name="image">The image to scale.</param>
            <param name="ratio">The scale ratio (a value between 0 and 1).</param>
            <returns>Returns a scaled image as a bitmap.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.ServiceLocator">
            <summary>
              A simple service locator, which just delegates activation requests to 
              the dependency injection container.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.ServiceLocator.Initialize(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Start the service locator with a Unity Container.
            </summary>
            <param name="container">A instance of the Unity IUnityContainer interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ServiceLocator.Get``1">
            <summary>
              Retrieves an instance of the specified type from the container.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <returns>Returns an instance of the specified type.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ServiceLocator.Get``1(System.String)">
            <summary>
              Retrieves an instance of the specified named type from the container.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="name">Name the type was registered with.</param>
            <returns>Returns an instance of the specified type.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ServiceLocator.GetAll``1">
            <summary>
            Retrieves all instances of the specified type from the container.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <returns>A list of the specified type.</returns>
        </member>
        <member name="T:Mindroute.Core.Helpers.StringHelper">
            <summary>
            Helper and extension methods for manipulating strings.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.AddTrailingSlash(System.String)">
            <summary>
            Adds a slash after the text if it does not already exists.
            </summary>
            <param name="original">Required. String expression from where a slash is added.</param>
            <returns>A string containing a trailing slash.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.Ellipsis(System.String,System.Int32)">
            <summary>
               Trims a string after a specific length and appends the 
               horizontal ellipsis character (U+2026) to the end of the string.
            </summary>
            <param name="input">Text to trim.</param>
            <param name="length">Number of characters to keep of the text.</param>
            <returns>Returns the trimmed string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.RemoveDoubleCharacter(System.String,System.Char)">
            <summary>
            Removes any double instances of the specified character. 
            So "--" becomes "-" if the character is '-'.
            </summary>
            <param name="text">The text with characters to remove.</param>
            <param name="character">The character to remove.</param>
            <returns>A string with duplicate characters removed.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.RemoveDuplicateWhiteSpace(System.String)">
            <summary>
            Removes duplicate white-space from the string. Also removes all leading and trailing whitespace. 
            </summary>
            <param name="text">The text with white-space to remove.</param>
            <returns>A string with duplicate white-space replaced with a single space or <c>null</c> if the text contained only whitespace.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.SplitUppercase(System.String)">
            <summary>
            Parses a camel cased or pascal cased string and returns an array 
            of the words within the string.
            </summary>
            <example>
            The string "PascalCasing" will return an array with two 
            elements, "Pascal" and "Casing".
            </example>
            <param name="source">The string to split.</param>
            <returns>An array of strings.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.SplitUppercaseToString(System.String)">
            <summary>
            Parses a camel cased or pascal cased string and returns a new 
            string with spaces between the words in the string.
            </summary>
            <example>
            The string "PascalCasing" will return the string "Pascal Casing".
            </example>
            <param name="source">The string to split.</param>
            <returns>The joined string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.ToPascalCase(System.String)">
            <summary>
            Converts text to pascal case.
            </summary>
            <example>
            The string "pascal case" will return the string "PascalCase".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.ToTitleCase(System.String)">
            <summary>
            Converts text to title case.
            </summary>
            <example>
            The string "title case" will return the string "Title Case".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.Transliterate(System.String)">
            <summary>
            Transliterate a Unicode string into ASCII.
            </summary>
            <param name="input">The string to transliterate.</param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.Left(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the left side of a string.
            </summary>
            <param name="str">Required. String expression from which the leftmost characters are returned.</param>
            <param name="length">Required. Integer greater than 0. Numeric expression 
            indicating how many characters to return. If 0, a zero-length string ("") 
            is returned. If greater than or equal to the number of characters in Str, 
            the entire string is returned. If str is null, this returns null.</param>
            <returns>The specified number of characters from the left side of a string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if str is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.Right(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="length">Required. Integer greater than 0. Numeric expression 
            indicating how many characters to return. If 0, a zero-length string ("") 
            is returned. If greater than or equal to the number of characters in Str, 
            the entire string is returned. If str is null, this returns null.</param>
            <returns>The specified number of characters from the right side of a string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if str is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.RightAfter(System.String,System.String)">
            <summary>
            Returns a string containing every character within a string after the 
            first occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="search">The string where the end of it marks the characters to return.  
            If the string is not found, the whole string is returned.</param>
            <returns>A string containing every character within the original string after the first occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.RightAfter(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a string containing every character within a string after the 
            first occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="search">The string where the end of it marks the characters to return.  
            If the string is not found, the whole string is returned.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string after the first occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.RightAfterLast(System.String,System.String)">
            <summary>
            Returns a string containing every character within a string after the 
            last occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="search">The string where the end of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <returns>A string containing every character within the original string after the last occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.RightAfterLast(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns a string containing every character within a string after the
            last occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="search">The string where the end of it marks the
            characters to return.  If the string is not found, the whole string is
            returned.</param>
            <param name="startIndex">The start index.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string after the last occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.LeftBefore(System.String,System.String)">
            <summary>
            Returns a string containing every character within a string before the 
            first occurrence of another string.
            </summary>
            <param name="str">Required. String expression from which the leftmost characters are returned.</param>
            <param name="search">The string where the beginning of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <returns>A string containing every character within the original string before the first occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.LeftBefore(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a string containing every character within a string before the 
            first occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the leftmost characters are returned.</param>
            <param name="search">The string where the beginning of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string before the first occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.LeftBeforeLast(System.String,System.String)">
            <summary>
            Returns a string containing every character within a string before (left) the 
            last occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the leftmost characters are returned.</param>
            <param name="search">The string where the beginning of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <returns>A string containing every character within the original string before the last occurrence of the search string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.LeftBeforeLast(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a string containing every character within a string before (left) the
            last occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the leftmost characters are returned.</param>
            <param name="search">The string where the beginning of it marks the
            characters to return.  If the string is not found, the whole string is
            returned.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string before the last occurrence of the search string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns true if the the specified string contains the contained string.
            </summary>
            <param name="container">The container string.</param>
            <param name="contained">The contained string.</param>
            <param name="comparison">Case sensitivity.</param>
            <returns>Returns <code>true</code> if the container string contains the contained string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.IsNullOrEmpty(System.String)">
            <summary>
            Indicates if the specified string is <c>null</c> or an empty string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.NamedFormat(System.String,System.Object)">
            <summary>
            Formats a string using a named format string. Ex: {slug}
            </summary>
            <param name="format">String to format.</param>
            <param name="source">Source to replace the formats of. Ex: new { slug="my-slug } replaces the value {slug} to my-slug in the string to format.</param>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.Slugify(System.String,System.Boolean)">
            <summary>
            Returns a URL friendly version of the input string.
            </summary>
            <param name="input">The string to create url slug for</param>
            <param name="file">Set to <c>true</c> when the input string contains a filename and you want the slug to end with the extension of the filename, e.g. "uploaded-file.txt" or "uploaded-file.pdf".</param>
            <returns>An url friendly version of the input string.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.ToUnicode(System.String)">
            <summary>
            Decodes a string of one or more domain name labels encoded according to the Internationalizing Domain Names in Applications (IDNA) standard to a string of Unicode characters.
            </summary>
            <param name="ascii">One or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
            <returns>The Unicode equivalent of the IDNA substring specified by the ascii parameter.</returns>
        </member>
        <member name="M:Mindroute.Core.Helpers.StringHelper.ToAscii(System.String)">
            <summary>
            Encodes a string of one or more domain name labels that consist of Unicode characters to a string of Unicode characters in the US-ASCII character range.
            The string is formatted according to the Internationalizing Domain Names in Applications (IDNA) standard.
            </summary>
            <param name="unicode">An input string to convert, which consists of one or more domain name labels delimited with label separators.</param>
            <returns>The equivalent of the string specified by the unicode parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the Internationalizing Domain Names in Applications (IDNA) standard.</returns>
        </member>
        <member name="T:Mindroute.Core.Model.AccessControlEntry">
            <summary>
            An object representing an access contol entry (ACE).
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.AccessControlEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.AccessControlEntry.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.AccessControlEntry.UserID">
            <summary>
              Gets or sets the user ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.AccessControlEntry.RoleID">
            <summary>
              Gets or sets the role ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.AccessControlEntry.EntityType">
            <summary>
              Gets or sets the EntityType for the access control entry.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.AccessControlEntry.EntityID">
            <summary>
              Gets or sets the entity ID for the access control entry.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.AccessControlEntry.AllowMask">
            <summary>
              Gets or sets the bitmask containing the Allow permissions for the user/role.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.AccessControlEntry.DenyMask">
            <summary>
              Gets or sets the bitmask containing the Deny permissions for the user/role.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Comment">
            <summary>
              An object representing Comments.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Comment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Comment"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Comment.AutoFeedItem(System.Boolean)">
            <summary>
            Sets the values for title and content.
            </summary>
            <param name="showFull">A value specifying if the feed item should display the full text or an excerpt.</param>
            <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Comment.AutoSearchText">
            <summary>
            Returns an automatically calculated text that should be indexed for full text search. 
            </summary>
            <returns>A string that should be indexed for full text search.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Comment.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.ID">
            <summary>
             Gets the ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.ParentID">
            <summary>
             Gets or sets the parent ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.ContentID">
            <summary>
             Gets or sets the content ID of the associated <see cref="P:Mindroute.Core.Model.Comment.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.LanguageID">
            <summary>
             Gets or sets the language ID of the associated <see cref="P:Mindroute.Core.Model.Comment.Content"/> item.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Content">
            <summary>
             Gets the associated <see cref="P:Mindroute.Core.Model.Comment.Content"/> item.
            </summary>
            <remarks>
            This property is lazy loaded.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Title">
            <summary>
             Gets or sets the title.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Body">
            <summary>
             Gets or sets the body text.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Created">
            <summary>
              Gets or sets the date the <see cref="T:Mindroute.Core.Model.Comment"/> was created.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.CreatedBy">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> that created the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>   
            <remarks>This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Comment.CreatedByID"/> if you only need the id of the user.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.CreatedByID">
            <summary>
              Gets or sets the ID of the User that created the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Name">
            <summary>
             Gets or sets the name of the person that created the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Email">
            <summary>
             Gets or sets the email address of the person that created the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Url">
            <summary>
             Gets or sets the URL of the person that created the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Status">
            <summary>
             Gets or sets the status of the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.Modified">
            <summary>
            Gets or sets the date (UTC) the comment was last modified.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.ModifiedBy">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> that last modified the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>   
            <remarks>This property is lazy loaded, use <see cref="P:Mindroute.Core.Model.Comment.ModifiedByID"/> if you only need the id of the user.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Comment.ModifiedByID">
            <summary>
            Gets or sets the ID of the <see cref="T:Mindroute.Core.Model.User"/> that last modified the <see cref="T:Mindroute.Core.Model.Comment"/>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.ContentType">
            <summary>
              An object representing a content type.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.ContentType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.ContentType"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.ContentType.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.Boost">
            <summary>
            Gets the boost factor for the fulltext index.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.Commenting">
            <summary>
            Gets or sets the default comment status for <see cref="T:Mindroute.Core.Model.Content"/> items 
            with this <see cref="T:Mindroute.Core.Model.ContentType"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.DisplayInMenu">
            <summary>
             Gets or sets a value indicating whether <see cref="T:Mindroute.Core.Model.Content"/> items 
             with this <see cref="T:Mindroute.Core.Model.ContentType"/> should be displayed in menus.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.Template">
            <summary>
             Gets or sets the template to use when rendering <see cref="T:Mindroute.Core.Model.Content"/> items of this <see cref="T:Mindroute.Core.Model.ContentType"/>.
             If no template has been set, the template of the <see cref="T:Mindroute.Core.Model.Site"/> is used.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.OrderBy">
            <summary>
            Gets or sets the order in which to arrange child items. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.AllowedChildren">
            <summary>
             Gets or sets the list of allowed child <see cref="T:Mindroute.Core.Model.ContentType"/> items. 
             The list contains the ID of the allowed content types.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.Type">
            <summary>
            Gets the <see cref="P:Mindroute.Core.Model.ContentType.Type"/> of the <see cref="T:Mindroute.Core.Model.Content"/> item represented by 
            the <see cref="T:Mindroute.Core.Model.ContentType"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.IsAbstract">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item represented by the 
            <see cref="T:Mindroute.Core.Model.ContentType"/> is abstract, i.e. can not be instantiated.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.IsLoaded">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Content"/> item represented by the 
            <see cref="T:Mindroute.Core.Model.ContentType"/> has been loaded into the AppDomain.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.IsRoutable">
            <summary>
             Gets or sets a value indicating whether <see cref="T:Mindroute.Core.Model.Content"/> items 
             with this <see cref="T:Mindroute.Core.Model.ContentType"/> can be accessed by url.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.IsSearchable">
            <summary>
             Gets or sets a value indicating whether <see cref="T:Mindroute.Core.Model.Content"/> items 
             with this <see cref="T:Mindroute.Core.Model.ContentType"/> is searchable.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.IsTaggingEnabled">
            <summary>
            Gets or sets a value indicating whether tagging is enabled on the <see cref="T:Mindroute.Core.Model.ContentType"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.Children">
            <summary>
            Gets a list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects that are derived from this <see cref="T:Mindroute.Core.Model.ContentType"/>.
            </summary>
            <remarks>This property is lazy loaded and read only.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.ContentType.Parent">
            <summary>
            Gets the parent type of the <see cref="T:Mindroute.Core.Model.ContentType"/>.
            </summary>
            <remarks>If the parent type is <c>object</c> then null is returned.</remarks>
        </member>
        <member name="T:Mindroute.Core.Model.RecursionMethod">
            <summary>
              Indicates the recursion method to use when traversing a hierarchy.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RecursionMethod.None">
            <summary>
            No recursion.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RecursionMethod.ItemOnly">
            <summary>
            The affected item only.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RecursionMethod.DescendantsOnly">
            <summary>
            Only descendants to the affected item.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.RecursionMethod.ItemAndDescendants">
            <summary>
            The affected item and its descendants.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Plugins.Plugin">
            <summary>
              Base class for plugins.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Plugins.Plugin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Plugins.Plugin"/> class.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.CacheService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.CacheService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.CommentService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.CommentService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.ContentService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.ContentService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.ContentTypeService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.ContentTypeService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.DaemonService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.DaemonService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.PluginService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.PluginService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.PermissionService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.PermissionService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.SettingService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.SettingService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.SiteService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.SiteService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.UserService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.UserService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.JobService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.JobService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.MailService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.MailService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.ImageService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.ImageService"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Plugins.Plugin.BlobService">
            <summary>
            Gets a reference to the <see cref="P:Mindroute.Core.Plugins.Plugin.BlobService"/>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Site">
            <summary>
              An object representing a Site.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Site.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Site"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Site.DeepClone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Site.ID">
            <summary>
             Gets the ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.LanguageID">
            <summary>
             Gets the ID of the site language.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.SystemName">
            <summary>
             Gets or sets the system name of the <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.IsDefault">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Site"/> is the default site of the installation.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.IsMultiLanguage">
            <summary>
              Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Site"/> has multiple languages.
            </summary>
            <remarks>
              This property is lazy loaded.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Site.LanguageCode">
            <summary>
             Gets or sets the ISO 639-1 two-letter lowercase language code for the <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.CountryCode">
            <summary>
             Gets or sets the ISO 3166 two-letter uppercase country code for the <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.DefaultContentID">
            <summary>
            Gets or sets the ID of the the "start page" for the <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.FallbackMode">
            <summary>
            Gets or sets the fallback mode to use for the site. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.Title">
            <summary>
             Gets or sets the <see cref="T:Mindroute.Core.Model.Site"/> title.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.Teaser">
            <summary>
             Gets or sets the teaser (description) text to use for the <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <remarks>The teaser text must not be more than 512 characters long.</remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Site.Template">
            <summary>
            Gets or sets the template to use when rendering <see cref="T:Mindroute.Core.Model.Content"/> items for this <see cref="T:Mindroute.Core.Model.Site"/>.
            The site template can be overriden by the template property of individual <see cref="T:Mindroute.Core.Model.ContentType"/> or 
            <see cref="T:Mindroute.Core.Model.Content"/> items.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.IsEnabled">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:Mindroute.Core.Model.Site"/> is enabled.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.OrderBy">
            <summary>
            Gets or sets the order in which to arrange the root <see cref="T:Mindroute.Core.Model.Content"/> items of the <see cref="T:Mindroute.Core.Model.Site"/>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Site.Weight">
            <summary>
              Gets or sets a value that decides the order in which the <see cref="T:Mindroute.Core.Model.Site"/> will appear in lists. 
              A lower weight value will float to the top of lists, while heavier weights will appear lower in lists. 
            </summary>
            <remarks>
              The language with the lowest weight will become the default langauge for the <see cref="T:Mindroute.Core.Model.Site"/>.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.Site.MetaData">
            <summary>
            Gets the meta data associated with the <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Tag">
            <summary>
            A class representing a tag. 
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Tag.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Tag"/> class with the specified tag name and tag count.
            </summary>
            <param name="name">Name of the tag.</param>
            <param name="count">Tag count.</param>
        </member>
        <member name="P:Mindroute.Core.Model.Tag.Name">
            <summary>
            Gets or sets the name of the tag.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Tag.Count">
            <summary>
            Gets or sets the tag count.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Tag.Weight">
            <summary>
            Gets or sets the relative weight of this tag.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Tag.Size">
            <summary>
            Gets or sets the font size of the tag.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.User">
            <summary>
              An object representing a user.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.User"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.User.IsInRole(System.String)">
            <summary>
            Determines whether the user belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <returns>True if the current user is a member of the specified role, otherwise False.</returns>
        </member>
        <member name="M:Mindroute.Core.Model.User.AutoValidate">
            <summary>
            Performs custom validation.
            Subclasses can override this method to supply their own implementation.
            </summary>
            <returns>A list of <see cref="T:Mindroute.Core.Validation.ValidationError"/> objects (empty if validation succeeds).</returns>
        </member>
        <member name="M:Mindroute.Core.Model.User.DeepClone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.User.ID">
            <summary>
             Gets the ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.DisplayName">
            <summary>
            Gets the display name of the user. This property returns the value of the <see cref="P:Mindroute.Core.Model.User.Name"/> property if available, 
            otherwise returns the value of the <see cref="P:Mindroute.Core.Model.User.Username"/> property.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Username">
            <summary>
             Gets or sets the username.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Email">
            <summary>
             Gets or sets the email.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Name">
            <summary>
             Gets or sets the full name (firstname lastname) of the <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.MetaData">
            <summary>
            Gets the meta data associated with the <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Created">
            <summary>
             Gets or sets the date the user was created.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.IsAdmin">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:Mindroute.Core.Model.User"/> is an administrator.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.IsApproved">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:Mindroute.Core.Model.User"/> can be authenticated.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.IsLockedOut">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.User"/> is locked out and unable to be validated. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.IsDeleted">
            <summary>
             Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.User"/> is deleted.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Comment">
            <summary>
             Gets or sets application-specific information for the <see cref="T:Mindroute.Core.Model.User"/>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Roles">
            <summary>
              Gets the list of roles the <see cref="T:Mindroute.Core.Model.User"/> is member of.
            </summary>
            <remarks>
            This property is lazy loaded and read only.
            </remarks>
        </member>
        <member name="P:Mindroute.Core.Model.User.IsWindowsUser">
            <summary>
            Gets a value indicating whether the user is a Windows user.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Guid">
            <summary>
            Gets the Globally Unique Identifier (GUID) of the user.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.IsSystemUser">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.User"/> is a built-in user.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.LastLogin">
            <summary>
             Gets or sets the date the <see cref="T:Mindroute.Core.Model.User"/> last logged in.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.LastSync">
            <summary>
             Gets the date the <see cref="T:Mindroute.Core.Model.User"/> was last synchronized with the authentication provider.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.ApplicationName">
            <summary>
            Gets the application name of the authentication provider for the <see cref="T:Mindroute.Core.Model.User"/>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.ProviderName">
            <summary>
            Gets the name of the authentication provider for the <see cref="T:Mindroute.Core.Model.User"/>. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.ProviderUserKey">
            <summary>
            Gets the user identifier from the authentication provider.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.User.Identity">
            <summary>
            Gets the identity of the current principal.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Model.Role">
            <summary>
              An object representing a security role.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Role.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Model.Role.AutoValidate">
            <summary>
            Performs custom validation.
            Subclasses can override this method to supply their own implementation.
            </summary>
            <returns>A list of <see cref="T:Mindroute.Core.Validation.ValidationError"/> objects (empty if validation succeeds).</returns>
        </member>
        <member name="M:Mindroute.Core.Model.Role.DeepClone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Mindroute.Core.Model.Role.ID">
            <summary>
             Gets the ID.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.Name">
            <summary>
             Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.Description">
            <summary>
             Gets or sets the description text.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.Created">
            <summary>
             Gets or sets the date the Role was created/imported.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.Modified">
            <summary>
             Gets or sets the date the Role was last modified.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.MetaData">
            <summary>
            Gets the meta data associated with the <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.IsWindowsRole">
            <summary>
            Gets a value indicating whether the role is a Windows role.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.Guid">
            <summary>
            Gets the Globally Unique Identifier (GUID) of the role.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.IsSystemRole">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindroute.Core.Model.Role"/> is a built-in role.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Model.Role.Users">
            <summary>
              Gets the members of the <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <remarks>
              This property is lazy loaded and read only.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Repositories.IPermissionRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IPermissionRepository.GetAccessControlList(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32})">
            <summary>
            Gets the access control list (ACL) for an entity.
            </summary>
            <param name="entityType">The entity type to get the ACL for.</param>
            <param name="entityID">The id of the entity to get the ACL for, NULL to get the global ACL for the entity type.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> objects</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IPermissionRepository.SetAccessControlList(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},System.Collections.Generic.IList{Mindroute.Core.Model.AccessControlEntry},Mindroute.Core.Model.RecursionMethod)">
            <summary>
            Sets the access control list (ACL) for an entity.
            </summary>
            <param name="entityType">The entity type to set the ACL for.</param>
            <param name="entityID">The id of the entity to set the ACL for, NULL to set the global ACL for the entity type.</param>  
            <param name="acl">The list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> items to be applied.</param>
            <param name="method">Indicates to which items we should apply the ACL.</param>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlPermissionRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IPermissionRepository"/> interface.
            </summary>  
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlPermissionRepository.AccessControlEntryColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlPermissionRepository.GetAccessControlList(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32})">
            <summary>
            Gets the access control list (ACL) for an entity.
            </summary>
            <param name="entityType">The entity type to get the ACL for.</param>
            <param name="entityID">The id of the entity to get the ACL for, NULL to get the global ACL for the entity type.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> objects</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlPermissionRepository.SetAccessControlList(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},System.Collections.Generic.IList{Mindroute.Core.Model.AccessControlEntry},Mindroute.Core.Model.RecursionMethod)">
            <summary>
            Sets the access control list (ACL) for an entity.
            </summary>
            <param name="entityType">The entity type to set the ACL for.</param>
            <param name="entityID">The id of the entity to set the ACL for, NULL to set the global ACL for the entity type.</param>
            <param name="acl">The list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> items to be applied.</param>
            <param name="method">Indicates to which items we should apply the ACL.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlPermissionRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.AccessControlEntry})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> items from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> items to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlPermissionRepository.AccessControlEntryColumn">
            <summary>
              Enumerate the columns for the AccessControlEntry table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.ICommentRepository"/> interface.
            </summary>    
        </member>
        <member name="T:Mindroute.Core.Repositories.ICommentRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Comment"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.ICommentRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Comment"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Comment"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Comment"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.ICommentRepository.Insert(Mindroute.Core.Model.Comment)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Comment"/> object into the repository.
            </summary>
            <param name="comment"><see cref="T:Mindroute.Core.Model.Comment"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.ICommentRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Comment"/> object and it's descendants from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <remarks>
              This will remove the object and can cause a cascading effect where multiple objects will be removed.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.ICommentRepository.Search(Mindroute.Core.Search.CommentQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Mindroute.Core.Search.CommentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.CommentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Comment"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.ICommentRepository.Update(Mindroute.Core.Model.Comment)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Comment"/> in the datasource.
            </summary>
            <param name="comment"><see cref="T:Mindroute.Core.Model.Comment"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.CommentColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Comment"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Comment"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.GetChildren(System.Int32)">
            <summary>
              Gets a list of child <see cref="T:Mindroute.Core.Model.Comment"/> objects from the repository.
            </summary>
            <param name="parentID">ID of the parent comment.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Comment"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.GetCount">
            <summary>
              Gets the total number of <see cref="T:Mindroute.Core.Model.Comment"/> items in the system.
            </summary>
            <returns>The total number of <see cref="T:Mindroute.Core.Model.Comment"/> items in the system.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.GetByContent(System.Int32,System.Int32)">
            <summary>
              Gets a list of <see cref="T:Mindroute.Core.Model.Comment"/> objects for a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="contentID">The translation ID.</param>
            <param name="languageID">The language ID.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Comment"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.Insert(Mindroute.Core.Model.Comment)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Comment"/> object into the repository.
            </summary>
            <param name="comment"><see cref="T:Mindroute.Core.Model.Comment"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Comment"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
            <remarks>
              This will remove the object and can cause a cascading effect where multiple objects will be removed.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.Search(Mindroute.Core.Search.CommentQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Mindroute.Core.Search.CommentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.CommentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Comment"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.Update(Mindroute.Core.Model.Comment)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Comment"/> in the datasource.
            </summary>
            <param name="comment"><see cref="T:Mindroute.Core.Model.Comment"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Comment})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Comment"/> from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Comment"/> to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlCommentRepository.CommentColumn">
            <summary>
              Enumerate the columns for the Comment table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlContentRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IContentRepository"/> interface.
            </summary>    
        </member>
        <member name="T:Mindroute.Core.Repositories.IContentRepository">
            <summary>
            Repository interface for <see cref="T:Mindroute.Core.Model.Content"/> items.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Delete(System.Int32)">
            <summary>
              Deletes all translations of a <see cref="T:Mindroute.Core.Model.Content"/> object and it's descendants, i.e. sets the Deleted flag.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to delete.</param>
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetAll(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
              Gets all <see cref="T:Mindroute.Core.Model.Content"/> items of the specified types from the repository.
              If a content item has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="contentTypes">The IDs of the <see cref="T:Mindroute.Core.Model.ContentSection"/> to return.</param>
            <param name="languageID">The language ID of the preferred translation to return.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Get(System.Int32,System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
              If the content item has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Get(System.String,System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
              If the content item has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetByPermalink(System.String,System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
              If the content item has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="permalink">Permalink of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetAncestors(System.Int32,System.Int32)">
            <summary>
              Get the ancestors of a <see cref="T:Mindroute.Core.Model.Content"/> item, starting with the root item and ending with the parent of the <see cref="T:Mindroute.Core.Model.Content"/> item.
              If an ancestor has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetArchive(Mindroute.Core.Search.ContentQuery)">
            <summary>
             Returns the result of a <see cref="T:Mindroute.Core.Search.ContentQuery"/> as an archive list. 
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.ContentQuery"/> object containing the search criteria.</param>
            <returns>Returns an <see cref="T:Mindroute.Core.Model.ArchiveList"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetDescendants(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
              Returns the descendants of a <see cref="T:Mindroute.Core.Model.Content"/> item. The items are sorted like a tree. 
              If a descendant has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="parentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get descendants.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, the entire hierarchy is returned.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetDraft(System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets a draft from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <param name="userID">User ID of the draft owner.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetSitemap(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
              Gets the sitemap of a <see cref="T:Mindroute.Core.Model.Site"/> (sorted like a tree). 
              If a <see cref="T:Mindroute.Core.Model.Content"/> item has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="siteID">ID of the <see cref="T:Mindroute.Core.Model.Site"/> for which to get sitemap.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 0 returns only the root items. 
              If depth is 1, the root items and their children are returned etc.
              Setting depth to <c>null</c>, returns the entire content hierarchy of the <see cref="T:Mindroute.Core.Model.Site"/>.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items. The items are sorted like a tree. </returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetTranslations(System.Int32)">
            <summary>
              Gets all translations of a <see cref="T:Mindroute.Core.Model.Content"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetVersion(System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets a specific version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <param name="version">The version to return.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.GetVersions(System.Int32,System.Int32)">
            <summary>
              Gets the version history for a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Insert(Mindroute.Core.Model.Content)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Content"/> item into the repository.
            </summary>
            <param name="content"><see cref="T:Mindroute.Core.Model.Content"/> item to insert.</param>
            <remarks>
              The <see cref="T:Mindroute.Core.Model.Content"/> item will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
              Move a <see cref="T:Mindroute.Core.Model.Content"/> object to a new site.
            </summary>
            <param name="sourceID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="sourceLanguageID">Language ID of <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="destinationLanguageID">Language ID of the destination site.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Move(System.Int32,System.Nullable{System.Int32})">
            <summary>
              Move a <see cref="T:Mindroute.Core.Model.Content"/> object to a new place in the content hierarchy.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="parentID">ID of the new parent, or null to move the <see cref="T:Mindroute.Core.Model.Content"/> item to the top of the hierarchy.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Content"/> object and it's descendants from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <remarks>
              This will remove the object and can cause a cascading effect where multiple objects will be removed.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.RemoveDraft(System.Int32,System.Int32,System.Int32)">
            <summary>
              Permanently removes a draft from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="userID">User ID of the draft owner.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.RemoveTranslation(System.Int32,System.Int32)">
            <summary>
              Permanently removes a translation of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.RemoveVersion(System.Int32,System.Int32,System.Int32)">
            <summary>
              Permanently removes an entry from the version history.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="version">The version to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.IsOnlyReference(System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
              Returns true if the only reference to the specified blob is the content item specified by <paramref name="id"/>, <paramref name="languageId"/> and <paramref name="version"/>.
            </summary>
            <param name="blobID">ID of the blob.</param>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="version">The version number.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Restore(System.Int32)">
            <summary>
              Restores a deleted <see cref="T:Mindroute.Core.Model.Content"/> object and it's descendants, i.e. clears the Deleted flag.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <remarks>
            This will restore the object and can cause a cascading effect where multiple objects will be restored.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Search(Mindroute.Core.Search.ContentQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.ContentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.ContentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
            <remarks>The Search method verifies permissions at the repository level.</remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Search(Mindroute.Core.Search.DraftQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.DraftQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.DraftQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of draft <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Update(Mindroute.Core.Model.Content)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Content"/> in the datasource.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.UpdateContentType(System.Int32,System.String)">
            <summary>
              Updates the content type of an existing Content item.
            </summary>
            <param name="id">ID of <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="contentTypeID">The content type ID to set.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IContentRepository.Publish(Mindroute.Core.Model.Content)">
            <summary>
              Publishes the specified draft.
            </summary>
            <param name="draft">Draft to publish.</param>
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.ContentColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Delete(System.Int32)">
            <summary>
              Deletes all translations of a <see cref="T:Mindroute.Core.Model.Content"/> item and it's descendants from the repository, i.e. sets the Deleted flag.
            </summary>
            <param name="id">ID (primary key).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetAll(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
              Gets all <see cref="T:Mindroute.Core.Model.Content"/> items of the specified types from the repository.
              If a content item has not been translated to the specified language, this method falls back to an existing translation.
            </summary>
            <param name="contentTypes">The IDs of the <see cref="T:Mindroute.Core.Model.ContentSection"/> to return.</param>
            <param name="languageID">The language ID of the preferred translation to return.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Get(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            If the <see cref="T:Mindroute.Core.Model.Content"/> item has not been translated to the preferred language, it falls back to an existing translation.
            </summary>
            <param name="id">Content ID (unique identifier).</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Get(System.String,System.Int32)">
            <summary>
            Gets a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            If the <see cref="T:Mindroute.Core.Model.Content"/> item has not been translated to the preferred language, it falls back to an existing translation.
            </summary>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetByPermalink(System.String,System.Int32)">
            <summary>
            Gets a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            If the <see cref="T:Mindroute.Core.Model.Content"/> item has not been translated to the preferred language, it falls back to an existing translation.
            </summary>
            <param name="permalink">Permalink of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetVersion(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a specific version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            </summary>
            <param name="id">Content ID.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="version">The version to return.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetVersions(System.Int32,System.Int32)">
            <summary>
            Gets the version history for a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <param name="languageID">The ISO 639-1 two-letter language code for the language.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetDraft(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a draft from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="userID">User ID of the draft owner.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetSitemap(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
              Gets the sitemap of a <see cref="T:Mindroute.Core.Model.Site"/> (sorted like a tree).
              If a <see cref="T:Mindroute.Core.Model.Content"/> item has not been translated to the specified language, this method tries to fall back to an existing translation.
            </summary>
            <param name="siteID">ID of the <see cref="T:Mindroute.Core.Model.Site"/> for which to get sitemap.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 0 returns only the root items. 
              If depth is 1, the root items and their children are returned etc.
              Setting depth to <c>null</c>, returns the entire content hierarchy of the <see cref="T:Mindroute.Core.Model.Site"/>.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items. The items are sorted like a tree. </returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetDescendants(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
              Returns the descendants of a <see cref="T:Mindroute.Core.Model.Content"/> item. The items are sorted like a tree. 
              If a descendant has not been translated to the specified language, this method tries to fall back to an existing translation.
            </summary>
            <param name="parentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get descendants.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, the entire hierarchy is returned.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetAncestors(System.Int32,System.Int32)">
            <summary>
            Get the ancestors of a <see cref="T:Mindroute.Core.Model.Content"/> item, starting with the root item and ending with the parent of the <see cref="T:Mindroute.Core.Model.Content"/> item.
            If an ancestor has not been translated to the preferred language, it falls back to an existing translation.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetTranslations(System.Int32)">
            <summary>
            Gets all translations of a <see cref="T:Mindroute.Core.Model.Content"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Insert(Mindroute.Core.Model.Content)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Content"/> object into the repository.
            </summary>
            <param name="content"><see cref="T:Mindroute.Core.Model.Content"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.IsOnlyReference(System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
              Returns true if the only reference to the specified blob is the content item specified by <paramref name="id"/>, <paramref name="languageId"/> and <paramref name="version"/>.
            </summary>
            <param name="blobID">ID of the blob.</param>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="version">The version number.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Move(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Move a <see cref="T:Mindroute.Core.Model.Content"/> object to a new place in the content hierarchy.
            </summary>
            <param name="id">ID of <see cref="T:Mindroute.Core.Model.Content"/> object to move.</param>
            <param name="parentID">The new parent id of the <see cref="T:Mindroute.Core.Model.Content"/>, or null to move the <see cref="T:Mindroute.Core.Model.Content"/> item to the top of the hierarchy.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
              Move a <see cref="T:Mindroute.Core.Model.Content"/> object to a new site.
            </summary>
            <param name="sourceID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="sourceLanguageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="destinationLanguageID">Language ID of the destination site.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Content"/> object and it's descendants from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.RemoveDraft(System.Int32,System.Int32,System.Int32)">
            <summary>
            Permanently removes a draft from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <param name="languageID">The language ID.</param>
            <param name="userID">User ID of the draft owner</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.RemoveTranslation(System.Int32,System.Int32)">
            <summary>
              Permanently removes a translation from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.RemoveVersion(System.Int32,System.Int32,System.Int32)">
            <summary>
              Permanently removes an entry from the version history.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="version">The version to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Restore(System.Int32)">
            <summary>
              Restores a deleted <see cref="T:Mindroute.Core.Model.Content"/> object and it's descendants, i.e. clears the Deleted flag.
            </summary>
            <param name="id">ID (primary key).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.GetArchive(Mindroute.Core.Search.ContentQuery)">
            <summary>
             Returns the result of a <see cref="T:Mindroute.Core.Search.ContentQuery"/> as an archive list. 
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.ContentQuery"/> object containing the search criteria.</param>
            <returns>Returns an <see cref="T:Mindroute.Core.Model.ArchiveList"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Search(Mindroute.Core.Search.ContentQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Mindroute.Core.Search.ContentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.ContentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.BuildJoinAndWhere(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,Mindroute.Core.Search.ContentQuery)">
            <summary>
            Private helper method for building SQL, used by Search() and GetArchive().
            </summary>
            <param name="db">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> on which to set parameters.</param>
            <param name="cmd">The <see cref="T:System.Data.Common.DbCommand"/> on which to set parameters.</param>
            <param name="query">The <see cref="T:Mindroute.Core.Search.ContentQuery"/> which contains parameters to set.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Search(Mindroute.Core.Search.DraftQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Mindroute.Core.Search.DraftQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.DraftQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Update(Mindroute.Core.Model.Content)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Content"/> in the datasource.
            </summary>
            <param name="content"><see cref="T:Mindroute.Core.Model.Content"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Publish(Mindroute.Core.Model.Content)">
            <summary>
              Publishes a draft <see cref="T:Mindroute.Core.Model.Content"/>.
            </summary>
            <param name="draft"><see cref="T:Mindroute.Core.Model.Content"/> draft to publish.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Content"/> items from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Content"/> to populate.</param>        
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.FillVersion(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Content"/> items from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Content"/> to populate.</param>        
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.SelectTranslation(System.Collections.Generic.List{Mindroute.Core.Model.Content},System.Int32)">
            <summary>
            Given a list of translations for a <see cref="T:Mindroute.Core.Model.Content"/> item, selects the preferred language if available.
            Otherwise falls back to the language with lowest weight.
            </summary>
            <param name="translations">The list of translations.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.SelectTranslations(System.Collections.Generic.List{Mindroute.Core.Model.Content},System.Int32)">
            <summary>
            Given a list of translated <see cref="T:Mindroute.Core.Model.Content"/> items, selects the preferred language if available.
            Otherwise falls back to the language with lowest weight.
            </summary>
            <param name="translations">The list of content items.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.CreateInstance(System.Int32,System.String)">
            <summary>
            Initialize the "correct" content class based on content type ID.
            </summary>
            <param name="id">Used for logging if init fails.</param>
            <param name="contentTypeID">ID of the content type to create.</param>
            <returns></returns>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.ContentColumn">
            <summary>
              Enumerate the columns for the Content table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.TranslationColumn">
            <summary>
              Enumerate the columns for the Translation table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlContentRepository.VersionColumn">
            <summary>
              Enumerate the columns for the Version table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlSettingRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.ISettingRepository"/> interface.
            </summary>    
        </member>
        <member name="T:Mindroute.Core.Repositories.ISettingRepository">
            <summary>
              Repository interface for settings.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISettingRepository.Get(System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Gets a setting value from the repository.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to get a global setting..</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="systemSetting"><c>True</c> to get a system setting, otherwise <c>false</c>.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.PersistedValue"/> containing the value of the setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISettingRepository.Get(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets settings value from the repository.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to get a global setting..</param>
            <param name="systemSetting"><c>True</c> to get a system setting, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.PersistedValue"/> containing the values of the setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISettingRepository.Insert(System.Nullable{System.Int32},System.String,System.Boolean,Mindroute.Core.Model.PersistedValue)">
            <summary>
            Inserts a setting into the repository.
            </summary>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/> or <c>null</c> to insert a global setting.</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="systemSetting"><c>True</c> to insert a system setting, otherwise <c>false</c>.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISettingRepository.Remove(System.Nullable{System.Int32},System.String)">
            <summary>
              Permanently removes a setting from the repository.
            </summary>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/> or <c>null</c> to remove a global setting.</param>
            <param name="name">Setting name (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISettingRepository.Update(System.Nullable{System.Int32},System.String,System.Boolean,Mindroute.Core.Model.PersistedValue)">
            <summary>
              Updates an existing setting in the datasource.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to update a global setting..</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="systemSetting"><c>True</c> to update a system setting, otherwise <c>false</c>.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSettingRepository.Get(System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Gets a setting value from the repository.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to get a global setting..</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="systemSetting"><c>True</c> to get a system setting, otherwise <c>false</c>.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.PersistedValue"/> containing the value of the setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSettingRepository.Get(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets a setting value from the repository.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to get a global setting..</param>
            <param name="systemSetting"><c>True</c> to get a system setting, otherwise <c>false</c>.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.PersistedValue"/> containing the value of the setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSettingRepository.Insert(System.Nullable{System.Int32},System.String,System.Boolean,Mindroute.Core.Model.PersistedValue)">
            <summary>
            Inserts a setting into the repository.
            </summary>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/> or <c>null</c> to insert a global setting.</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="systemSetting"><c>True</c> to insert a system setting, otherwise <c>false</c>.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSettingRepository.Remove(System.Nullable{System.Int32},System.String)">
            <summary>
              Permanently removes a setting from the repository.
            </summary>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/> or <c>null</c> to remove a global setting.</param>
            <param name="name">Setting name (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSettingRepository.Update(System.Nullable{System.Int32},System.String,System.Boolean,Mindroute.Core.Model.PersistedValue)">
            <summary>
              Updates an existing setting in the datasource.
            </summary>
            <param name="siteID">Site ID or <c>null</c> to update a global setting..</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="systemSetting"><c>True</c> to update a system setting, otherwise <c>false</c>.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.ISiteRepository"/> interface.
            </summary>    
        </member>
        <member name="T:Mindroute.Core.Repositories.ISiteRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Site"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.GetAll">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Site"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.Insert(Mindroute.Core.Model.Site)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Site"/> object into the repository.
            </summary>
            <param name="site"><see cref="T:Mindroute.Core.Model.Site"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.AddLanguage(Mindroute.Core.Model.Site)">
            <summary>
              Adds a new language to a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="language"><see cref="T:Mindroute.Core.Model.Site"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Site"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.RemoveLanguage(System.Int32)">
            <summary>
              Permanently removes a language from a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="languageID">ID of the language to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.SetDefault(System.Int32)">
            <summary>
              Sets the default <see cref="T:Mindroute.Core.Model.Site"/> of the installation.
            </summary>
            <param name="id">The ID of the <see cref="T:Mindroute.Core.Model.Site"/> to set as the default <see cref="T:Mindroute.Core.Model.Site"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.Update(Mindroute.Core.Model.Site)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Site"/> in the datasource.
            </summary>
            <param name="site"><see cref="T:Mindroute.Core.Model.Site"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.ISiteRepository.HasContent(System.Int32)">
            <summary>
            Returns a value indicating whether the <see cref="T:Mindroute.Core.Model.Site"/> has any content or if it's empty.
            </summary>
            <param name="languageID">ID of the language to check.</param>
            <returns><c>True</c> if the site has content, otherwise <c>false</c>.</returns>
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.SiteColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.GetAll">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.Site"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.HasContent(System.Int32)">
            <summary>
            Returns a value indicating whether the <see cref="T:Mindroute.Core.Model.Site"/> has any content or if it's empty.
            </summary>
            <param name="languageID">ID of the language to check.</param>
            <returns><c>True</c> if the site has content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.Insert(Mindroute.Core.Model.Site)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Site"/> object into the repository.
            </summary>
            <param name="site"><see cref="T:Mindroute.Core.Model.Site"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.AddLanguage(Mindroute.Core.Model.Site)">
            <summary>
              Adds a new language to a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="site"><see cref="T:Mindroute.Core.Model.Site"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Site"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.RemoveLanguage(System.Int32)">
            <summary>
              Permanently removes a language from a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="languageID">ID of the language to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.SetDefault(System.Int32)">
            <summary>
              Sets the default <see cref="T:Mindroute.Core.Model.Site"/> of the installation.
            </summary>
            <param name="id">The ID of the <see cref="T:Mindroute.Core.Model.Site"/> to set as the default <see cref="T:Mindroute.Core.Model.Site"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.Update(Mindroute.Core.Model.Site)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Site"/> in the datasource.
            </summary>
            <param name="site"><see cref="T:Mindroute.Core.Model.Site"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.Fill(System.Data.IDataReader,System.Collections.Generic.List{Mindroute.Core.Model.Site})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Site"/> from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Site"/> to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.SiteColumn">
            <summary>
              Enumerate the columns for the Site table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlSiteRepository.LanguageColumn">
            <summary>
              Enumerate the columns for the Language table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IRepositoryProvider"/> interface.
            </summary>    
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.CanOpen">
            <summary>
            Check if we can open the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.HasRequiredServerProperties">
            <summary>
            Check that SQL Server >= 2005
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.IsEmpty">
            <summary>
            Check if the database is empty.
            </summary>
            <returns><c>true</c> if the database is empty; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.Install">
            <summary>
            Called on application setup to create tables and populate the database with reference data.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.GetInstallationChecks">
            <summary>
             Gets the list of installation checks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider with the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.Register(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Register the repository interfaces with the dependency injection container.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> object.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.RunScript(System.String)">
            <summary>
            Runs the specified SQL-script against the database.
            </summary>
            <param name="script">The SQL-script to run.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.RunScriptFile(System.String)">
            <summary>
            Runs the specified SQL-script against the database.
            </summary>
            <param name="path">The path to the SQL-script to run.</param>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.IsInstalled">
            <summary>
            Returns a value indicating if the provider has been installed.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.Version">
            <summary>
              Gets the version number of the repository.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Repositories.SqlServer.SqlRepositoryProvider.TotalSize">
            <summary>
            Gets the size, in bytes, of the repository.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.ITagRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Tag"/> objects.
            </summary> 
        </member>
        <member name="M:Mindroute.Core.Repositories.ITagRepository.Get(Mindroute.Core.Model.Content)">
            <summary>
              Gets the collection of tags for a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to get tags.</param>
            <returns>A collection of strings.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.ITagRepository.GetTopTags(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{Mindroute.Core.Model.ContentType},System.Nullable{System.Int32})">
            <summary>
              Gets the top (most used) tags for the specified parameters.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get tags. All tags for the content item and its descendants are returned.</param>
            <param name="languageID">Language ID of the site for which to get tags.</param>
            <param name="contentTypes">A list of content types for which to get tags.</param>
            <param name="count">The maximum number of tags to return, <c>null</c> to return all tags.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Tag"/> objects.</returns>
            <remarks>This method verifies Read permission on the content at the repository level.</remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.ITagRepository.Remove(System.Int32,System.String)">
            <summary>
            Permanently removes a tag from the repository.
            </summary>
            <param name="languageID">Language ID of the tag.</param>
            <param name="name">Name of the tag to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.ITagRepository.Rename(System.Int32,System.String,System.String)">
            <summary>
            Renames a tag in the repository.
            </summary>
            <param name="languageID">Language ID of the tag.</param>
            <param name="oldName">Name of the tag to rename.</param>
            <param name="newName">The new name of the tag.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.ITagRepository.Set(Mindroute.Core.Model.Content,System.Collections.Generic.IList{System.String})">
            <summary>
              Sets the tags on a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to set tags.</param>
            <param name="tags">The list of tags to set, <c>null</c> or empty list to clear tags from the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlTagRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.ITagRepository"/> interface.
            </summary>    
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlTagRepository.Get(Mindroute.Core.Model.Content)">
            <summary>
              Gets the list of tags for a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to get tags.</param>
            <returns>A collection of strings.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlTagRepository.GetTopTags(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{Mindroute.Core.Model.ContentType},System.Nullable{System.Int32})">
            <summary>
              Gets the top tags for an entire <see cref="T:Mindroute.Core.Model.Site"/> and optionally content type.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the site.</param>
            <param name="contentTypes">List of content types for which to get tags.</param>
            <param name="count">The maximum number of tags to return, <c>null</c> to return all tags.</param>
            <returns>Returns a dictionary with tag name as key and tag count as value.</returns>
            <remarks>This method verifies Read permission on the content at the repository level.</remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlTagRepository.Remove(System.Int32,System.String)">
            <summary>
            Permanently removes a tag from the repository.
            </summary>
            <param name="languageID">Language ID of the tag.</param>
            <param name="name">Name of the tag to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlTagRepository.Rename(System.Int32,System.String,System.String)">
            <summary>
            Renames a tag in the repository.
            </summary>
            <param name="languageID">Language ID of the tag.</param>
            <param name="oldName">Name of the tag to rename.</param>
            <param name="newName">The new name of the tag.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlTagRepository.Set(Mindroute.Core.Model.Content,System.Collections.Generic.IList{System.String})">
            <summary>
              Sets the tags on a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to set tags.</param>
            <param name="tags">The list of tags to set, <c>null</c> or empty list to clear tags from the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IRoleRepository"/> interface.
            </summary>    
        </member>
        <member name="T:Mindroute.Core.Repositories.IRoleRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.Role"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.AddUserToRole(System.Int32,System.Int32)">
            <summary>
              Adds a <see cref="T:Mindroute.Core.Model.User"/> to the specified <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="roleID">ID of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.RemoveUserFromRole(System.Int32,System.Int32)">
            <summary>
              Removes a <see cref="T:Mindroute.Core.Model.User"/> from the specified <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="roleID">ID of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.Get(System.Guid)">
            <summary>
              Gets a windows <see cref="T:Mindroute.Core.Model.Role"/> from the repository.
            </summary>
            <param name="guid">The Globally Unique Identifier (GUID) of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="name">Name of role.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.Insert(Mindroute.Core.Model.Role)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Role"/> object into the repository.
            </summary>
            <param name="role"><see cref="T:Mindroute.Core.Model.Role"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.Search(Mindroute.Core.Search.RoleQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.RoleQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.RoleQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Role"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IRoleRepository.Update(Mindroute.Core.Model.Role)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Role"/> in the datasource.
            </summary>
            <param name="role"><see cref="T:Mindroute.Core.Model.Role"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.RoleColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.AddUserToRole(System.Int32,System.Int32)">
            <summary>
              Adds a <see cref="T:Mindroute.Core.Model.User"/> to the specified <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="roleID">ID of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Get(System.Guid)">
            <summary>
              Gets a windows <see cref="T:Mindroute.Core.Model.Role"/> from the repository.
            </summary>
            <param name="guid">The Globally Unique Identifier (GUID) of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="name">Name of role.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Insert(Mindroute.Core.Model.Role)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Role"/> object into the repository.
            </summary>
            <param name="role"><see cref="T:Mindroute.Core.Model.Role"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.RemoveUserFromRole(System.Int32,System.Int32)">
            <summary>
              Removes a <see cref="T:Mindroute.Core.Model.User"/> from the specified <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="roleID">ID of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Search(Mindroute.Core.Search.RoleQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.RoleQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.RoleQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Role"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Update(Mindroute.Core.Model.Role)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Role"/> in the datasource.
            </summary>
            <param name="role"><see cref="T:Mindroute.Core.Model.Role"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.Fill(System.Data.IDataReader,System.Collections.Generic.IList{Mindroute.Core.Model.Role})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.Role"/> from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Role"/> to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlRoleRepository.RoleColumn">
            <summary>
              Enumerate the columns for the Role table.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlUserRepository">
            <summary>
              Sql Server implementation of the <see cref="T:Mindroute.Core.Repositories.IUserRepository"/> interface.
            </summary>    
        </member>
        <member name="T:Mindroute.Core.Repositories.IUserRepository">
            <summary>
              Repository interface for <see cref="T:Mindroute.Core.Model.User"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.IUserRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.User"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IUserRepository.GetByUsername(System.String,System.String,System.String)">
            <summary>
              Gets the ID of the <see cref="T:Mindroute.Core.Model.User"/> with the specified username and authentication provider.
            </summary>
            <param name="username">Username of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="providerName">The name of the authentication provider.</param>
            <param name="applicationName">The application name of the authentication provider.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Mindroute.Core.Model.User"/> item has the specified username.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IUserRepository.GetByEmail(System.String,System.String,System.String)">
            <summary>
              Gets the ID of all <see cref="T:Mindroute.Core.Model.User"/>s with the specified email address and authentication provider.
            </summary>
            <param name="email">Email of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="providerName">The name of the authentication provider.</param>
            <param name="applicationName">The application name of the authentication provider.</param>
            <returns>Return a list of integers.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IUserRepository.Insert(Mindroute.Core.Model.User)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.User"/> object into the repository.
            </summary>
            <param name="user"><see cref="T:Mindroute.Core.Model.User"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.IUserRepository.Search(Mindroute.Core.Search.UserQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.UserQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.UserQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.User"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.IUserRepository.Update(Mindroute.Core.Model.User)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.User"/> in the datasource.
            </summary>
            <param name="user"><see cref="T:Mindroute.Core.Model.User"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="F:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.UserColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.User"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.GetByUsername(System.String,System.String,System.String)">
            <summary>
              Gets the ID of the <see cref="T:Mindroute.Core.Model.User"/> with the specified username and authentication provider.
            </summary>
            <param name="username">Username of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="providerName">The name of the authentication provider.</param>
            <param name="applicationName">The application name of the authentication provider.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Mindroute.Core.Model.User"/> item has the specified username.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.GetByEmail(System.String,System.String,System.String)">
            <summary>
              Gets the ID of all <see cref="T:Mindroute.Core.Model.User"/>s with the specified email address and authentication provider.
            </summary>
            <param name="email">Email of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="providerName">The name of the authentication provider.</param>
            <param name="applicationName">The application name of the authentication provider.</param>
            <returns>Return a list of integers.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.Insert(Mindroute.Core.Model.User)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.User"/> object into the repository.
            </summary>
            <param name="user"><see cref="T:Mindroute.Core.Model.User"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.Search(Mindroute.Core.Search.UserQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.UserQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.UserQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.User"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.Update(Mindroute.Core.Model.User)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.User"/> in the datasource.
            </summary>
            <param name="user"><see cref="T:Mindroute.Core.Model.User"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.Fill(System.Data.IDataReader,System.Collections.Generic.IList{Mindroute.Core.Model.User})">
            <summary>
              Populates a list of <see cref="T:Mindroute.Core.Model.User"/> objects from a result set.
            </summary>
            <param name="dr">The DataReader containing the result set.</param>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.User"/> objects to populate.</param>        
        </member>
        <member name="T:Mindroute.Core.Repositories.SqlServer.SqlUserRepository.UserColumn">
            <summary>
              Enumerate the table columns.
            </summary>
        </member>
        <member name="T:Mindroute.Core.MindrouteContext">
            <summary>
              Encapsulates all request/thread specific data needed by Mindroute.Core.
            </summary>
        </member>
        <member name="M:Mindroute.Core.MindrouteContext.#ctor">
            <summary>
            Initializes a new instance of the MindrouteContext class. Prevents a default instance of the <see cref="T:Mindroute.Core.MindrouteContext"/> class from being created.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.Current">
            <summary>
            Gets the <see cref="T:Mindroute.Core.MindrouteContext"/> object for the current request/thread.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.Content">
            <summary>
            Gets or sets the <see cref="P:Mindroute.Core.MindrouteContext.Content"/> item associated with the current request.
            </summary>
            <remarks>Returns <c>null</c> if the current request is not for a <see cref="P:Mindroute.Core.MindrouteContext.Content"/> item.</remarks>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.Site">
            <summary>
            Gets or sets the <see cref="P:Mindroute.Core.MindrouteContext.Site"/> associated with the current request.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.Binding">
            <summary>
            Gets or sets the <see cref="P:Mindroute.Core.MindrouteContext.Binding"/> used for the current request.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.User">
            <summary>
            Gets or sets the <see cref="P:Mindroute.Core.MindrouteContext.User"/> associated with the current request.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.RequestLocation">
            <summary>
            Gets or sets the request location of the current request. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.ContentFilter">
            <summary>
            Gets or sets the filter used to decide which content items to return.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.Preview">
            <summary>
            Gets or sets the preview settings of the current request.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.ApplicationDirectory">
            <summary>
            Gets the root directory of the application, e.g. C:\inetpub\lemoon\.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.ApplicationPath">
            <summary>
            Gets the application's virtual application root path on the server, e.g. /lemoon/.
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.RouteData">
            <summary>
            Gets the route data for the HTTP request. 
            </summary>
        </member>
        <member name="P:Mindroute.Core.MindrouteContext.RequestTimer">
            <summary>
            Gets the stopwatch for logging the response time of the request.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Services.CommentService">
            <summary>
              Service layer for <see cref="T:Mindroute.Core.Model.Comment"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Services.PluginService,Mindroute.Core.Services.ContentService,Mindroute.Core.Repositories.ICommentRepository,Mindroute.Core.Services.FullTextService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.CommentService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="pluginService">An instance of the <see cref="T:Mindroute.Core.Services.PluginService"/> class.</param>
            <param name="commentRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.ICommentRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Comment"/> object from the repository.
            </summary>
            <param name="id">Comment ID (unique identifier).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Comment"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.GetCount">
            <summary>
              Gets the total number of <see cref="T:Mindroute.Core.Model.Comment"/> items in the system.
            </summary>
            <returns>The total number of <see cref="T:Mindroute.Core.Model.Comment"/> items in the system.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.GetCount(System.Int32)">
            <summary>
              Gets the total number of <see cref="T:Mindroute.Core.Model.Comment"/> items for all translations of a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <returns>The total number of <see cref="T:Mindroute.Core.Model.Comment"/> items for the <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.GetCount(System.Int32,System.Int32)">
            <summary>
              Gets the total number of <see cref="T:Mindroute.Core.Model.Comment"/> items for the specified translation of a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <returns>The total number of <see cref="T:Mindroute.Core.Model.Comment"/> items for the <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.GetByContent(System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
              Gets a list of <see cref="T:Mindroute.Core.Model.Comment"/> objects for a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="contentID">Content ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param> 
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="pageIndex">Page index at which to start reading.</param>
            <param name="pageSize">Number of items to return. When pageSize = 0, the result is not paged.</param>
            <param name="totalItemCount">The total number of items that match the search criteria, null to return the total item count.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Comment"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.Insert(Mindroute.Core.Model.Comment)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Comment"/> object into the repository.
            </summary>
            <param name="comment"><see cref="T:Mindroute.Core.Model.Comment"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Comment"/> object from the repository.
            </summary>
            <param name="id">Comment ID (unique identifier).</param>
            <remarks>
              This will remove the object and can cause a cascading effect where multiple objects will be removed.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.Search(Mindroute.Core.Search.CommentQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.CommentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.CommentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Comment"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.CommentService.Update(Mindroute.Core.Model.Comment)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Comment"/> in the datasource.
            </summary>
            <param name="comment"><see cref="T:Mindroute.Core.Model.Comment"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="T:Mindroute.Core.Services.ContentService">
            <summary>
            Service layer for <see cref="T:Mindroute.Core.Model.Content"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IContentRepository,Mindroute.Core.Repositories.IAliasRepository,Mindroute.Core.Services.PermissionService,Mindroute.Core.Services.PluginService,Mindroute.Core.Services.SiteService,Mindroute.Core.Services.TagService,Mindroute.Core.Services.ContentTypeService,Mindroute.Core.Services.BlobService,Mindroute.Core.Repositories.IMimeTypeRepository,Mindroute.Core.Services.FullTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Services.ContentService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="contentRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IContentRepository"/> interface.</param>
            <param name="aliasRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IAliasRepository"/> interface.</param>
            <param name="permissionService">An instance of the <see cref="T:Mindroute.Core.Services.PermissionService"/> class.</param>
            <param name="pluginService">An instance of the <see cref="T:Mindroute.Core.Services.PluginService"/> class.</param>
            <param name="siteService">An instance of the <see cref="T:Mindroute.Core.Services.SiteService"/> class.</param>
            <param name="tagService">An instance of the <see cref="T:Mindroute.Core.Services.TagService"/> class.</param>
            <param name="contentTypeService">An instance of the <see cref="T:Mindroute.Core.Services.ContentTypeService"/> class.</param>
            <param name="blobService">An instance of the <see cref="T:Mindroute.Core.Services.BlobService"/> class.</param>
            <param name="fullTextService">An instance of the <see cref="T:Mindroute.Core.Services.FullTextService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.AddTranslation(System.Int32,Mindroute.Core.Model.Content)">
            <summary>
              Adds a new translation to the repository.
            </summary>
            <param name="id">ID of the source <see cref="T:Mindroute.Core.Model.Content"/> item for which to add a translation.</param>
            <param name="translation">The new translation to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.CheckDeletePermission(Mindroute.Core.Model.Content)">
            <summary>
            Checks that the current <see cref="T:Mindroute.Core.Model.User"/> is allowed to delete the specified <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to check permissions.</param>
            <exception cref="T:Mindroute.Core.Security.PermissionException">Thrown when the <see cref="T:Mindroute.Core.Model.User"/> does not have delete permission.</exception>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.CheckEditPermission(Mindroute.Core.Model.Content)">
            <summary>
            Checks that the current <see cref="T:Mindroute.Core.Model.User"/> is allowed to edit the specified <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to check permissions.</param>
            <exception cref="T:Mindroute.Core.Security.PermissionException">Thrown when the <see cref="T:Mindroute.Core.Model.User"/> does not have edit permission.</exception>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Publish(Mindroute.Core.Model.Content,System.Boolean)">
            <summary>
              Publishes a draft and optionally creates an entry in the revision history.
            </summary>
            <param name="draft">The draft <see cref="T:Mindroute.Core.Model.Content"/> item to publish.</param>
            <param name="createVersion">When true, creates an entry in the revision history.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Lock(System.Int32,System.Int32)">
            <summary>
              Locks a <see cref="T:Mindroute.Core.Model.Content"/> item for editing. Only the user that has the lock may update 
              the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to lock.</param>
            <param name="languageID">The language ID of the translation to lock.</param>
            <returns>The locked <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Lock(System.Int32,System.Int32,System.Int32)">
            <summary>
              Locks a <see cref="T:Mindroute.Core.Model.Content"/> item for editing. Only the user that has the lock may update 
              the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to lock.</param>
            <param name="languageID">The language ID of the translation to lock.</param>
            <param name="userID">The user ID to look the content for.</param>
            <returns>The locked <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.CopyToRoot(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the specified <see cref="T:Mindroute.Core.Model.Content"/> item to the root of the specified site.
            </summary>
            <param name="sourceID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to copy.</param>
            <param name="sourceLanguageID">Language ID of the translation to copy.</param>
            <param name="destinationLanguageID">LanguageID of the destination <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="recursive"><c>True</c> to copy the <see cref="T:Mindroute.Core.Model.Content"/> item and all descendants, <c>false</c> to copy only the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <returns>Returns the newly created copy or <c>null</c> if the operation failed.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Copy(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the specified <see cref="T:Mindroute.Core.Model.Content"/> item to the the specified destination.
            </summary>
            <param name="sourceID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to copy.</param>
            <param name="sourceLanguageID">Language ID of the translation to copy.</param>
            <param name="destinationID">ID of the new destination/parent <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="recursive"><c>True</c> to copy the <see cref="T:Mindroute.Core.Model.Content"/> item and all descendants, <c>false</c> to copy only the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <returns>Returns the newly created copy or <c>null</c> if the operation failed.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Copy(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Creates a copy of the specified translation of a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="sourceID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to copy.</param>
            <param name="languageID">The language ID of the translation to copy.</param>
            <param name="destinationID">ID of the new parent item, or <c>null</c> to create a new root item.</param>
            <param name="destinationLanguageID">LanguageID of the destination.</param>
            <param name="recursive"><c>True</c> to copy the <see cref="T:Mindroute.Core.Model.Content"/> item and all descendants, <c>false</c> to copy only the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <returns>Returns the newly created copy or <c>null</c> if the operation failed.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Delete(System.Int32)">
            <summary>
              Deletes all translations of a <see cref="T:Mindroute.Core.Model.Content"/> object and it's descendants, i.e. sets the Deleted flag.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to delete.</param>
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Delete(System.Int32,System.Int32)">
            <summary>
              Deletes the specified translation of a <see cref="T:Mindroute.Core.Model.Content"/>, i.e. sets the Deleted flag.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to delete.</param>
            <param name="languageID">Language ID of the translation to delete.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Flatten(System.Collections.Generic.List{Mindroute.Core.Model.Content})">
            <summary>
            Convert a hierarchy of <see cref="T:Mindroute.Core.Model.Content"/> items into a flat list.
            </summary>
            <param name="tree">The hierarchy to flatten</param>
            <returns>A flat list of <see cref="T:Mindroute.Core.Model.Content"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetAll``1(System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Gets all <see cref="T:Mindroute.Core.Model.Content"/> items that are in the inheritance hierarchy of type <typeparamref name="T"/>. 
              When a content item has not been translated to the preferred language, 
              this method falls back to an existing translation.
            </summary>
            <typeparam name="T">The type of <see cref="T:Mindroute.Core.Model.Content"/> to return.</typeparam>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items of type <typeparamref name="T"/>.</returns>
            <remarks>The result of this method is not cached, but will query the repository every time.</remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Get``1(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Gets the latest version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
              When the content has not been translated to the preferred language, 
              this method falls back to an existing translation.
            </summary>
            <typeparam name="T">The type of <see cref="T:Mindroute.Core.Model.Content"/> to return.</typeparam>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>
              Returns a <see cref="T:Mindroute.Core.Model.Content"/> item of type <typeparamref name="T"/> or <c>null</c> 
              if it does not exist or if the type <typeparamref name="T"/> is not in its inheritance hierarchy.
            </returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Get(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Gets the latest version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
              When the content has not been translated to the preferred language, 
              this method falls back to an existing translation.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetInternal(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository <strong>without</strong> performing any permission checks.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="version">The version to return, <c>null</c> to return the latest version.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetArchive(Mindroute.Core.Search.ContentQuery)">
            <summary>
             Returns the result of a <see cref="T:Mindroute.Core.Search.ContentQuery"/> as an <see cref="T:Mindroute.Core.Model.ArchiveList"/>. 
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.ContentQuery"/> object containing the search criteria.</param>
            <returns>Returns an <see cref="T:Mindroute.Core.Model.ArchiveList"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetAliases(System.Int32,System.Int32)">
            <summary>
             Gets the list of URL aliases of a <see cref="T:Mindroute.Core.Model.Content"/> item. 
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <returns>Returns a list of strings representing the URL aliases.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetAncestors(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets the ancestors of a <see cref="T:Mindroute.Core.Model.Content"/> item, starting with the root item and ending with the parent of the <see cref="T:Mindroute.Core.Model.Content"/> item. 
            Does not check any permissions.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Get``1(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Gets the latest version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            </summary>
            <typeparam name="T">The type of <see cref="T:Mindroute.Core.Model.Content"/> to return.</typeparam>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>
              Returns a <see cref="T:Mindroute.Core.Model.Content"/> item of type <typeparamref name="T"/> or <c>null</c> 
              if it does not exist or if the type <typeparamref name="T"/> is not in its inheritance hierarchy.
            </returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Get(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Gets the latest version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            </summary>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetInternal(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
              Gets the latest version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository 
              <strong>without</strong> performing any permission checks.
            </summary>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="version">The version to return, <c>null</c> to return the latest version.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetChildren``1(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Gets the children of a <see cref="T:Mindroute.Core.Model.Content"/> item that are in the inheritance hierarchy of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of <see cref="T:Mindroute.Core.Model.Content"/> to return.</typeparam>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetChildren(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Gets the children of a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetChildrenInternal(System.Int32,System.Int32)">
            <summary>
              Gets the children of a <see cref="T:Mindroute.Core.Model.Content"/> item without checking permissions.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the preferred translation.</param>
            <param name="count">The maximum number of items to return, <c>null</c> to return all children.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetDescendants``1(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu},System.Boolean)">
            <summary>
              Returns the descendants of a <see cref="T:Mindroute.Core.Model.Content"/> item that are in the inheritance hierarchy of type <typeparamref name="T"/>.
              If an descendant has not been translated to the language specified by <paramref name="languageID"/>, this method falls back to an existing translation.
            </summary>
            <typeparam name="T">The type of <see cref="T:Mindroute.Core.Model.Content"/> to return.</typeparam>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get descendants.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, the entire hierarchy is returned.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetDescendants(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu},System.Boolean)">
            <summary>
              Returns the descendants of a <see cref="T:Mindroute.Core.Model.Content"/> item. The descendants are sorted like a tree. 
              If an descendant has not been translated to the language specified by <paramref name="languageID"/>, this method falls back to an existing translation.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get descendants.</param>
            <param name="languageID">The language ID of the preferred translation to return.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, the entire hierarchy is returned.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a tree-sorted list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetDescendantsInternal(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
              Returns the descendants of a <see cref="T:Mindroute.Core.Model.Content"/> item sorted like a tree. Does not check any permissions.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get descendants.</param>
            <param name="languageID">The language ID of the preferred translation to return.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, the entire hierarchy is returned.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <returns>Returns a tree-sorted list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetDraft(System.Int32,System.Int32)">
            <summary>
            Gets the current user's draft of a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetDraftInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the specified user's draft of a <see cref="T:Mindroute.Core.Model.Content"/> item without checking permissions.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <param name="userID">User ID of the draft owener.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.PermalinkToID(System.String,System.Int32)">
            <summary>
              Gets the ID of the <see cref="T:Mindroute.Core.Model.Content"/> item with the specified permalink.
              When no <see cref="T:Mindroute.Core.Model.Content"/> exists with the specified translation, this method falls back 
              to an existing translation.
            </summary>
            <param name="permalink">Permalink of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Mindroute.Core.Model.Content"/> item has the specified permalink.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.SlugToID(System.String,System.Int32)">
            <summary>
              Gets the ID of the <see cref="T:Mindroute.Core.Model.Content"/> item with the specified slug.
              When no <see cref="T:Mindroute.Core.Model.Content"/> exists with the specified translation, this method falls back 
              to an existing translation.
            </summary>
            <param name="slug">Slug of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Mindroute.Core.Model.Content"/> item has the specified slug.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.SlugExists(System.String,System.Int32)">
            <summary>
            Checks if a content item with the specified slug exists.
            </summary>
            <param name="slug">The slug to check</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to check.</param>
            <returns><c>true</c> if a content with the specified slug exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.PermalinkExists(System.String,System.Int32)">
            <summary>
            Checks if a content item with the specified permalink exists.
            </summary>
            <param name="permalink">The permalink to check</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to check.</param>
            <returns><c>true</c> if a content with the specified permalink exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetAlias(System.String,System.Int32)">
            <summary>
            Returns the alias with the specified route and languageid.
            </summary>
            <param name="route">The route to check</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to check.</param>
            <returns>An <see cref="T:Mindroute.Core.Model.Alias"/> object, or <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetByPermalink(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the <see cref="T:Mindroute.Core.Model.Content"/> item with the specified permalink.
            </summary>
            <param name="permalink">The permalink</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to check.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Content"/> item, or <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetByRoute(System.String,Mindroute.Core.Model.Alias@)">
            <summary>
            Returns the <see cref="T:Mindroute.Core.Model.Content"/> item with the specified route.
            </summary>
            <param name="route">The route to check.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Content"/> item, or <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetRoots(System.Int32,System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu})">
            <summary>
              Gets the root <see cref="T:Mindroute.Core.Model.Content"/> items for a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="siteID">ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <remarks>Only returns <see cref="T:Mindroute.Core.Model.Content"/> items where DisplayInMenu = DisplayInMenu.Public.</remarks>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetSitemap(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Mindroute.Core.Model.DisplayInMenu},System.Boolean)">
            <summary>
              Gets the sitemap of a <see cref="T:Mindroute.Core.Model.Site"/> without performing any permission checks.
            </summary>
            <param name="siteID">ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="languageID">The language ID of the preferred translation, <c>null</c> to use the current language.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 0 returns only the root items. 
              If depth is 1, the root items and their children are returned etc.
              Setting depth to <c>null</c>, returns the entire sitemap of the <see cref="T:Mindroute.Core.Model.Site"/>.
            </param>
            <param name="displayInMenu">Filters the result by the DisplayInMenu property.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetTranslations(System.Int32,System.Boolean)">
            <summary>
            Gets all translations of a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
            <remarks>Returns the latest version of each translation.</remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetVersion(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              Gets a specific version of a <see cref="T:Mindroute.Core.Model.Content"/> item from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <param name="version">The version to return.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Content"/> class.</returns>
            <remarks>Returns <c>null</c> if the <see cref="T:Mindroute.Core.Model.Content"/> exists but has not been translated to the specified language.</remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetVersions(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Gets the version history for a specific translation of a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to return.</param>
            <param name="filter"><c>true</c> to filter out items that are deleted, unpublished or where the user does not have read access, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Insert(Mindroute.Core.Model.Content,System.Boolean)">
            <summary>
              Inserts a new <see cref="T:Mindroute.Core.Model.Content"/> object into the repository.
            </summary>
            <param name="content"><see cref="T:Mindroute.Core.Model.Content"/> object to insert.</param>
            <param name="checkPermissions"><c>true</c> to check that the user has permission to insert, otherwise <c>false</c>.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.InsertInternal(Mindroute.Core.Model.Content)">
            <summary>
              Inserts a new <see cref="T:Mindroute.Core.Model.Content"/> object into the repository <strong>without</strong> performing any permission checks.
            </summary>
            <param name="content"><see cref="T:Mindroute.Core.Model.Content"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Move(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Moves a <see cref="T:Mindroute.Core.Model.Content"/> item and its' descendants to a new place in the content hierarchy.
            </summary>
            <param name="sourceID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="destinationID">ID of the new parent <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="checkPermissions"><c>true</c> to check that the user has permission to move, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.MoveToRoot(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Moves a <see cref="T:Mindroute.Core.Model.Content"/> item to the root of the specified <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="siteID">ID of the destination <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="checkPermissions"><c>true</c> to check that the user has permission to move, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.MoveToRootInternal(Mindroute.Core.Model.Content,System.Int32)">
            <summary>
              Moves a <see cref="T:Mindroute.Core.Model.Content"/> item and its' descendants to the root of the specified <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="source">The <see cref="T:Mindroute.Core.Model.Content"/> item to move.</param>
            <param name="siteID">ID of the destination <see cref="T:Mindroute.Core.Model.Site"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetIndexedSlug(System.String,System.Int32,System.Boolean)">
            <summary>
            Private helper method for generating a unique slug.
            </summary>
            <param name="slug"></param>
            <param name="languageID"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetIndexedPermalink(System.String,System.Int32,System.Boolean)">
            <summary>
            Private helper method for generating a unique permalink.
            </summary>
            <param name="permalink"></param>
            <param name="languageID"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Remove(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Content"/> item and its' descendants from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <remarks>
              This will remove the object and can cause a cascading effect where multiple objects will be removed.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Remove(System.Int32,System.Int32)">
            <summary>
              Permanently removes a translation from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
              Permanently removes an entry from the version history.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="version">The version to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.RemoveBlob(Mindroute.Core.Model.Content)">
            <summary>
             Permanently removes a blob when it is no longer referenced by any content item.
            </summary>
            <param name="blobID">ID of blob to remove.</param>
            <param name="removed">The document that was just removed.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Restore(System.Int32)">
            <summary>
              Restores a deleted <see cref="T:Mindroute.Core.Model.Content"/> object and it's descendants, i.e. clears the Deleted flag.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <remarks>
              This will restore the object and can cause a cascading effect where multiple objects will be restored.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Revert(System.Int32,System.Int32,System.Int32)">
            <summary>
            Revert to a previous version of a Content item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation to revert.</param>
            <param name="version">Version to revert to.</param>
            <returns>The reverted version of the Content item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.SaveDraft(Mindroute.Core.Model.Content)">
            <summary>
            Saves a draft (working copy) of the <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="draft">The draft to save.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Search(Mindroute.Core.Search.ContentQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.ContentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.ContentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Search(Mindroute.Core.Search.DraftQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.DraftQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.DraftQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetCount(Mindroute.Core.Model.ContentSection)">
            <summary>
              Returns the number of items in the system that are in the specified ContentSection.
            </summary>
            <param name="section">The ContentSection to count items for.</param>
            <returns>The number of items found.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.SetAliases(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Mindroute.Core.Model.Alias})">
            <summary>
             Sets the list of URL aliases for a Content item.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="aliases">The list of aliases to set or <c>null</c> to remove all aliases.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.SetVisibility(System.Int32,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},Mindroute.Core.Model.RecursionMethod)">
            <summary>
              Sets the publish parameters of the specified <see cref="T:Mindroute.Core.Model.Content"/> item and/or its' descendants.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation, or <c>null</c> to set parameters for all translations.</param>
            <param name="published"><c>true</c> to publish/show the <see cref="T:Mindroute.Core.Model.Content"/> item, <c>false</c> to hide it.</param>
            <param name="publishedFrom">The date from which to publish/show the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="publishedTo">The date from which to unpublish/hide the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="method">Indicates to which items we should apply the publish parameters.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Sort(System.Collections.Generic.IEnumerable{Mindroute.Core.Model.Content},Mindroute.Core.Search.SortItem,System.Boolean)">
            <summary>
              Sorts a list of content items. 
              If <paramref name="recursive"/> is specified, the source list must have a parent-child relationship
              such as that returned by <see cref="!:BuildBranches"/>.
            </summary>
            <param name="source">The list to sort.</param>
            <param name="sort">The sort item to use.</param>
            <param name="recursive"><c>True</c> to recursively sort the child items.</param>
            <returns>A sorted list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Discard(System.Int32,System.Int32)">
            <summary>
              Discard pending changes for the current user, i.e. remove draft and unlock.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <returns>The original <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Discard(System.Int32,System.Int32,System.Int32)">
            <summary>
              Discard pending changes for the specified user, i.e. remove draft and unlock.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
            <param name="languageID">The language ID of the translation.</param>
            <param name="userID">UserID of the draft owner.</param>
            <returns>The original <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Unlock(System.Int32,System.Int32)">
            <summary>
              Unlocks a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item to lock.</param>
            <param name="languageID">The language ID of the translation to lock.</param>
            <returns>The unlocked <see cref="T:Mindroute.Core.Model.Content"/> item.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Update(Mindroute.Core.Model.Content,System.Boolean,System.Boolean)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Content"/> in the datasource.
            </summary>
            <param name="content"><see cref="T:Mindroute.Core.Model.Content"/> object to update.</param>
            <param name="createVersion"><c>true</c> to create a new version, <c>false</c> to overwrite the current version.</param>
            <param name="checkPermissions"><c>true</c> to check that the user has permission to update, otherwise <c>false</c>.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Convert(System.Int32,System.String)">
            <summary>
              Converts an existing <see cref="T:Mindroute.Core.Model.Content"/> item to the specified content type.
            </summary>
            <param name="id">ID of <see cref="T:Mindroute.Core.Model.Content"/> item to convert.</param>
            <param name="contentTypeID">ID of the new <see cref="T:Mindroute.Core.Model.ContentType"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Filter(System.Collections.Generic.IList{Mindroute.Core.Model.Content})">
            <summary>
            Filters a list of <see cref="T:Mindroute.Core.Model.Content"/> items, removing items that are deleted, not published or where the <see cref="T:Mindroute.Core.Model.User"/> does not have read permission. 
            </summary>
            <param name="list">The list of <see cref="T:Mindroute.Core.Model.Content"/> items to filter.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Content"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Filter(Mindroute.Core.Model.Content)">
            <summary>
            Filters a <see cref="T:Mindroute.Core.Model.Content"/> item, returning <c>null</c> if the item is deleted, not published or the <see cref="T:Mindroute.Core.Model.User"/> does not have read permission. 
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item to filter.</param>
            <returns>The <see cref="T:Mindroute.Core.Model.Content"/> item, or <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.TryFilter(Mindroute.Core.Model.Content)">
            <summary>
            Returns the reason why a <see cref="T:Mindroute.Core.Model.Content"/> item will not be returned from the Filter method. 
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item to filter.</param>
            <returns>A value  from the <see cref="T:Mindroute.Core.Model.FilterReason"/> enum.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.IsPublished(Mindroute.Core.Model.Content,System.DateTime)">
            <summary>
            Check if a <see cref="T:Mindroute.Core.Model.Content"/> item should be published on the given date.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item to check.</param>
            <param name="date">The date to use when checking published state.</param>
            <returns><c>true</c> if the item should be published, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetMimeTypeMapping(System.String)">
            <summary>
            Helper method for resolving a MimeType from a file extension 
            </summary>
            <param name="extension">The file extension</param>
            <returns>A <see cref="T:Mindroute.Core.Model.MimeType"/> object</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.GetMimeType(System.String)">
            <summary>
            Gets the mime type defined for the specified file extension, e.g. "application/octet-stream".
            </summary>
            <param name="extension">The file extension, e.g. ".gif"</param>
            <returns>A mime type.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.ResolveBinaryContent(System.String)">
            <summary>
            Instantiates a new <see cref="T:Mindroute.Core.Model.Document"/> based on the file extension.
            </summary>
            <param name="extension">File extension for which to resolve content, e.g. ".jpg" or ".doc".</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Document"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentService.Resolve(System.String)">
            <summary>
            Instantiates a new <see cref="T:Mindroute.Core.Model.Content"/> item based on the content type id.
            </summary>
            <param name="id">The full name of the <see cref="T:Mindroute.Core.Model.ContentType"/> to create, e.g. "Mindroute.Lemoon.Modules.CoreModule.Page".</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Content"/> object.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.ContentTypeService">
            <summary>
            Service layer for <see cref="T:Mindroute.Core.Model.ContentType"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IExtensionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindroute.Core.Services.ContentTypeService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="contentTypeRepository">An object implementing the <see cref="!:IContentTypeRepository"/> interface.</param>
            <param name="contentService">An instance of the <see cref="T:Mindroute.Core.Services.ContentService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.GetAll">
            <summary>
              Gets all non-abstract <see cref="T:Mindroute.Core.Model.ContentType"/> objects from the repository, except the <see cref="T:Mindroute.Core.Model.Content"/> base class.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.GetAllInternal">
            <summary>
              Gets all registered <see cref="T:Mindroute.Core.Model.ContentType"/> objects from the repository, including abstract and "internal" base classes.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.Get``1">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.ContentType"/> object from the repository.
            </summary>
            <typeparam name="T">The type of <see cref="T:Mindroute.Core.Model.Content"/> to return.</typeparam>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.ContentType"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.ContentType"/> object from the repository.
            </summary>
            <param name="id">The full name of the <see cref="T:Mindroute.Core.Model.ContentType"/> to return.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.ContentType"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.Get(Mindroute.Core.Model.ContentSection)">
            <summary>
              Returns a list of all <see cref="T:Mindroute.Core.Model.ContentType"/> object matching the specified <see cref="T:Mindroute.Core.Model.ContentSection"/>, i.e. files, folders and/or pages.
            </summary>
            <returns>A list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.GetChildren(System.Type)">
            <summary>
              Gets a list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects that are children of the specified content type.
            </summary>
            <param name="contentType">The <see cref="P:Mindroute.Core.Model.ContentType.Type"/> to return children for.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.GetDescendants(System.Type)">
            <summary>
              Gets a list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects that are descendants of the content type.
            </summary>
            <param name="contentType">The <see cref="P:Mindroute.Core.Model.ContentType.Type"/> to return descendants for.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.ContentType"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.ContentTypeService.GetParent(System.Type)">
            <summary>
            Gets the parent type of the type supplied.
            </summary>
            <param name="contentType">The <see cref="P:Mindroute.Core.Model.ContentType.Type"/> to return parent for.</param>
            <returns>The parent <see cref="T:Mindroute.Core.Model.ContentType"/> of the item.</returns>
            <remarks>If the parent type is <c>object</c> then null is returned.</remarks>
        </member>
        <member name="T:Mindroute.Core.Services.PermissionService">
            <summary>
              Service layer for managing permissions and access rights.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IPermissionRepository,Mindroute.Core.Services.UserService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.PermissionService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="permissionRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IPermissionRepository"/> interface.</param>
            <param name="userService">An instance of the <see cref="T:Mindroute.Core.Services.UserService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.GetPermission(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32})">
            <summary>
            Get the current user's <see cref="T:Mindroute.Core.Security.Permission"/> for an entity.
            </summary>
            <param name="entityType">The <see cref="T:Mindroute.Core.Security.EntityType"/> to check access for.</param>
            <param name="entityID">The ID of the entity to check access for, <c>null</c> to get the global <see cref="T:Mindroute.Core.Security.Permission"/> for the <see cref="T:Mindroute.Core.Security.EntityType"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Security.Permission"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.GetPermission(System.Int32,Mindroute.Core.Security.EntityType,System.Nullable{System.Int32})">
            <summary>
            Get a user's <see cref="T:Mindroute.Core.Security.Permission"/> for an entity.
            </summary>
            <param name="userID">The id of the <see cref="T:Mindroute.Core.Model.User"/> to get the <see cref="T:Mindroute.Core.Security.Permission"/> for.</param>
            <param name="entityType">The <see cref="T:Mindroute.Core.Security.EntityType"/> to get the <see cref="T:Mindroute.Core.Security.Permission"/> for.</param>
            <param name="entityID">The ID of the entity to get <see cref="T:Mindroute.Core.Security.Permission"/> for, <c>null</c> to get the global <see cref="T:Mindroute.Core.Security.Permission"/> for the <see cref="T:Mindroute.Core.Security.EntityType"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Security.Permission"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.GetAccessControlList(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32})">
            <summary>
            Gets the access control list (ACL) for an entity.
            </summary>
            <param name="entityType">The entity type to check access for.</param>
            <param name="entityID">The id the entity to check access for, <c>null</c> to get the global ACL for the <see cref="T:Mindroute.Core.Security.EntityType"/>.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> objects</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.HasPermission(Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},Mindroute.Core.Security.AccessMask)">
            <summary>
              Check if the current user has access to the specified entity.
            </summary>
            <param name="entityType">The entity type to check access for.</param>
            <param name="entityID">The id of the entity to check access for, <c>null</c> to check global access for the entity type.</param>
            <param name="expectedMask">The access mask to check against. This can be a single value or multiple values ORed toghether.</param>
            <returns>Returns <code>true</code> if the user has the specified access mask set.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.HasPermission(Mindroute.Core.Model.User,Mindroute.Core.Security.EntityType,System.Nullable{System.Int32},Mindroute.Core.Security.AccessMask)">
            <summary>
              Check if the specified user has access to the specified entity.
            </summary>
            <param name="user">The user to check access for.</param>
            <param name="entityType">The entity type to check access for.</param>
            <param name="entityID">The id of the entity to check access for, <c>null</c> to check global access for the entity type.</param>
            <param name="expectedMask">The access mask to check against. This can be a single value or multiple values ORed toghether.</param>
            <returns>Returns <code>true</code> if the user has the specified access mask set.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.HasPermission(Mindroute.Core.Security.AccessMask,Mindroute.Core.Security.AccessMask)">
            <summary>
              Compares two AccessMasks. The masks can have a single value or multiple values ORed toghether.
            </summary>
            <param name="expected">The mask to check against.</param>
            <param name="actual">The access mask to check.</param>
            <returns>Returns <code>true</code> if the <paramref name="actual"/> mask has all the bits of the <paramref name="expected"/> mask.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.Merge(Mindroute.Core.Security.AccessMask,Mindroute.Core.Security.AccessMask)">
            <summary>
              Combines an <see cref="T:Mindroute.Core.Security.AccessMask"/> with allow permissions and an <see cref="T:Mindroute.Core.Security.AccessMask"/> 
              with deny permissions into one merged <see cref="T:Mindroute.Core.Security.AccessMask"/>. 
              The masks can have a single value or multiple values ORed toghether.
            </summary>
            <param name="allowMask">The <see cref="T:Mindroute.Core.Security.AccessMask"/> with allow permissions.</param>
            <param name="denyMask">The <see cref="T:Mindroute.Core.Security.AccessMask"/> with deny permissions.</param>
            <returns>Returns an <see cref="T:Mindroute.Core.Security.AccessMask"/> where the allow and deny permissions have been merged.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.SetAccessControlList(Mindroute.Core.Security.EntityType,System.Int32,System.Collections.Generic.List{Mindroute.Core.Model.AccessControlEntry},Mindroute.Core.Model.RecursionMethod)">
            <summary>
            Sets the access control list (ACL) for an entity.
            </summary>
            <param name="entityType">The entity type to set access for.</param>
            <param name="entityID">The id of the entity to set access for.</param>       
            <param name="acl">The list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> items to be applied.</param>
            <param name="method">Indicates to which items we should apply the ACL.</param>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.SetAccessControlList(Mindroute.Core.Security.EntityType,System.Collections.Generic.List{Mindroute.Core.Model.AccessControlEntry})">
            <summary>
            Sets the global access control list (ACL) for an entity type.
            </summary>
            <param name="entityType">The entity type to set access for.</param>
            <param name="acl">The list of <see cref="T:Mindroute.Core.Model.AccessControlEntry"/> items to be applied.</param>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.Get(Mindroute.Core.Security.EntityType,System.Int32)">
            <summary>
            Helper method for returning an entity.
            </summary>
            <param name="entityType">EntityType of the entity to return.</param>
            <param name="id">ID of the entity to return.</param>
            <returns>An <see cref="T:Mindroute.Core.Security.Entity"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PermissionService.GetDescendants(Mindroute.Core.Security.EntityType,System.Int32)">
            <summary>
            Helper method for returning the descendants of an entity.
            </summary>
            <param name="entityType">EntityType of the entities to return.</param>
            <param name="id">ID of the entity for which to get descendants.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Security.Entity"/> objects.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.PluginService">
            <summary>
              Service layer for <see cref="T:Mindroute.Core.Plugins.Plugin"/> objects.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.IExtensionRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.PluginService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="extensionRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IExtensionRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.Get(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Plugins.Plugin"/> object from the repository.
            </summary>
            <param name="id">Full name of the plugin, e.g. Mindroute.Core.Plugins.TestPlugin.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Plugins.Plugin"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.GetAll">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Plugins.Plugin"/> objects from the repository.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Plugins.Plugin"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.ExecuteFirst``1(Mindroute.Core.Plugins.Hook,System.Object[])">
            <summary>
            Executes the first plugin that have a method that matches the TResult [Hook](input) signature.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="hook">The key of the operation to perform.</param>
            <param name="input">The input parameters for the operation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.Execute(Mindroute.Core.Plugins.Hook,System.Object[])">
            <summary>
            Calls all plugins that have void [Hook](input) as their signature.
            </summary>
            <param name="hook">The key of the operation to perform.</param>
            <param name="input">The input parameters for the operation.</param>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.GetPipeline``1(Mindroute.Core.Plugins.Hook)">
            <summary>
            Find all enabled and loaded plugin methods that have <c>public TResult [Hook]()</c> as their signature. 
            </summary>
            <typeparam name="TResult">The return type of the method.</typeparam>
            <param name="hook">The key of the operation to perform.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Plugins.PluginMethod"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.GetPipeline(Mindroute.Core.Plugins.Hook)">
            <summary>
            Find all enabled and loaded plugin methods that have <c>public void [Hook]()</c> as their signature.
            </summary>
            <param name="hook">The key of the operation to perform.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Plugins.PluginMethod"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.PluginService.GetEnabledAndLoaded">
            <summary>
            Find all enabled and loaded plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mindroute.Core.Services.SettingService">
            <summary>
            Service layer for settings. The data types supported as setting values are string, int, bool, double and DateTime. 
            Nullables and lists of theses types are also supported.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Repositories.ISettingRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.SettingService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="settingRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.ISettingRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.Get``1(System.Nullable{System.Int32},System.String,System.Boolean,``0)">
            <summary>
            Gets a setting value from the repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">Site ID or <c>null</c> to get a global setting.</param>
            <param name="name">Setting name.</param>
            <param name="systemSetting"><c>True</c> to get a system setting, otherwise false.</param>
            <param name="defaultValue">The default value to return if the setting does not exist.</param>
            <returns>Returns the value of the setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.Get(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets settings value from the repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">Site ID or <c>null</c> to get a global setting.</param>
            <param name="name">Setting name.</param>
            <param name="systemSetting"><c>True</c> to get a system setting, otherwise false.</param>
            <param name="defaultValue">The default value to return if the setting does not exist.</param>
            <returns>Returns the value of the setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.GetSiteSetting``1(System.Int32,System.String)">
            <summary>
            Gets the value of a site setting. 
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="name">Setting name (unique identifier).</param>
            <returns>Returns the value of the setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.GetSiteSetting``1(System.Int32,System.String,``0)">
            <summary>
            Gets the value of a site setting. If the setting does not exists, the default value is returned.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="defaultValue">The default value to return if the setting does not exist.</param>
            <returns>Returns the value of the setting, or the specified default value if the setting does not exist.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.GetGlobalSetting``1(System.String)">
            <summary>
              Gets the value of a global setting. 
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="name">Setting name (unique identifier).</param>
            <returns>Returns the value of the global setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.GetGlobalSetting``1(System.String,``0)">
            <summary>
              Gets the value of a global setting. If the setting does not exists, the default value is returned.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="name">Setting name (unique identifier).</param>
            <param name="defaultValue">The default value to return if the setting does not exist.</param>
            <returns>Returns the value of the setting or the specified default value if the setting does not exist..</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.GetSystemSetting``1(Mindroute.Core.Model.SystemSetting)">
            <summary>
              Gets the value of a system setting. 
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="setting">The system setting to get.</param>
            <returns>Returns the value of the system setting.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.GetSystemSetting``1(Mindroute.Core.Model.SystemSetting,``0)">
            <summary>
              Gets the value of a system setting. If the setting does not exists, the default value is returned.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="setting">The system setting to get.</param>
            <param name="defaultValue">The default value to return if the setting does not exist.</param>
            <returns>Returns the value of the system setting or the specified default value if the setting does not exist..</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.Remove(System.Nullable{System.Int32},System.String)">
            <summary>
              Permanently removes a setting from the repository.
            </summary>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="name">Setting name (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.RemoveGlobalSetting(System.String)">
            <summary>
              Permanently removes a global setting.
            </summary>
            <param name="name">Setting name (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.RemoveSiteSetting(System.Int32,System.String)">
            <summary>
              Permanently removes a site setting.
            </summary>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="name">Setting name (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.SetSiteSetting``1(System.Int32,System.String,``0)">
            <summary>
              Store a site setting intthe repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.SetGlobalSetting``1(System.String,``0)">
            <summary>
              Store a global setting in the repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="name">Setting name (unique identifier).</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.SetGlobalSetting(System.String,System.Object,System.Type)">
            <summary>
              Store a global setting in the repository.
            </summary>
            <param name="name">Setting name (unique identifier).</param>
            <param name="value">The value to insert.</param>
            <param name="type">The type of the setting value.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.SetSiteSetting(System.Int32,System.String,System.Object,System.Type)">
            <summary>
              Store a site setting in the repository.
            </summary>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="value">The value to insert.</param>
            <param name="type">The type of the setting value.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.SetSystemSetting``1(Mindroute.Core.Model.SystemSetting,``0)">
            <summary>
              Store a system setting in the repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="setting">The system setting to update.</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SettingService.Set``1(System.Nullable{System.Int32},System.String,System.Boolean,``0)">
            <summary>
            Store a setting into the repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="siteID">The ID of the <see cref="T:Mindroute.Core.Model.Site"/>.</param>
            <param name="name">Setting name (unique identifier).</param>
            <param name="systemSetting"><c>True</c> to set a system setting, otherwise false.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="T:Mindroute.Core.Services.SiteService">
            <summary>
              Service layer for <see cref="T:Mindroute.Core.Model.Site"/> objects.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Services.SiteService.SharedID">
            <summary>
            The ID of the shared <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Services.PermissionService,Mindroute.Core.Repositories.ISiteRepository,Mindroute.Core.Repositories.IBindingRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.SiteService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="permissionService">An instance of the <see cref="T:Mindroute.Core.Services.PermissionService"/> class.</param>
            <param name="siteRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.ISiteRepository"/> interface.</param>
            <param name="bindingRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IBindingRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.AddLanguage(System.Int32,System.String)">
            <summary>
              Adds a language to a <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="id">Site ID (unique identifier).</param>
            <param name="languageCode">Language code (unique identifier).</param>
            <returns>The newly created <see cref="T:Mindroute.Core.Model.Site"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetAll">
            <summary>
              Gets all <see cref="T:Mindroute.Core.Model.Site"/> objects.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetAllInternal">
            <summary>
              Gets all <see cref="T:Mindroute.Core.Model.Site"/> objects without checking permissions.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Site"/> object by its language id.
            </summary>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to get.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Site"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetInternal(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Site"/> object by its language id without checking permissions.
            </summary>
            <param name="languageID">Language ID of the <see cref="T:Mindroute.Core.Model.Site"/> to get.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Site"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetLanguages(System.Int32)">
            <summary>
              Gets the list of languages for a <see cref="T:Mindroute.Core.Model.Site"/>. 
              If the site is not a multi-language site the list contains only one element.
            </summary>
            <param name="siteID">Site ID of the <see cref="T:Mindroute.Core.Model.Site"/> to get.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetLanguagesInternal(System.Int32)">
            <summary>
              Gets the list of languages for a <see cref="T:Mindroute.Core.Model.Site"/> without checking permissions. 
            </summary>
            <param name="siteID">Site ID of the <see cref="T:Mindroute.Core.Model.Site"/> to get.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetAllBindings">
            <summary>
              Gets a list of all <see cref="T:Mindroute.Core.Model.Binding"/> objects.
            </summary>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Binding"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetBinding(System.Uri)">
            <summary>
              Gets the binding that matches the specifeid url.
            </summary>
            <param name="url">The url to check.</param>
            <returns>Returns a <see cref="T:Mindroute.Core.Model.Binding"/> object.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetBindings(System.Int32)">
            <summary>
              Gets all <see cref="T:Mindroute.Core.Model.Binding"/> objects for the specified site or language.
            </summary>
            <param name="siteID">Site ID of the <see cref="T:Mindroute.Core.Model.Site"/> for which to get bindings.</param>
            <param name="languageID">
              Language ID of the <see cref="T:Mindroute.Core.Model.Site"/> for which to get bindings, <c>null</c> to get only the bindings defined on the site.
            </param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Binding"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetBestBinding(Mindroute.Core.Model.Site,System.Uri)">
            <summary>
            Gets the best matching binding for the specified site given the current url (used internally for generating content urls).
            </summary>
            <param name="site">The site for which to return a binding.</param>
            <param name="url">The referring url.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Binding"/> object, or <c>null</c> if no binding matches the specified <see cref="T:Mindroute.Core.Model.Site"/>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.SetBindings(System.Int32,System.Collections.Generic.List{Mindroute.Core.Model.Binding})">
            <summary>
              Sets the list of <see cref="T:Mindroute.Core.Model.Binding"/>s for the specified language, <c>null</c> to clear bindings.
            </summary>
            <param name="languageID">The LanguageID of the <see cref="T:Mindroute.Core.Model.Site"/> to set bindings for.</param>
            <param name="bindings">The list of <see cref="T:Mindroute.Core.Model.Binding"/>s to set.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetDefault">
            <summary>
              Gets the default <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Site"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetDefaultInternal">
            <summary>
              Gets the default <see cref="T:Mindroute.Core.Model.Site"/> without checking permissions.
            </summary>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Site"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.GetShared">
            <summary>
              Gets the shared <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Site"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.Insert(Mindroute.Core.Model.Site)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Site"/> object into the repository.
            </summary>
            <param name="site"><see cref="T:Mindroute.Core.Model.Site"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.RemoveLanguage(System.Int32)">
            <summary>
              Permanently removes a language from a <see cref="T:Mindroute.Core.Model.Site"/>. 
              Removing the last language from a <see cref="T:Mindroute.Core.Model.Site"/> removes the entire <see cref="T:Mindroute.Core.Model.Site"/>.
            </summary>
            <param name="languageID">ID of the language to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.SetDefault(System.Int32)">
            <summary>
              Sets the default <see cref="T:Mindroute.Core.Model.Site"/> of the installation.
            </summary>
            <param name="id">The ID of the <see cref="T:Mindroute.Core.Model.Site"/> to set as the default <see cref="T:Mindroute.Core.Model.Site"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.Update(Mindroute.Core.Model.Site)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Site"/> in the datasource.
            </summary>
            <param name="site"><see cref="T:Mindroute.Core.Model.Site"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.Filter(System.Collections.Generic.List{Mindroute.Core.Model.Site})">
            <summary>
            Filters a list of <see cref="T:Mindroute.Core.Model.Site"/> objects, removing items where the <see cref="T:Mindroute.Core.Model.User"/> does not have read permission. 
            </summary>
            <param name="sites">The list of <see cref="T:Mindroute.Core.Model.Site"/> objects to filter.</param>
            <returns>A list of <see cref="T:Mindroute.Core.Model.Site"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.Filter(Mindroute.Core.Model.Site)">
            <summary>
            Filters a <see cref="T:Mindroute.Core.Model.Site"/> object, returning <c>null</c> if the <see cref="T:Mindroute.Core.Model.User"/> does not have read permission. 
            </summary>
            <param name="site">The <see cref="T:Mindroute.Core.Model.Content"/> item to filter.</param>
            <returns>The <see cref="T:Mindroute.Core.Model.Content"/> item, or <c>null</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.SiteService.TryFilter(Mindroute.Core.Model.Site)">
            <summary>
            Returns the reason why a <see cref="T:Mindroute.Core.Model.Site"/> will not be returned from the Filter method. 
            </summary>
            <param name="site">The <see cref="T:Mindroute.Core.Model.Site"/> to filter.</param>
            <returns>A value  from the <see cref="T:Mindroute.Core.Model.FilterReason"/> enum.</returns>
        </member>
        <member name="T:Mindroute.Core.Services.UserService">
            <summary>
              Service layer for <see cref="T:Mindroute.Core.Model.User"/> and <see cref="T:Mindroute.Core.Model.Role"/> objects.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Services.UserService.AnonymousID">
            <summary>
            The ID of the BUILT-IN\Anonymous role and the anonymous user.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Services.UserService.AuthenticatedID">
            <summary>
            The ID of the BUILT-IN\Authenticated role.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Services.UserService.EveryoneID">
            <summary>
            The ID of the BUILT-IN\Everyone role.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Services.UserService.CreatorsID">
            <summary>
            The ID of the BUILT-IN\Creators role.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.#ctor(Mindroute.Core.Services.CacheService,Mindroute.Core.Services.PluginService,Mindroute.Core.Repositories.IUserRepository,Mindroute.Core.Repositories.IRoleRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.UserService"/> class.
            </summary>
            <param name="cacheService">An instance of the <see cref="T:Mindroute.Core.Services.CacheService"/> class.</param>
            <param name="pluginService">An instance of the <see cref="T:Mindroute.Core.Services.PluginService"/> class.</param>
            <param name="userRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IUserRepository"/> interface.</param>
            <param name="roleRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.IRoleRepository"/> interface.</param>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetAnonymous">
            <summary>
              Returns the anonymous user.
            </summary>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetID(System.String,System.String)">
            <summary>
              Gets the ID of the <see cref="T:Mindroute.Core.Model.User"/> with the specified username and authentication provider.
            </summary>
            <param name="username">Username of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="providerName">The name of the authentication provider or <c>null</c> for users with WindowsAuthentication.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Mindroute.Core.Model.User"/> item has the specified username.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Authenticate(System.String,System.String)">
            <summary>
              Authenticates a <see cref="T:Mindroute.Core.Model.User"/> with the default authentication provider using the given username and password.
            </summary>
            <param name="username">The username of the <see cref="T:Mindroute.Core.Model.User"/>. Not case sensitive.</param>
            <param name="password">The password for the <see cref="T:Mindroute.Core.Model.User"/>. This is case sensitive.</param>
            <returns>
              Returns a <see cref="T:Mindroute.Core.Model.User"/> if the user was found, was approved, was not locked out and the password was correct, 
              otherwise <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Authenticate(System.String,System.String,System.String)">
            <summary>
              Authenticates a <see cref="T:Mindroute.Core.Model.User"/> with the given username, password and provider.
            </summary>
            <param name="username">The username of the <see cref="T:Mindroute.Core.Model.User"/>. Not case sensitive.</param>
            <param name="password">The password for the <see cref="T:Mindroute.Core.Model.User"/>. This is case sensitive.</param>
            <param name="providerName">The name of the authentication provider to use.</param>
            <returns>
              Returns a <see cref="T:Mindroute.Core.Model.User"/> if the user was found, was approved, was not locked out and the password was correct, 
              otherwise <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.SynchronizeRole(System.Guid)">
            <summary>
            Synchronize/Import role and members from Active Directory.
            </summary>
            <param name="guid">The Globally Unique Identifier (GUID) of the role to synchronize/import.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.Role"/> with updated information from the Active Directory.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.SynchronizeUser(System.String,System.String)">
            <summary>
            Synchronize/Import user data from authentication provider.
            </summary>
            <param name="username">The username of the user to synchronize/import.</param>
            <param name="providerName">The provider to synchronize with or <c>null</c> to synchronize with Active Directory.</param>
            <returns>A <see cref="T:Mindroute.Core.Model.User"/> with updated information from the authentication provider.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.ChangePassword(System.Int32,System.String,System.String)">
            <summary>
            Updates the password for the <see cref="T:Mindroute.Core.Model.User"/>.
            </summary>
            <param name="id">The ID of the user for which to set the password.</param>
            <param name="oldPassword">The current password.</param>
            <param name="newPassword">The new password.</param>
            <returns><c>true</c> if the update was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.ResetPassword(System.Int32)">
            <summary>
            Resets a user's password to a new, automatically generated password. 
            </summary>
            <param name="id">The ID of the user for which to reset the password.</param>
            <returns>The new password for the <see cref="T:Mindroute.Core.Model.User"/></returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Delete(System.Int32)">
            <summary>
              Deletes a <see cref="T:Mindroute.Core.Model.User"/> object from the repository, i.e. sets the Deleted flag.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Restore(System.Int32)">
            <summary>
              Restoed a deleted <see cref="T:Mindroute.Core.Model.User"/> object, i.e. clears the Deleted flag.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GeneratePassword(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="length">The length of the generated password.</param>
            <param name="nonAlphanumericCharacters">The number of special characters in the generated password.</param>
            <returns>A random password string.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.User"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetAdministrators(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
              Gets a list of <see cref="T:Mindroute.Core.Model.User"/>s with administrative privileges.
            </summary>
            <param name="pageIndex">Page index at which to start reading.</param>
            <param name="pageSize">Number of items to return. When pageSize = 0, the result is not paged.</param>
            <param name="totalItemCount">The total number of items that match the search criteria, null to return the total item count.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.User"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetByRole(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
              Gets the list of <see cref="T:Mindroute.Core.Model.User"/>s that are members of the specified <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Role"/> fo which to get members.</param>
            <param name="pageIndex">Page index at which to start reading.</param>
            <param name="pageSize">Number of items to return. When pageSize = 0, the result is not paged.</param>
            <param name="totalItemCount">The total number of items that match the search criteria, null to return the total item count.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.User"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetByUsername(System.String)">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> with the specified username.
            </summary>
            <param name="username">The username of the user.</param>       
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetByUsername(System.String,System.String)">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> with the specified username and authentication provider.
            </summary>
            <param name="username">The username of the user.</param>
            <param name="providerName">The name of the authentication provider or <c>null</c> for Windows users.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetByEmail(System.String)">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> with the specified email address.
            </summary>
            <param name="email">The email of the user.</param>       
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
            <remarks>When more than one <see cref="T:Mindroute.Core.Model.User"/> matches the specified email address, this method returns the first match.</remarks>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetByEmail(System.String,System.String)">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.User"/> with the specified email address and authentication provider.
            </summary>
            <param name="email">The email of the user.</param>       
            <param name="providerName">The name of the authentication provider or <c>null</c> for Windows users.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.User"/> class.</returns>
            <remarks>When more than one <see cref="T:Mindroute.Core.Model.User"/> matches the specified email address, this method returns the first match.</remarks>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Insert(Mindroute.Core.Model.User,System.String)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.User"/> object into the repository.
            </summary>
            <param name="user"><see cref="T:Mindroute.Core.Model.User"/> object to insert.</param>
            <param name="password">The password to set for the user, <c>null</c> for Windows users.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Update(Mindroute.Core.Model.User)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.User"/> in the datasource.
            </summary>
            <param name="user"><see cref="T:Mindroute.Core.Model.User"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Search(Mindroute.Core.Search.UserQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.UserQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.UserQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.User"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetRole(System.Int32)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetRole(System.Guid)">
            <summary>
              Gets a windows <see cref="T:Mindroute.Core.Model.Role"/> from the repository.
            </summary>
            <param name="sid">The Globally Unique Identifier (GUID) of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetRole(System.String)">
            <summary>
              Gets a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="name">Name of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
            <returns>Returns an instance of the <see cref="T:Mindroute.Core.Model.Role"/> class.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.GetRolesByUser(System.Int32)">
            <summary>
              Gets the <see cref="T:Mindroute.Core.Model.Role"/>s that the <see cref="T:Mindroute.Core.Model.User"/> is a member of.
            </summary>
            <param name="id">ID of the <see cref="T:Mindroute.Core.Model.User"/> for which to get <see cref="T:Mindroute.Core.Model.Role"/>s.</param>
            <returns>Returns a list of <see cref="T:Mindroute.Core.Model.Role"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.InsertRole(Mindroute.Core.Model.Role)">
            <summary>
              Inserts a <see cref="T:Mindroute.Core.Model.Role"/> object into the repository.
            </summary>
            <param name="role"><see cref="T:Mindroute.Core.Model.Role"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.RemoveRole(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Mindroute.Core.Model.Role"/> object from the repository.
            </summary>
            <param name="id">ID (unique identifier).</param>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.Search(Mindroute.Core.Search.RoleQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Mindroute.Core.Search.RoleQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Mindroute.Core.Search.RoleQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Mindroute.Core.Model.Role"/> items.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.UpdateRole(Mindroute.Core.Model.Role)">
            <summary>
              Updates an existing <see cref="T:Mindroute.Core.Model.Role"/> in the datasource.
            </summary>
            <param name="role"><see cref="T:Mindroute.Core.Model.Role"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.AddUserToRole(System.Int32,System.Int32)">
            <summary>
              Adds a <see cref="T:Mindroute.Core.Model.User"/> to the specified <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="roleID">ID of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
        </member>
        <member name="M:Mindroute.Core.Services.UserService.RemoveUserFromRole(System.Int32,System.Int32)">
            <summary>
              Removes a <see cref="T:Mindroute.Core.Model.User"/> from the specified <see cref="T:Mindroute.Core.Model.Role"/>.
            </summary>
            <param name="userID">ID of the <see cref="T:Mindroute.Core.Model.User"/>.</param>
            <param name="roleID">ID of the <see cref="T:Mindroute.Core.Model.Role"/>.</param>
        </member>
        <member name="T:Mindroute.Core.Services.TagService">
            <summary>
              Service layer for tags.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.#ctor(Mindroute.Core.Repositories.ITagRepository,Mindroute.Core.Services.CacheService,Mindroute.Core.Services.PluginService,Mindroute.Core.Services.FullTextService)">
            <summary>
              Initializes a new instance of the <see cref="T:Mindroute.Core.Services.TagService"/> class.
            </summary>
            <param name="tagRepository">An object implementing the <see cref="T:Mindroute.Core.Repositories.ITagRepository"/> interface.</param>
            <param name="cacheService">An object implementing the <see cref="T:Mindroute.Core.Caching.ICacheProvider"/> interface.</param>
            <param name="pluginService">An instance of the <see cref="T:Mindroute.Core.Services.PluginService"/> class.</param>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.Get(Mindroute.Core.Model.Content)">
            <summary>
              Gets the collection of tags for a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to get tags.</param>
            <returns>A collection of strings.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.Set(Mindroute.Core.Model.Content,System.Collections.Generic.IList{System.String})">
            <summary>
              Sets the tags on a <see cref="T:Mindroute.Core.Model.Content"/> item.
            </summary>
            <param name="content">The <see cref="T:Mindroute.Core.Model.Content"/> item for which to set tags.</param>
            <param name="tags">The list of tags to set, <c>null</c> or empty list to clear tags from the <see cref="T:Mindroute.Core.Model.Content"/> item.</param>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.Remove(System.Int32,System.String)">
            <summary>
            Permanently removes a tag.
            </summary>
            <param name="languageID">Language ID of the tag.</param>
            <param name="name">Name of the tag to remove.</param>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.Rename(System.Int32,System.String,System.String)">
            <summary>
            Renames a tag.
            </summary>
            <param name="languageID">Language ID of the tag.</param>
            <param name="oldName">Name of the tag to rename.</param>
            <param name="newName">The new name of the tag.</param>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.GetTopTags(System.Nullable{System.Int32})">
            <summary>
              Gets the top (most used) tags.
            </summary>
            <param name="count">The maximum number of tags to return, <c>null</c> to return all tags.</param>
            <returns>A collection of <see cref="T:Mindroute.Core.Model.Tag"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.GetTopTags(System.Int32,System.Nullable{System.Int32})">
            <summary>
              Gets the top (most used) tags for a <see cref="T:Mindroute.Core.Model.Content"/> item and its descendants.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get tags.</param>
            <param name="count">The maximum number of tags to return, <c>null</c> to return all tags.</param>
            <returns>A collection of <see cref="T:Mindroute.Core.Model.Tag"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.GetTopTags(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{Mindroute.Core.Model.ContentType},System.Nullable{System.Int32})">
            <summary>
              Gets the top (most used) tags.
            </summary>
            <param name="contentID">ID of the <see cref="T:Mindroute.Core.Model.Content"/> item for which to get tags. All tags for the content item and its descendants are returned.</param>
            <param name="languageID">Language ID of the site for which to get tags.</param>
            <param name="contentTypes">A list of content types for which to get tags.</param>
            <param name="count">The maximum number of tags to return, <c>null</c> to return all tags.</param>
            <returns>A collection of <see cref="T:Mindroute.Core.Model.Tag"/> objects.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.IsValid(System.String)">
            <summary>
            Checks if a tag is valid.
            </summary>
            <param name="tag">The tag to check.</param>
            <returns><c>true</c> if the tag is valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.Clean(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Cleans up a collection of tags, by removing items that are null or empty and then trimming the remaining strings. 
            It also orders the tags alphabetically.
            </summary>
            <param name="tags">The list of tags to clean.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.AreEquivalent(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if two lists of tags are equivalent.
            </summary>
            <param name="first">The first list of tags.</param>
            <param name="second">The second list of tags.</param>
            <returns><c>true</c> if the lists are equivalent, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.ToTagString(System.Collections.Generic.IList{System.String})">
            <summary>
            Joins a list of tags into a comma separated string.
            </summary>
            <param name="tags">The list of tags to join.</param>
            <returns>A comma separated string.</returns>
        </member>
        <member name="M:Mindroute.Core.Services.TagService.FromTagString(System.String)">
            <summary>
            Split a comma separated string into a list of tags.
            </summary>
            <param name="tags">The string to split.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="T:Mindroute.Core.Model.SystemSetting">
            <summary>
              Indicates the available system settings.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.SystemSetting.License">
            <summary>
            Holds license information.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.SystemSetting.AutoImportUser">
            <summary>
            Holds information about AD settings.
            </summary>
        </member>
        <member name="F:Mindroute.Core.Model.SystemSetting.MainMenu">
            <summary>
            Holds information about the main menu items.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Validation.ValidationError">
            <summary>
            Holds information about a validation error.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Validation.ValidationError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ValidationError class. 
            </summary>
            <param name="propertyName">The name of the property for which validation failed.</param>
            <param name="errorMessage">The validation error message.</param>
        </member>
        <member name="M:Mindroute.Core.Validation.ValidationError.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the ValidationError class. 
            </summary>
            <param name="propertyName">The name of the property for which validation failed.</param>
            <param name="errorMessage">The validation error message.</param>
            <param name="onObject">The object for which validation failed.</param>
        </member>
        <member name="P:Mindroute.Core.Validation.ValidationError.PropertyName">
            <summary>
            Gets the name of the property for which validation failed.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Validation.ValidationError.ErrorMessage">
            <summary>
            Gets the validation error message.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Validation.ValidationError.Object">
            <summary>
            Gets the object for which validation failed.
            </summary>
        </member>
        <member name="T:Mindroute.Core.Validation.ValidationException">
            <summary>
            Occurs when an exception is thrown while performing a validation operation.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Validation.ValidationException.#ctor(System.Collections.Generic.IEnumerable{Mindroute.Core.Validation.ValidationError})">
            <summary>
            Initializes a new instance of the ValidationException class with the specified list of validation errors. 
            </summary>
            <param name="errors">A list  of validation errors.</param>
        </member>
        <member name="M:Mindroute.Core.Validation.ValidationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ValidationException class with the specified property name and error message. 
            </summary>
            <param name="propertyName">The name of the property for which validation failed.</param>
            <param name="errorMessage">The validation error message</param>
        </member>
        <member name="M:Mindroute.Core.Validation.ValidationException.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the ValidationException class. 
            </summary>
            <param name="propertyName">The name of the property for which validation failed.</param>
            <param name="errorMessage">The validation error message.</param>
            <param name="onObject">The object for which validation failed.</param>
        </member>
        <member name="P:Mindroute.Core.Validation.ValidationException.Errors">
            <summary>
            Gets the list of validation errors.
            </summary>
        </member>
        <member name="P:Mindroute.Core.Validation.ValidationException.Message">
            <summary>
            Gets a message that describes the current exception. 
            </summary>
        </member>
        <member name="T:Mindroute.Core.Validation.ValidationRunner">
            <summary>
            Helper methods for checking validation constraints.
            </summary>
        </member>
        <member name="M:Mindroute.Core.Validation.ValidationRunner.GetErrors(System.Object)">
            <summary>
            Gets a list of validation errors for an object.
            </summary>
            <param name="instance">The object to validate.</param>
            <returns>A list of validation errors (the list is empty if validation succeeds).</returns>
        </member>
        <member name="M:Mindroute.Core.Validation.ValidationRunner.Validate(System.Object)">
            <summary>
            Throws a ValidationException if validation of the specified object fails.
            </summary>
            <param name="instance">The object to validate</param>
        </member>
    </members>
</doc>
